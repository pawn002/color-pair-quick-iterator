{
    "pipes": [],
    "interfaces": [
        {
            "name": "MinMaxLightObject",
            "id": "interface-MinMaxLightObject-5c91efae922d7ed1094c7ab55afd3c3baf35ec9fc44e935b19f1a4ca06d26243397c9d4ac1c268dc6db9b1b9e67a631957c52534662f9d53492e90004341ad35",
            "file": "src/app/services/color-util.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport Color from 'colorjs.io';\r\nimport { ColorConstructor } from 'colorjs.io/types/src/color';\r\n\r\nexport interface MinMaxLightObject {\r\n  originalCoords: [number, number, number];\r\n  lightMin: number;\r\n  lightMax: number;\r\n}\r\n\r\nexport type ColorVariant = [number, number, number];\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorUtilService {\r\n  parseColor(color: string) {\r\n    let parsedColor: ColorConstructor | null = null;\r\n\r\n    try {\r\n      parsedColor = Color.parse(color);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return parsedColor;\r\n  }\r\n\r\n  createSrgbColor(color: string, lightness: number): string | null {\r\n    let srgbColor: string | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = new Color('srgb', parsedColor.coords).to('oklch');\r\n      const originalChroma = oklchColor.coords[1];\r\n      const originalHue = oklchColor.coords[2];\r\n\r\n      const targetColor = new Color('oklch', [\r\n        lightness,\r\n        originalChroma,\r\n        originalHue,\r\n      ]);\r\n\r\n      const targetColorAsRgbColor = targetColor.to('srgb');\r\n\r\n      srgbColor = targetColorAsRgbColor.toString({ format: 'hex' });\r\n    }\r\n\r\n    return srgbColor;\r\n  }\r\n\r\n  isInSrgbGamut(oklchColorCoord: [number, number, number]): Promise<boolean> {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      try {\r\n        const colorObject = new Color('oklch', oklchColorCoord);\r\n        const variantInGamut = colorObject.inGamut('srgb');\r\n\r\n        resolve(variantInGamut);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  createVariants(color: string): Array<ColorVariant> | null {\r\n    let variantCollection: Array<ColorVariant> | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const lchCooords = oklchColor.coords;\r\n      const colorChroma = lchCooords[1];\r\n      const colorHue = lchCooords[2];\r\n\r\n      // 1) create enough steps of lightness\r\n      const lightnessSteps = 1000;\r\n      const lightMax = 1;\r\n      const lightMin = 0;\r\n      const lightInterval = (lightMax - lightMin) / lightnessSteps;\r\n\r\n      // 2) create all variants of color using constant chroma and hue.\r\n      variantCollection = [];\r\n\r\n      // 2a) this actually creates `lightnessSteps + 1` variants as initial variant has to start at zero.\r\n      for (let i = 0; i <= lightnessSteps; i++) {\r\n        const variantTargetLight = i * lightInterval;\r\n        const variant: ColorVariant = [\r\n          variantTargetLight,\r\n          colorChroma,\r\n          colorHue,\r\n        ];\r\n\r\n        variantCollection.push(variant);\r\n      }\r\n    } else {\r\n      console.error(`unable to parse color`);\r\n    }\r\n\r\n    return variantCollection;\r\n  }\r\n\r\n  filterOutOfGamutVariants(\r\n    variants: Array<ColorVariant> | null\r\n  ): Promise<Array<ColorVariant>> {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!variants) {\r\n        reject(`no variants`);\r\n      } else {\r\n        let filteringComplete: boolean = false;\r\n\r\n        const filtered = [];\r\n\r\n        for (let i = 0; i < variants.length; i++) {\r\n          const curVariant = variants[i];\r\n\r\n          if (await this.isInSrgbGamut(curVariant)) {\r\n            filtered.push(curVariant);\r\n          }\r\n\r\n          if (i === variants.length - 1) filteringComplete = true;\r\n        }\r\n\r\n        if (filteringComplete) {\r\n          resolve(filtered);\r\n        } else {\r\n          reject(`error`);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async getMinMaxLight(color: string): Promise<MinMaxLightObject | null> {\r\n    let returnedObject: MinMaxLightObject | null = null;\r\n\r\n    const initVariantCollection = this.createVariants(color);\r\n\r\n    const variantCollection = await this.filterOutOfGamutVariants(\r\n      initVariantCollection\r\n    );\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor && variantCollection.length) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      const lchCooords = oklchColor.coords;\r\n\r\n      const oklchLightCoordIndex = 0;\r\n      const firstArrayItemIndex = 0;\r\n      const lastArrayItemIndex = variantCollection.length - 1;\r\n\r\n      const minLight =\r\n        variantCollection[firstArrayItemIndex][oklchLightCoordIndex];\r\n      const maxLight =\r\n        variantCollection[lastArrayItemIndex][oklchLightCoordIndex];\r\n\r\n      returnedObject = {\r\n        originalCoords: lchCooords,\r\n        lightMin: minLight,\r\n        lightMax: maxLight,\r\n      };\r\n    } else {\r\n      if (!parsedColor) {\r\n        console.error(`unable to parse color`);\r\n      } else {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n        const lchCooords = oklchColor.coords;\r\n        returnedObject = {\r\n          originalCoords: lchCooords,\r\n          lightMin: lchCooords[0],\r\n          lightMax: lchCooords[0],\r\n        };\r\n      }\r\n    }\r\n\r\n    return returnedObject;\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n",
            "properties": [
                {
                    "name": "lightMax",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "lightMin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "originalCoords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number, number]",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "NumberKeyLookup",
            "id": "interface-NumberKeyLookup-37a46b891e28f5e175c600b6ae5f7195d17f5d96e913ad60d14f586b085513dd8bad9eb87dc9d8344ffc0c7ce35d2822db351960762eafc66d3f132a8a366090",
            "file": "src/app/services/color-metrics.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport { calcAPCA, sRGBtoY } from 'apca-w3';\r\n\r\nimport { scaleLinear } from 'd3';\r\n\r\nexport interface NumberKeyLookup {\r\n  [key: number]: number;\r\n}\r\n\r\nexport type ContrastType = 'apca' | 'bpca';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorMetricsService {\r\n  apcaToWcagLookup: NumberKeyLookup = {};\r\n\r\n  getContrast(\r\n    colorOne: string,\r\n    colorTwo: string,\r\n    contrastType: ContrastType\r\n  ): number | null {\r\n    let score: number | null = null;\r\n\r\n    const contrast = this.calcRawApcaContrast(colorOne, colorTwo);\r\n\r\n    if (contrast || contrast === 0) {\r\n      if (contrastType === 'apca') {\r\n        const roundedContrast = contrast.toFixed(0);\r\n\r\n        score = parseInt(roundedContrast);\r\n      }\r\n\r\n      if (contrastType === 'bpca') {\r\n        const wcagStyleScore = this.transformAPCAToWCAG(contrast);\r\n\r\n        score = wcagStyleScore;\r\n      }\r\n    } else {\r\n      console.error(`Raw APCA contrast was not calculable`);\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  calcRawApcaContrast(colorOne: string, colorTwo: string): number | null {\r\n    let score: number | null = null;\r\n\r\n    score = calcAPCA(colorOne, colorTwo);\r\n\r\n    return score;\r\n  }\r\n\r\n  transformAPCAToWCAG(apcaScore: number): number {\r\n    let wcag: number = NaN;\r\n\r\n    // [Source for numbers](https://github.com/Myndex/bridge-pca#additional-notes)\r\n    const scaleApcaToWcag = scaleLinear(\r\n      // WCAG-ish Range\r\n      [1, 3, 4.5, 7, 21]\r\n    ).domain(\r\n      // APCA Absolute Range\r\n      [0, 60, 75, 90, 108]\r\n    );\r\n\r\n    const absoluteApca: number = Math.abs(\r\n      // Subtracting one from APCA raw score to ensure no false passes going from APCA to WCAG Style.\r\n      apcaScore - 1\r\n    );\r\n\r\n    if (this.apcaToWcagLookup[absoluteApca]) {\r\n      // use memoized value if present\r\n      wcag = this.apcaToWcagLookup[absoluteApca];\r\n    } else {\r\n      const wcagStyleScore = scaleApcaToWcag(absoluteApca);\r\n\r\n      let roundedWcag = parseFloat(wcagStyleScore.toFixed(1));\r\n\r\n      if (roundedWcag > 21) {\r\n        roundedWcag = 21;\r\n      }\r\n\r\n      // memoize score for later access\r\n      this.apcaToWcagLookup[absoluteApca] = roundedWcag;\r\n\r\n      wcag = roundedWcag;\r\n    }\r\n\r\n    return wcag;\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-37a46b891e28f5e175c600b6ae5f7195d17f5d96e913ad60d14f586b085513dd8bad9eb87dc9d8344ffc0c7ce35d2822db351960762eafc66d3f132a8a366090",
                    "args": [
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 178,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-dcc5c3137cd472dd0002d85b562efd23162e3eff53ca4438a6251e6c46e3b8299076255380d1d42f386510cb6f2cbaab49fa5b5f253be459cdc3869428c5c400",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ColorMetricsService",
            "id": "injectable-ColorMetricsService-37a46b891e28f5e175c600b6ae5f7195d17f5d96e913ad60d14f586b085513dd8bad9eb87dc9d8344ffc0c7ce35d2822db351960762eafc66d3f132a8a366090",
            "file": "src/app/services/color-metrics.service.ts",
            "properties": [
                {
                    "name": "apcaToWcagLookup",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NumberKeyLookup",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [
                {
                    "name": "calcRawApcaContrast",
                    "args": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getContrast",
                    "args": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contrastType",
                            "type": "ContrastType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contrastType",
                            "type": "ContrastType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformAPCAToWCAG",
                    "args": [
                        {
                            "name": "apcaScore",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "apcaScore",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport { calcAPCA, sRGBtoY } from 'apca-w3';\r\n\r\nimport { scaleLinear } from 'd3';\r\n\r\nexport interface NumberKeyLookup {\r\n  [key: number]: number;\r\n}\r\n\r\nexport type ContrastType = 'apca' | 'bpca';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorMetricsService {\r\n  apcaToWcagLookup: NumberKeyLookup = {};\r\n\r\n  getContrast(\r\n    colorOne: string,\r\n    colorTwo: string,\r\n    contrastType: ContrastType\r\n  ): number | null {\r\n    let score: number | null = null;\r\n\r\n    const contrast = this.calcRawApcaContrast(colorOne, colorTwo);\r\n\r\n    if (contrast || contrast === 0) {\r\n      if (contrastType === 'apca') {\r\n        const roundedContrast = contrast.toFixed(0);\r\n\r\n        score = parseInt(roundedContrast);\r\n      }\r\n\r\n      if (contrastType === 'bpca') {\r\n        const wcagStyleScore = this.transformAPCAToWCAG(contrast);\r\n\r\n        score = wcagStyleScore;\r\n      }\r\n    } else {\r\n      console.error(`Raw APCA contrast was not calculable`);\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  calcRawApcaContrast(colorOne: string, colorTwo: string): number | null {\r\n    let score: number | null = null;\r\n\r\n    score = calcAPCA(colorOne, colorTwo);\r\n\r\n    return score;\r\n  }\r\n\r\n  transformAPCAToWCAG(apcaScore: number): number {\r\n    let wcag: number = NaN;\r\n\r\n    // [Source for numbers](https://github.com/Myndex/bridge-pca#additional-notes)\r\n    const scaleApcaToWcag = scaleLinear(\r\n      // WCAG-ish Range\r\n      [1, 3, 4.5, 7, 21]\r\n    ).domain(\r\n      // APCA Absolute Range\r\n      [0, 60, 75, 90, 108]\r\n    );\r\n\r\n    const absoluteApca: number = Math.abs(\r\n      // Subtracting one from APCA raw score to ensure no false passes going from APCA to WCAG Style.\r\n      apcaScore - 1\r\n    );\r\n\r\n    if (this.apcaToWcagLookup[absoluteApca]) {\r\n      // use memoized value if present\r\n      wcag = this.apcaToWcagLookup[absoluteApca];\r\n    } else {\r\n      const wcagStyleScore = scaleApcaToWcag(absoluteApca);\r\n\r\n      let roundedWcag = parseFloat(wcagStyleScore.toFixed(1));\r\n\r\n      if (roundedWcag > 21) {\r\n        roundedWcag = 21;\r\n      }\r\n\r\n      // memoize score for later access\r\n      this.apcaToWcagLookup[absoluteApca] = roundedWcag;\r\n\r\n      wcag = roundedWcag;\r\n    }\r\n\r\n    return wcag;\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 90
            },
            "type": "injectable"
        },
        {
            "name": "ColorUtilService",
            "id": "injectable-ColorUtilService-5c91efae922d7ed1094c7ab55afd3c3baf35ec9fc44e935b19f1a4ca06d26243397c9d4ac1c268dc6db9b1b9e67a631957c52534662f9d53492e90004341ad35",
            "file": "src/app/services/color-util.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createSrgbColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lightness",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lightness",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createVariants",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array | null",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterOutOfGamutVariants",
                    "args": [
                        {
                            "name": "variants",
                            "type": "Array<ColorVariant> | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Array<ColorVariant>>",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "variants",
                            "type": "Array<ColorVariant> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMinMaxLight",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<MinMaxLightObject | null>",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        132
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isInSrgbGamut",
                    "args": [
                        {
                            "name": "oklchColorCoord",
                            "type": "[number, number, number]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "oklchColorCoord",
                            "type": "[number, number, number]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport Color from 'colorjs.io';\r\nimport { ColorConstructor } from 'colorjs.io/types/src/color';\r\n\r\nexport interface MinMaxLightObject {\r\n  originalCoords: [number, number, number];\r\n  lightMin: number;\r\n  lightMax: number;\r\n}\r\n\r\nexport type ColorVariant = [number, number, number];\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorUtilService {\r\n  parseColor(color: string) {\r\n    let parsedColor: ColorConstructor | null = null;\r\n\r\n    try {\r\n      parsedColor = Color.parse(color);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return parsedColor;\r\n  }\r\n\r\n  createSrgbColor(color: string, lightness: number): string | null {\r\n    let srgbColor: string | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = new Color('srgb', parsedColor.coords).to('oklch');\r\n      const originalChroma = oklchColor.coords[1];\r\n      const originalHue = oklchColor.coords[2];\r\n\r\n      const targetColor = new Color('oklch', [\r\n        lightness,\r\n        originalChroma,\r\n        originalHue,\r\n      ]);\r\n\r\n      const targetColorAsRgbColor = targetColor.to('srgb');\r\n\r\n      srgbColor = targetColorAsRgbColor.toString({ format: 'hex' });\r\n    }\r\n\r\n    return srgbColor;\r\n  }\r\n\r\n  isInSrgbGamut(oklchColorCoord: [number, number, number]): Promise<boolean> {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      try {\r\n        const colorObject = new Color('oklch', oklchColorCoord);\r\n        const variantInGamut = colorObject.inGamut('srgb');\r\n\r\n        resolve(variantInGamut);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  createVariants(color: string): Array<ColorVariant> | null {\r\n    let variantCollection: Array<ColorVariant> | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const lchCooords = oklchColor.coords;\r\n      const colorChroma = lchCooords[1];\r\n      const colorHue = lchCooords[2];\r\n\r\n      // 1) create enough steps of lightness\r\n      const lightnessSteps = 1000;\r\n      const lightMax = 1;\r\n      const lightMin = 0;\r\n      const lightInterval = (lightMax - lightMin) / lightnessSteps;\r\n\r\n      // 2) create all variants of color using constant chroma and hue.\r\n      variantCollection = [];\r\n\r\n      // 2a) this actually creates `lightnessSteps + 1` variants as initial variant has to start at zero.\r\n      for (let i = 0; i <= lightnessSteps; i++) {\r\n        const variantTargetLight = i * lightInterval;\r\n        const variant: ColorVariant = [\r\n          variantTargetLight,\r\n          colorChroma,\r\n          colorHue,\r\n        ];\r\n\r\n        variantCollection.push(variant);\r\n      }\r\n    } else {\r\n      console.error(`unable to parse color`);\r\n    }\r\n\r\n    return variantCollection;\r\n  }\r\n\r\n  filterOutOfGamutVariants(\r\n    variants: Array<ColorVariant> | null\r\n  ): Promise<Array<ColorVariant>> {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!variants) {\r\n        reject(`no variants`);\r\n      } else {\r\n        let filteringComplete: boolean = false;\r\n\r\n        const filtered = [];\r\n\r\n        for (let i = 0; i < variants.length; i++) {\r\n          const curVariant = variants[i];\r\n\r\n          if (await this.isInSrgbGamut(curVariant)) {\r\n            filtered.push(curVariant);\r\n          }\r\n\r\n          if (i === variants.length - 1) filteringComplete = true;\r\n        }\r\n\r\n        if (filteringComplete) {\r\n          resolve(filtered);\r\n        } else {\r\n          reject(`error`);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async getMinMaxLight(color: string): Promise<MinMaxLightObject | null> {\r\n    let returnedObject: MinMaxLightObject | null = null;\r\n\r\n    const initVariantCollection = this.createVariants(color);\r\n\r\n    const variantCollection = await this.filterOutOfGamutVariants(\r\n      initVariantCollection\r\n    );\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor && variantCollection.length) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      const lchCooords = oklchColor.coords;\r\n\r\n      const oklchLightCoordIndex = 0;\r\n      const firstArrayItemIndex = 0;\r\n      const lastArrayItemIndex = variantCollection.length - 1;\r\n\r\n      const minLight =\r\n        variantCollection[firstArrayItemIndex][oklchLightCoordIndex];\r\n      const maxLight =\r\n        variantCollection[lastArrayItemIndex][oklchLightCoordIndex];\r\n\r\n      returnedObject = {\r\n        originalCoords: lchCooords,\r\n        lightMin: minLight,\r\n        lightMax: maxLight,\r\n      };\r\n    } else {\r\n      if (!parsedColor) {\r\n        console.error(`unable to parse color`);\r\n      } else {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n        const lchCooords = oklchColor.coords;\r\n        returnedObject = {\r\n          originalCoords: lchCooords,\r\n          lightMin: lchCooords[0],\r\n          lightMax: lchCooords[0],\r\n        };\r\n      }\r\n    }\r\n\r\n    return returnedObject;\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 179
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ContrastObject",
            "id": "class-ContrastObject-2114a1f3ff1f52fbf0070aa415d87c5a377d13f0d17561dc38008ec4adc4bf12c60de09c6cde92c647ad0318e5b98a8a6402fa1ab04ad8984a5212c8d2ca10de",
            "file": "src/app/color-contrast/color-contrast.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport {\r\n  ColorMetricsService,\r\n  ContrastType,\r\n} from '../services/color-metrics.service';\r\n\r\nexport class ContrastObject {\r\n  score: number | null = null;\r\n  type: ContrastType | null = null;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-color-contrast',\r\n  templateUrl: './color-contrast.component.html',\r\n  styleUrls: ['./color-contrast.component.scss'],\r\n})\r\nexport class ColorContrastComponent implements OnChanges {\r\n  @Input() colorOne: string | null = null;\r\n  @Input() colorTwo: string | null = null;\r\n  @Input() contrastType: ContrastType | null = null;\r\n\r\n  @Output() contrast = new EventEmitter<ContrastObject>();\r\n\r\n  contrastScore: number | null = null;\r\n\r\n  constructor(private cms: ColorMetricsService) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // console.log(changes);\r\n\r\n    if (this.colorOne && this.colorTwo && this.contrastType) {\r\n      const score = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        this.contrastType\r\n      );\r\n\r\n      this.contrastScore = score;\r\n    } else {\r\n      console.error('contrast comp has incomplete bindings');\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "score",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "type",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContrastType | null",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-15b73e60032f650e310b62fad6da7f00ac9bae1079adc9c9717bb0e10151b234b5688bb1634b43be1021d13496a9bd74e97035c2fff3198f45373d6615f3f804",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colorPickerOneComparedColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "colorPickerOneSelectedColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "colorPickerTwoComparedColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "colorPickerTwoSelectedColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "contrastType",
                    "defaultValue": "'apca'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContrastType",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "handleColorInputInput",
                    "args": [
                        {
                            "name": "inputNumber",
                            "type": "\"One\" | \"Two\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputNumber",
                            "type": "\"One\" | \"Two\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSliderInputInput",
                    "args": [
                        {
                            "name": "inputNumber",
                            "type": "\"One\" | \"Two\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputNumber",
                            "type": "\"One\" | \"Two\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "swapColors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleContrastType",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ContrastType } from './services/color-metrics.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  colorPickerOneSelectedColor: string | null = null;\r\n  colorPickerOneComparedColor: string | null = null;\r\n\r\n  colorPickerTwoSelectedColor: string | null = null;\r\n  colorPickerTwoComparedColor: string | null = null;\r\n\r\n  contrastType: ContrastType = 'apca';\r\n\r\n  handleColorInputInput(inputNumber: 'One' | 'Two', event: string) {\r\n    if (inputNumber === 'One') {\r\n      this.colorPickerOneSelectedColor = event;\r\n    }\r\n\r\n    if (inputNumber === 'Two') {\r\n      this.colorPickerTwoSelectedColor = event;\r\n    }\r\n  }\r\n\r\n  handleSliderInputInput(inputNumber: 'One' | 'Two', event: string | null) {\r\n    if (inputNumber === 'One') {\r\n      this.colorPickerOneComparedColor = event;\r\n    }\r\n\r\n    if (inputNumber === 'Two') {\r\n      this.colorPickerTwoComparedColor = event;\r\n    }\r\n  }\r\n\r\n  toggleContrastType(event: Event) {\r\n    const inputElement = event.target as HTMLInputElement;\r\n    const checked = inputElement.checked;\r\n\r\n    this.contrastType = checked ? 'bpca' : 'apca';\r\n  }\r\n\r\n  swapColors() {\r\n    const getColor = (type: 'fg' | 'bg'): string | null => {\r\n      let color: string | null = null;\r\n\r\n      switch (type) {\r\n        case 'fg':\r\n          color = this.colorPickerOneSelectedColor;\r\n\r\n          break;\r\n        case 'bg':\r\n          color = this.colorPickerTwoSelectedColor;\r\n\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      return color;\r\n    };\r\n\r\n    const oldPairing = {\r\n      foreground: getColor('fg'),\r\n      background: getColor('bg'),\r\n    };\r\n\r\n    const newPairing = {\r\n      foreground: oldPairing.background,\r\n      background: oldPairing.foreground,\r\n    };\r\n\r\n    if (newPairing.foreground && newPairing.background) {\r\n      this.colorPickerOneSelectedColor = newPairing.foreground;\r\n\r\n      this.colorPickerTwoSelectedColor = newPairing.background;\r\n    } else {\r\n      console.error('swapping colors went badly. . .');\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".app-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: var(--fluidPadding);\r\n  background-color: var(--background-color);\r\n\r\n  section {\r\n    // margin: 0.5rem 0;\r\n  }\r\n\r\n  .title-and-score {\r\n    display: flex;\r\n    gap: 1rem;\r\n    margin-bottom: 0.8rem;\r\n\r\n    h1 {\r\n      width: min-content;\r\n      text-align: right;\r\n    }\r\n\r\n    app-color-contrast {\r\n      flex-grow: 1;\r\n    }\r\n  }\r\n\r\n  .slide-group {\r\n    display: flex;\r\n    margin-bottom: 0.4rem;\r\n    align-items: center;\r\n\r\n    app-color-slider {\r\n      flex-grow: 1;\r\n    }\r\n  }\r\n\r\n  h2 {\r\n    text-align: center;\r\n  }\r\n\r\n  .quick-actions {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: flex-start;\r\n\r\n    button {\r\n      background-color: var(--background-color);\r\n      border: transparent 2px solid;\r\n      box-sizing: border-box;\r\n      position: relative;\r\n      display: flex;\r\n      // justify-content: center;\r\n      align-items: center;\r\n      margin: 11px;\r\n\r\n      min-width: var(--minHitDimensionAA);\r\n      min-height: var(--minHitDimensionAA);\r\n\r\n      svg {\r\n        fill: #000000;\r\n        transform: rotateZ(90deg);\r\n\r\n        height: auto;\r\n        width: 22px;\r\n\r\n        display: inline-block;\r\n      }\r\n    }\r\n  }\r\n\r\n  .options {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n\r\n    .checkbox-group {\r\n      display: flex;\r\n      flex-direction: row-reverse;\r\n      justify-content: flex-end;\r\n      align-items: center;\r\n      flex-grow: 1;\r\n\r\n      label {\r\n        font-size: var(--minTextSize);\r\n        font-family: var(--bodyFont);\r\n        color: var(--min-body-text-black);\r\n      }\r\n      input {\r\n        margin: 11px;\r\n        min-width: var(--minHitDimensionAA);\r\n        min-height: var(--minHitDimensionAA);\r\n      }\r\n    }\r\n  }\r\n\r\n  .notes {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    p {\r\n      margin: 0 11px 1.15em 0;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"app-container\">\r\n  <section class=\"title-and-sliders\">\r\n    <div class=\"title-and-score\">\r\n      <h1>Perceptual Contrast<sup>a</sup></h1>\r\n      <app-color-contrast\r\n        [colorOne]=\"colorPickerOneComparedColor\"\r\n        [colorTwo]=\"colorPickerTwoComparedColor\"\r\n        [contrastType]=\"contrastType\"\r\n      ></app-color-contrast>\r\n    </div>\r\n\r\n    <h2 class=\"sr-only\">Main Color Controls</h2>\r\n    <div class=\"slide-group\">\r\n      <app-color-picker\r\n        [inputId]=\"'cp-0'\"\r\n        [inputName]=\"'Foreground Color'\"\r\n        [comparedColor]=\"colorPickerOneComparedColor\"\r\n        (selectedColor)=\"handleColorInputInput('One', $event)\"\r\n        [deltaColor]=\"colorPickerOneSelectedColor\"\r\n      ></app-color-picker>\r\n      <app-color-slider\r\n        [id]=\"'slider-0'\"\r\n        [name]=\"'Foreground Slider'\"\r\n        [color]=\"colorPickerOneSelectedColor\"\r\n        (colorVariant)=\"handleSliderInputInput('One', $event)\"\r\n      ></app-color-slider>\r\n      <app-copy-to-clipboard-button\r\n        [color]=\"colorPickerOneComparedColor\"\r\n      ></app-copy-to-clipboard-button>\r\n    </div>\r\n\r\n    <div class=\"slide-group\">\r\n      <app-color-picker\r\n        [inputId]=\"'cp-1'\"\r\n        [inputName]=\"'Background Color'\"\r\n        [comparedColor]=\"colorPickerTwoComparedColor\"\r\n        [deltaColor]=\"colorPickerTwoSelectedColor\"\r\n        (selectedColor)=\"handleColorInputInput('Two', $event)\"\r\n      ></app-color-picker>\r\n      <app-color-slider\r\n        [id]=\"'slider-1'\"\r\n        [name]=\"'Backgroundground Slider'\"\r\n        [color]=\"colorPickerTwoSelectedColor\"\r\n        (colorVariant)=\"handleSliderInputInput('Two', $event)\"\r\n      ></app-color-slider>\r\n      <app-copy-to-clipboard-button\r\n        [color]=\"colorPickerTwoComparedColor\"\r\n      ></app-copy-to-clipboard-button>\r\n    </div>\r\n  </section>\r\n\r\n  <section class=\"quick-actions\">\r\n    <button\r\n      [disabled]=\"!colorPickerOneSelectedColor || !colorPickerTwoSelectedColor\"\r\n      (click)=\"swapColors()\"\r\n    >\r\n      <span class=\"sr-only\">Swap Selected Colors</span>\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 32 32\"\r\n        x=\"0px\"\r\n        y=\"0px\"\r\n      >\r\n        <defs>\r\n          <style>\r\n            .cls-1 {\r\n              fill: none;\r\n            }\r\n          </style>\r\n        </defs>\r\n        <g>\r\n          <path\r\n            d=\"M6.29,8.71a1,1,0,0,1,0-1.42l4-4a1,1,0,1,1,1.42,1.42L9.41,7H19a7,7,0,0,1,7,7,1,1,0,0,1-2,0,5,5,0,0,0-5-5H9.41l2.3,2.29a1,1,0,0,1,0,1.42,1,1,0,0,1-1.42,0ZM21.71,19.29a1,1,0,0,0-1.42,1.42L22.59,23H13a5,5,0,0,1-5-5,1,1,0,0,0-2,0,7,7,0,0,0,7,7h9.59l-2.3,2.29a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l4-4a1,1,0,0,0,0-1.42Z\"\r\n          />\r\n          <rect class=\"cls-1\" width=\"32\" height=\"32\" />\r\n        </g>\r\n      </svg>\r\n    </button>\r\n    <button disabled>Re</button>\r\n    <button disabled>Ch</button>\r\n    <button disabled>Sa</button>\r\n  </section>\r\n\r\n  <hr />\r\n\r\n  <section class=\"options\">\r\n    <h2>Options</h2>\r\n    <div class=\"options\">\r\n      <div class=\"checkbox-group\">\r\n        <label for=\"option-score-toggle\">Use WCAG 2.x value</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"Contrast Score Type Toggle\"\r\n          id=\"option-score-toggle\"\r\n          (change)=\"toggleContrastType($event)\"\r\n        />\r\n      </div>\r\n      <div class=\"checkbox-group\">\r\n        <label for=\"option-omit-hex\">Omit # from Copy</label>\r\n        <input\r\n          disabled\r\n          type=\"checkbox\"\r\n          name=\"Omit # from Hex Code Toggle\"\r\n          id=\"option-omit-hex\"\r\n        />\r\n      </div>\r\n      <div class=\"checkbox-group\">\r\n        <label for=\"option-const-chroma\">Constant Chroma<sup>b</sup></label>\r\n        <input\r\n          checked\r\n          disabled\r\n          type=\"checkbox\"\r\n          name=\"Constant Chroma Toggle\"\r\n          id=\"option-const-chroma\"\r\n        />\r\n      </div>\r\n    </div>\r\n  </section>\r\n\r\n  <hr />\r\n\r\n  <section class=\"notes\">\r\n    <h2>Notes</h2>\r\n\r\n    <p>\r\n      <sup>a</sup>For more information on the value used for Perceptual\r\n      Contrast, refer to Myndex article\r\n      <a href=\"https://git.apcacontrast.com/documentation/WhyAPCA.html\"\r\n        >Why APCA?</a\r\n      >\r\n    </p>\r\n    <p>\r\n      <sup>b</sup>Color slider varies light and dark restricting possible tints\r\n      and shades to the same chroma and hue of the inputted color. Support for\r\n      switching this off and using constant saturation instead is\r\n      <a href=\"https://github.com/pawn002/color-pair-quick-iterator/issues/27\"\r\n        >planned for later</a\r\n      >.\r\n    </p>\r\n  </section>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-502c6abda417339da493e76cd3c2a684c773d3fc72909f801205fbff5530b3d366380f430857d0cdf5d633f8408ab2890bd97bda38dd5ff2b9aeddc5780cee29",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 824,
                            "end": 838,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 825,
                                "end": 833,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 34,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  imports: [CommonModule],\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 50
                    }
                }
            }
        },
        {
            "name": "ColorContrastComponent",
            "id": "component-ColorContrastComponent-2114a1f3ff1f52fbf0070aa415d87c5a377d13f0d17561dc38008ec4adc4bf12c60de09c6cde92c647ad0318e5b98a8a6402fa1ab04ad8984a5212c8d2ca10de",
            "file": "src/app/color-contrast/color-contrast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-contrast",
            "styleUrls": [
                "./color-contrast.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-contrast.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "colorOne",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "colorTwo",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "contrastType",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "ContrastType | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "contrast",
                    "defaultValue": "new EventEmitter<ContrastObject>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "contrastScore",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport {\r\n  ColorMetricsService,\r\n  ContrastType,\r\n} from '../services/color-metrics.service';\r\n\r\nexport class ContrastObject {\r\n  score: number | null = null;\r\n  type: ContrastType | null = null;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-color-contrast',\r\n  templateUrl: './color-contrast.component.html',\r\n  styleUrls: ['./color-contrast.component.scss'],\r\n})\r\nexport class ColorContrastComponent implements OnChanges {\r\n  @Input() colorOne: string | null = null;\r\n  @Input() colorTwo: string | null = null;\r\n  @Input() contrastType: ContrastType | null = null;\r\n\r\n  @Output() contrast = new EventEmitter<ContrastObject>();\r\n\r\n  contrastScore: number | null = null;\r\n\r\n  constructor(private cms: ColorMetricsService) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // console.log(changes);\r\n\r\n    if (this.colorOne && this.colorTwo && this.contrastType) {\r\n      const score = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        this.contrastType\r\n      );\r\n\r\n      this.contrastScore = score;\r\n    } else {\r\n      console.error('contrast comp has incomplete bindings');\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  border: black solid 3px;\r\n  padding: 0.5rem;\r\n\r\n  .score-container {\r\n    display: flex;\r\n    justify-content: center;\r\n\r\n    .score {\r\n      // font-style: italic;\r\n      font-weight: 700;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-contrast.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cms",
                        "type": "ColorMetricsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "cms",
                        "type": "ColorMetricsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"comp-container\">\r\n  <div class=\"score-container\">\r\n    <label class=\"sr-only\" for=\"contrast-score\"\r\n      >Contrast Score for Selected Colors</label\r\n    >\r\n\r\n    <div id=\"contrast-score\" class=\"score\">\r\n      {{ contrastScore || contrastScore === 0 ? contrastScore : \"null\" }}\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ColorPickerComponent",
            "id": "component-ColorPickerComponent-16b6791dfbb06824f172ba999b737dd64b68f96798ee63afa903066ff03e5e1c3290fc0498ef9b4a1e1903d8f56633f041754ea4012d93732dfa367f13464680",
            "file": "src/app/color-picker/color-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-picker",
            "styleUrls": [
                "./color-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "comparedColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "deltaColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "defaultValue": "'fg-color'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputName",
                    "defaultValue": "'foreground color'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedColor",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "color",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "handleColorChange",
                    "args": [
                        {
                            "name": "inputColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleInputEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-color-picker',\r\n  templateUrl: './color-picker.component.html',\r\n  styleUrls: ['./color-picker.component.scss'],\r\n})\r\nexport class ColorPickerComponent implements OnChanges {\r\n  @Input() inputId: string = 'fg-color';\r\n  @Input() inputName: string = 'foreground color';\r\n  @Input() comparedColor: string | null = null;\r\n  @Input() deltaColor?: string | null = null;\r\n\r\n  @Output() selectedColor = new EventEmitter<string>();\r\n\r\n  color: string | null = null;\r\n\r\n  handleColorChange(inputColor: string) {\r\n    // update color\r\n    this.color = inputColor;\r\n\r\n    // send out color for use in other comps\r\n    this.selectedColor.emit(inputColor);\r\n  }\r\n\r\n  handleInputEvent(event: Event) {\r\n    const inputElement = event.target as HTMLInputElement;\r\n\r\n    const selectedColor = inputElement.value;\r\n\r\n    // reset compared color\r\n    this.comparedColor = 'transparent';\r\n\r\n    this.handleColorChange(selectedColor);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.deltaColor) {\r\n      this.handleColorChange(this.deltaColor);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  position: relative;\r\n  display: inline-block;\r\n\r\n  input {\r\n    // NOTE: 2(15px) + 15px = 45px\r\n    width: 45px;\r\n    height: 45px;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  .color-preview {\r\n    border-radius: 5px;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    // NOTE: 2(15px) + 15px = 45px\r\n    width: 45px;\r\n    height: 45px;\r\n    border: transparent 15px solid;\r\n    background-color: transparent;\r\n    pointer-events: none;\r\n    box-sizing: border-box;\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-picker.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"comp-container\">\r\n  <label class=\"sr-only\" [for]=\"inputId\">Color Picker One</label>\r\n  <input\r\n    type=\"color\"\r\n    [id]=\"inputId\"\r\n    [name]=\"inputName\"\r\n    (input)=\"handleInputEvent($event)\"\r\n  />\r\n\r\n  <div\r\n    class=\"color-preview\"\r\n    [style.borderColor]=\"comparedColor\"\r\n    [style.backgroundColor]=\"color\"\r\n  ></div>\r\n</div>\r\n"
        },
        {
            "name": "ColorSliderComponent",
            "id": "component-ColorSliderComponent-d5f67f36dfc71b7221cd8fc894b2f2928e7b0c35e59ffc5616e8e74c4a7eba11ce246f24c2784d794c406275516d8dd00b7053e17bd4588da6f8454da56e5592",
            "file": "src/app/color-slider/color-slider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-slider",
            "styleUrls": [
                "./color-slider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-slider.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "'slider-0'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string | \"slider-0\"",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'color-slider'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string | \"color-slider\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "colorVariant",
                    "defaultValue": "new EventEmitter<string | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "debug",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "devColorVariant",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "slideInterval",
                    "defaultValue": "0.005",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "slideMax",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "slideMin",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "getAndSetLightnessRange",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        132
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSliding",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendInitialLightVariant",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { ColorUtilService } from '../services/color-util.service';\r\n\r\n@Component({\r\n  selector: 'app-color-slider',\r\n  templateUrl: './color-slider.component.html',\r\n  styleUrls: ['./color-slider.component.scss'],\r\n})\r\nexport class ColorSliderComponent implements OnInit, OnChanges {\r\n  @Input() id: string | 'slider-0' = 'slider-0';\r\n  @Input() name: string | 'color-slider' = 'color-slider';\r\n  @Input() color: string | null = null;\r\n  @Output() colorVariant = new EventEmitter<string | null>();\r\n\r\n  debug: boolean = false;\r\n  devColorVariant: string | null = null;\r\n\r\n  // slideInterval: number | null = 0.001;\r\n  slideInterval: number | null = 0.005;\r\n  slideMin: number | null = null;\r\n  slideMax: number | null = null;\r\n  value: number | null = null;\r\n\r\n  sendInitialLightVariant() {\r\n    // Good UX to just send the input color?\r\n    this.colorVariant.emit(this.color);\r\n\r\n    if (this.debug) {\r\n      this.devColorVariant = this.color;\r\n    }\r\n  }\r\n\r\n  async getAndSetLightnessRange(color: string) {\r\n    const rangeObject = await this.cus.getMinMaxLight(color);\r\n\r\n    if (rangeObject) {\r\n      this.sendInitialLightVariant();\r\n\r\n      this.slideMin = rangeObject.lightMin;\r\n      this.slideMax = rangeObject.lightMax;\r\n\r\n      const lightnessValue = 0;\r\n      const initialSlideValue = rangeObject.originalCoords[lightnessValue];\r\n\r\n      this.value = initialSlideValue;\r\n    } else {\r\n      console.error(`no range object for slider`);\r\n    }\r\n  }\r\n\r\n  handleSliding(event: Event) {\r\n    const inputElem = event.target as HTMLInputElement;\r\n\r\n    if (inputElem) {\r\n      const lightValue = parseFloat(inputElem.value);\r\n\r\n      if (this.color) {\r\n        const lightnessVariant = this.cus.createSrgbColor(\r\n          this.color,\r\n          lightValue\r\n        );\r\n\r\n        if (this.debug) {\r\n          console.log(`slide modding ${this.color} to ${lightnessVariant}`);\r\n\r\n          this.devColorVariant = lightnessVariant;\r\n        }\r\n\r\n        this.colorVariant.emit(lightnessVariant);\r\n      } else {\r\n        console.error(`no color specified`);\r\n      }\r\n    }\r\n  }\r\n\r\n  constructor(private cus: ColorUtilService) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.color) {\r\n      this.getAndSetLightnessRange(this.color);\r\n    } else {\r\n      console.error(`no color specified to comp`);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  // gives input more room on left and right ends to be hit more successfully\r\n  padding: 0 calc(var(--minHitDimensionAAA) / 2);\r\n  align-items: center;\r\n  background-color: white;\r\n\r\n  input {\r\n    flex-grow: 1;\r\n    min-height: var(--minHitDimensionAAA);\r\n    width: 100%;\r\n    margin: 0;\r\n  }\r\n\r\n  .special-case {\r\n    flex-grow: 1;\r\n    min-height: var(--minHitDimensionAAA);\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    // TODO: what do custom input text need to be? <p>?\r\n    div {\r\n      font-family: var(--monoFont);\r\n      font-size: var(--minBodyTextSize);\r\n      font-style: italic;\r\n      font-weight: 400;\r\n    }\r\n  }\r\n}\r\n\r\n.dev-overlay {\r\n  position: absolute;\r\n  display: none;\r\n  gap: 1rem;\r\n  bottom: 0;\r\n  right: 0;\r\n\r\n  &.active {\r\n    display: flex;\r\n  }\r\n\r\n  .light-variant-chip {\r\n    border-radius: 100%;\r\n    width: 15px;\r\n    height: 15px;\r\n    border: 15px solid black;\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-slider.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cus",
                        "type": "ColorUtilService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 82,
                "jsdoctags": [
                    {
                        "name": "cus",
                        "type": "ColorUtilService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"comp-container\">\r\n  <label [for]=\"id\" class=\"sr-only\">Chroma and hue bound Lightness</label>\r\n  <input\r\n    *ngIf=\"slideMin != slideMax\"\r\n    type=\"range\"\r\n    [name]=\"name\"\r\n    [id]=\"id\"\r\n    [min]=\"slideMin\"\r\n    [max]=\"slideMax\"\r\n    [step]=\"slideInterval\"\r\n    [value]=\"value\"\r\n    (input)=\"handleSliding($event)\"\r\n  />\r\n  <div *ngIf=\"slideMin === slideMax\" class=\"special-case\">\r\n    <div>!</div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"dev-overlay\" [ngClass]=\"{ active: debug }\">\r\n  <h2>dev overlay</h2>\r\n\r\n  <div\r\n    class=\"light-variant-chip\"\r\n    [style.borderColor]=\"devColorVariant\"\r\n    [style.backgroundColor]=\"color\"\r\n  ></div>\r\n</div>\r\n"
        },
        {
            "name": "CopyToClipboardButtonComponent",
            "id": "component-CopyToClipboardButtonComponent-a2e3191ca06e07b7d1ff96fae167977d6a2c412b07220d7664a3b0c30e3085ecbfcbeeba96b6cbd8ede0d2b64525089ad251492fcd6ba806bec653164564c651",
            "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-copy-to-clipboard-button",
            "styleUrls": [
                "./copy-to-clipboard-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./copy-to-clipboard-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "copyToClipboard",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-copy-to-clipboard-button',\r\n  templateUrl: './copy-to-clipboard-button.component.html',\r\n  styleUrls: ['./copy-to-clipboard-button.component.scss'],\r\n})\r\nexport class CopyToClipboardButtonComponent {\r\n  @Input() color: string | null = null;\r\n\r\n  async copyToClipboard(): Promise<void> {\r\n    if (this.color) {\r\n      try {\r\n        await navigator.clipboard.writeText(this.color);\r\n\r\n        console.log(this.color, 'copied to clipboard');\r\n      } catch (err) {\r\n        console.error('Failed to copy text: ', err);\r\n      }\r\n    } else {\r\n      console.error('nothing to copy');\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  position: relative;\r\n  display: inline-block;\r\n\r\n  button {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border: transparent 2px solid;\r\n    background-color: white;\r\n    padding: 0.25rem;\r\n    min-width: var(--minHitDimensionAAA);\r\n    min-height: var(--minHitDimensionAAA);\r\n\r\n    .svg-container {\r\n      width: 22px;\r\n      height: auto;\r\n      svg {\r\n        fill: #000000;\r\n        display: block;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./copy-to-clipboard-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"comp-container\">\r\n  <button [disabled]=\"!color\" [id]=\"'ctc-0'\" (click)=\"copyToClipboard()\">\r\n    <span class=\"sr-only\"> Copy current variant to Clipboard </span>\r\n    <div class=\"svg-container\">\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 24 24\"\r\n        x=\"0px\"\r\n        y=\"0px\"\r\n      >\r\n        <path\r\n          fill-rule=\"evenodd\"\r\n          d=\"M384,608 L384,624 L368,624 L368,608 L384,608 Z M370,622 L382,622 L382,610 L370,610 L370,622 Z M362,602 L362,614 L366,614 L366,616 L360,616 L360,600 L376,600 L376,606 L374,606 L374,602 L362,602 Z\"\r\n          transform=\"translate(-360 -600)\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-2be65d757903e1068f51ac561d212aac4eff48aa0ca9141c5d1f0e51915091c22b983193c432fa9d236673f3cb7bbabb05b7f4c417044a2de0260d85dc1263a8",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport type { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"storybook-header\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <div *ngIf=\"user\">\r\n          <span class=\"welcome\">\r\n            Welcome, <b>{{ user.name }}</b\r\n            >!\r\n          </span>\r\n          <storybook-button\r\n            *ngIf=\"user\"\r\n            size=\"small\"\r\n            (onClick)=\"onLogout.emit($event)\"\r\n            label=\"Log out\"\r\n          ></storybook-button>\r\n        </div>\r\n        <div *ngIf=\"!user\">\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onLogin.emit($event)\"\r\n            label=\"Log in\"\r\n          ></storybook-button>\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            primary\r\n            size=\"small\"\r\n            primary=\"true\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onCreateAccount.emit($event)\"\r\n            label=\"Sign up\"\r\n          ></storybook-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.storybook-header svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header h1 {\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header button + button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.storybook-header .welcome {\r\n  color: #333;\r\n  font-size: 14px;\r\n  margin-right: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-65ac8f4d96f3d447fcc29e2616666b0b362372cb976d10a41ae9bd2db64613ce5e69356d9548c49510c5b2df2826dfe04eed6119a7513d6148781725511fb52c",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport type { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"doLogout()\"\r\n      (onLogin)=\"doLogin()\"\r\n      (onCreateAccount)=\"doCreateAccount()\"\r\n    ></storybook-header>\r\n    <section class=\"storybook-page\">\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\n.storybook-page h2 {\r\n  font-weight: 700;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-page p {\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page a {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\n.storybook-page ul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.storybook-page .tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-page .tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-a8d84e59d4407c41466c3acf4aa79e8ee790418b4c11505362525821c7d91274b97fac10bc2d81e0dc7f61d27c5f75055edc83116165a0258d4c06a4dd28d7d9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { ColorSliderComponent } from './color-slider/color-slider.component';\r\nimport { ColorPickerComponent } from './color-picker/color-picker.component';\r\nimport { ColorContrastComponent } from './color-contrast/color-contrast.component';\r\nimport { CopyToClipboardButtonComponent } from './copy-to-clipboard-button/copy-to-clipboard-button.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ColorSliderComponent,\r\n    ColorPickerComponent,\r\n    ColorContrastComponent,\r\n    CopyToClipboardButtonComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ColorContrastComponent"
                        },
                        {
                            "name": "ColorPickerComponent"
                        },
                        {
                            "name": "ColorSliderComponent"
                        },
                        {
                            "name": "CopyToClipboardButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-78922b3ae99d2c5249b333980bd5afde1b120b2cc6fedfd41b8b2cc90f279797cb4b22e183bf7e1d1dfab8c6100e77e7812c110234d81f866f544f28a3e18b15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "APCA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-contrast/color-contrast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    colorOne: 'white',\r\n    colorTwo: 'black',\r\n    contrastType: 'apca',\r\n  },\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    user: {\r\n      name: 'Jane Doe',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args: Page) => ({\r\n    props: args,\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const loginButton = await canvas.getByRole('button', {\r\n      name: /Log in/i,\r\n    });\r\n    await userEvent.click(loginButton);\r\n  },\r\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  render: (args: Page) => ({\r\n    props: args,\r\n  }),\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: Button,\r\n  tags: ['autodocs'],\r\n  render: (args: Button) => ({\r\n    props: {\r\n      backgroundColor: null,\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\r\n  title: 'Example/Header',\r\n  component: Header,\r\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\r\n  tags: ['autodocs'],\r\n  render: (args) => ({ props: args }),\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [Button],\r\n      imports: [CommonModule],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\r\n  title: 'Example/Page',\r\n  component: Page,\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [Button, Header],\r\n      imports: [CommonModule],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-contrast/color-contrast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ColorContrastComponent>",
                "defaultValue": "{\r\n  title: 'App/Color Contrast',\r\n  component: ColorContrastComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: ColorContrastComponent) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    colorOne: {\r\n      control: 'color',\r\n    },\r\n    colorTwo: {\r\n      control: 'color',\r\n    },\r\n    contrastType: {\r\n      options: ['apca', 'bpca'],\r\n      control: { type: 'radio' },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-slider/color-slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ColorSliderComponent>",
                "defaultValue": "{\r\n  title: 'App/Color Slider',\r\n  component: ColorSliderComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: ColorSliderComponent) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    color: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-picker/color-picker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ColorPickerComponent>",
                "defaultValue": "{\r\n  title: 'App/Color Picker',\r\n  component: ColorPickerComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: ColorPickerComponent) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    comparedColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CopyToClipboardButtonComponent>",
                "defaultValue": "{\r\n  title: 'App/Copy to Clipboard Button',\r\n  component: CopyToClipboardButtonComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: CopyToClipboardButtonComponent) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    color: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "NoHueColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-slider/color-slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    color: 'gray',\r\n  },\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/,\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "RgbBlue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-slider/color-slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    color: 'blue',\r\n  },\r\n}"
            },
            {
                "name": "RgbGreen",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-slider/color-slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    color: 'green',\r\n  },\r\n}"
            },
            {
                "name": "RgbRed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-slider/color-slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    color: 'red',\r\n  },\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "SomethingToCopy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    color: 'red',\r\n  },\r\n}"
            },
            {
                "name": "Typical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-contrast/color-contrast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    colorOne: null,\r\n    colorTwo: null,\r\n    contrastType: null,\r\n  },\r\n}"
            },
            {
                "name": "Typical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-slider/color-slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    color: 'coral',\r\n  },\r\n}"
            },
            {
                "name": "Typical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-picker/color-picker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    comparedColor: '',\r\n  },\r\n}"
            },
            {
                "name": "Typical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    color: null,\r\n  },\r\n}"
            },
            {
                "name": "WCAGEnhanced",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-contrast/color-contrast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    colorOne: 'white',\r\n    colorTwo: 'black',\r\n    contrastType: 'bpca',\r\n  },\r\n}"
            },
            {
                "name": "WCAGEnhancedEdgeCase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-contrast/color-contrast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    colorOne: '#928f8f',\r\n    colorTwo: 'white',\r\n    contrastType: 'bpca',\r\n  },\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ColorVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "[number, number, number]",
                "file": "src/app/services/color-util.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "ContrastType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"apca\" | \"bpca\"",
                "file": "src/app/services/color-metrics.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ColorContrastComponent>",
                "file": "src/app/color-contrast/color-contrast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ColorSliderComponent>",
                "file": "src/app/color-slider/color-slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ColorPickerComponent>",
                "file": "src/app/color-picker/color-picker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CopyToClipboardButtonComponent>",
                "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/color-contrast/color-contrast.stories.ts": [
                {
                    "name": "APCA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-contrast/color-contrast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    colorOne: 'white',\r\n    colorTwo: 'black',\r\n    contrastType: 'apca',\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-contrast/color-contrast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ColorContrastComponent>",
                    "defaultValue": "{\r\n  title: 'App/Color Contrast',\r\n  component: ColorContrastComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: ColorContrastComponent) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    colorOne: {\r\n      control: 'color',\r\n    },\r\n    colorTwo: {\r\n      control: 'color',\r\n    },\r\n    contrastType: {\r\n      options: ['apca', 'bpca'],\r\n      control: { type: 'radio' },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Typical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-contrast/color-contrast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    colorOne: null,\r\n    colorTwo: null,\r\n    contrastType: null,\r\n  },\r\n}"
                },
                {
                    "name": "WCAGEnhanced",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-contrast/color-contrast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    colorOne: 'white',\r\n    colorTwo: 'black',\r\n    contrastType: 'bpca',\r\n  },\r\n}"
                },
                {
                    "name": "WCAGEnhancedEdgeCase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-contrast/color-contrast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    colorOne: '#928f8f',\r\n    colorTwo: 'white',\r\n    contrastType: 'bpca',\r\n  },\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: Button,\r\n  tags: ['autodocs'],\r\n  render: (args: Button) => ({\r\n    props: {\r\n      backgroundColor: null,\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    user: {\r\n      name: 'Jane Doe',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\r\n  title: 'Example/Header',\r\n  component: Header,\r\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\r\n  tags: ['autodocs'],\r\n  render: (args) => ({ props: args }),\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [Button],\r\n      imports: [CommonModule],\r\n    }),\r\n  ],\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args: Page) => ({\r\n    props: args,\r\n  }),\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const loginButton = await canvas.getByRole('button', {\r\n      name: /Log in/i,\r\n    });\r\n    await userEvent.click(loginButton);\r\n  },\r\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  render: (args: Page) => ({\r\n    props: args,\r\n  }),\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\r\n  title: 'Example/Page',\r\n  component: Page,\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [Button, Header],\r\n      imports: [CommonModule],\r\n    }),\r\n  ],\r\n}"
                }
            ],
            "src/app/color-slider/color-slider.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-slider/color-slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ColorSliderComponent>",
                    "defaultValue": "{\r\n  title: 'App/Color Slider',\r\n  component: ColorSliderComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: ColorSliderComponent) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    color: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "NoHueColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-slider/color-slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    color: 'gray',\r\n  },\r\n}"
                },
                {
                    "name": "RgbBlue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-slider/color-slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    color: 'blue',\r\n  },\r\n}"
                },
                {
                    "name": "RgbGreen",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-slider/color-slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    color: 'green',\r\n  },\r\n}"
                },
                {
                    "name": "RgbRed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-slider/color-slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    color: 'red',\r\n  },\r\n}"
                },
                {
                    "name": "Typical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-slider/color-slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    color: 'coral',\r\n  },\r\n}"
                }
            ],
            "src/app/color-picker/color-picker.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-picker/color-picker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ColorPickerComponent>",
                    "defaultValue": "{\r\n  title: 'App/Color Picker',\r\n  component: ColorPickerComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: ColorPickerComponent) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    comparedColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Typical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-picker/color-picker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    comparedColor: '',\r\n  },\r\n}"
                }
            ],
            "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CopyToClipboardButtonComponent>",
                    "defaultValue": "{\r\n  title: 'App/Copy to Clipboard Button',\r\n  component: CopyToClipboardButtonComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: CopyToClipboardButtonComponent) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    color: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "SomethingToCopy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    color: 'red',\r\n  },\r\n}"
                },
                {
                    "name": "Typical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    color: null,\r\n  },\r\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/,\r\n      },\r\n    },\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/services/color-util.service.ts": [
                {
                    "name": "ColorVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "[number, number, number]",
                    "file": "src/app/services/color-util.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/services/color-metrics.service.ts": [
                {
                    "name": "ContrastType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"apca\" | \"bpca\"",
                    "file": "src/app/services/color-metrics.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/color-contrast/color-contrast.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ColorContrastComponent>",
                    "file": "src/app/color-contrast/color-contrast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/color-slider/color-slider.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ColorSliderComponent>",
                    "file": "src/app/color-slider/color-slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/color-picker/color-picker.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ColorPickerComponent>",
                    "file": "src/app/color-picker/color-picker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CopyToClipboardButtonComponent>",
                    "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/color-contrast/color-contrast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorContrastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/color-contrast/color-contrast.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ContrastObject",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/color-contrast/color-contrast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APCA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-contrast/color-contrast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-contrast/color-contrast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Typical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-contrast/color-contrast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WCAGEnhanced",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-contrast/color-contrast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WCAGEnhancedEdgeCase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-picker/color-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/color-picker/color-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-picker/color-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Typical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-slider/color-slider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorSliderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/color-slider/color-slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-slider/color-slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoHueColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-slider/color-slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RgbBlue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-slider/color-slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RgbGreen",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-slider/color-slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RgbRed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-slider/color-slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Typical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CopyToClipboardButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SomethingToCopy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Typical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-metrics.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorMetricsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-metrics.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NumberKeyLookup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-util.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorUtilService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-util.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MinMaxLightObject",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}
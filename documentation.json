{
    "pipes": [],
    "interfaces": [
        {
            "name": "AlertMessagObj",
            "id": "interface-AlertMessagObj-cdb329222a8080adf986a50be0647ac772ed7ef12c7f269903868495190f685d352c2aa4a8ae07fc959fbbe714fda10d15184140203fc0b9bf6f101b9b7fb31c",
            "file": "src/app/alert/alert.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { random, sample, times } from 'lodash';\r\n\r\nexport interface AlertMessagObj {\r\n  message: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-alert',\r\n  templateUrl: './alert.component.html',\r\n  styleUrls: ['./alert.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class AlertComponent implements OnInit, OnChanges {\r\n  @Input() alertMessage: AlertMessagObj | null = null;\r\n  @Output() alertClosed = new EventEmitter<boolean>();\r\n\r\n  showAlert: boolean = false;\r\n\r\n  uniqId: string = '';\r\n\r\n  timeout: number = NaN;\r\n\r\n  generateRandomString(length: number) {\r\n    return times(length, () => random(35).toString(36)).join('');\r\n  }\r\n\r\n  hideAlert() {\r\n    this.showAlert = false;\r\n\r\n    this.uniqId = '';\r\n\r\n    this.alertClosed.emit(true);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.uniqId = this.generateRandomString(12);\r\n\r\n    this.showAlert = true;\r\n\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n\r\n    this.timeout = setTimeout(() => {\r\n      this.showAlert = false;\r\n    }, 5000) as unknown as number;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.showAlert = false;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ColorMetaObj",
            "id": "interface-ColorMetaObj-235b64646799eccbc94f9d47895fb9af079fe6a4edbf5b31862e0a5154ed1a57d97867c559875771d3e2113fd452091467feb06abbdc4f9bbdcece0f30d42fcf",
            "file": "src/app/services/color-util.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport Color from 'colorjs.io';\r\nimport { to } from 'colorjs.io/fn';\r\nimport { ColorConstructor } from 'colorjs.io/types/src/color';\r\nimport { scaleLinear, sort } from 'd3';\r\nimport { random, reverse, uniqBy, uniq } from 'lodash';\r\nimport {\r\n  TableColorCell,\r\n  TableData,\r\n} from '../palette-table/palette-table.component';\r\n\r\nexport type ColorPair = [string, string];\r\n\r\nexport type ColorCoordArray = [number, number, number];\r\n\r\nexport class ChromaMatchObject {\r\n  success: boolean = false;\r\n  colors: ColorPair | null = null;\r\n  chroma: number | null = null;\r\n}\r\n\r\nexport interface MinMaxLightObject {\r\n  originalCoords: ColorCoordArray;\r\n  lightMin: number;\r\n  lightMax: number;\r\n}\r\n\r\n// export type ColorVariant = [number, number, number];\r\n\r\nexport interface ColorMetaObj {\r\n  lightness: number | string;\r\n  chroma: number | string;\r\n  hue: number | string;\r\n  saturation: number | string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorUtilService {\r\n  parseColor(color: string): ColorConstructor | null {\r\n    let parsedColor: ColorConstructor | null = null;\r\n\r\n    try {\r\n      parsedColor = Color.parse(color);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return parsedColor;\r\n  }\r\n\r\n  getRgb255Array(color: string) {\r\n    const colorObj = this.parseColor(color);\r\n\r\n    let array255: [number, number, number] | null = null;\r\n\r\n    if (colorObj) {\r\n      const colorCoordsDecimal = colorObj.coords;\r\n\r\n      array255 = [\r\n        Math.round(colorCoordsDecimal[0] * 255),\r\n        Math.round(colorCoordsDecimal[1] * 255),\r\n        Math.round(colorCoordsDecimal[2] * 255),\r\n      ];\r\n    } else {\r\n      console.error(`unable to parse: ${color}`);\r\n    }\r\n\r\n    return array255;\r\n  }\r\n\r\n  createSrgbColor(color: string, lightness: number): string | null {\r\n    let srgbColor: string | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const originalChroma = oklchColor.coords[1];\r\n      const originalHue = oklchColor.coords[2];\r\n\r\n      const targetColor = new Color('oklch', [\r\n        lightness,\r\n        originalChroma,\r\n        originalHue,\r\n      ]);\r\n\r\n      // const inSrgbGamut = targetColor.inGamut('srgb');\r\n\r\n      // if (!inSrgbGamut) {\r\n      //   console.warn(\r\n      //     `OKLCH color in SRGB gamut: ${targetColor.inGamut('srgb')}`\r\n      //   );\r\n      // }\r\n\r\n      const tColorInSrgbGamut = targetColor.toGamut({\r\n        space: 'srgb',\r\n        method: 'oklch.c',\r\n      });\r\n\r\n      const targetColorAsRgbColor = tColorInSrgbGamut.to('srgb');\r\n\r\n      srgbColor = targetColorAsRgbColor.toString({ format: 'hex' });\r\n    }\r\n\r\n    return srgbColor;\r\n  }\r\n\r\n  isInSrgbGamut(oklchColorCoord: ColorCoordArray): Promise<boolean> {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      try {\r\n        const colorObject = new Color('oklch', oklchColorCoord);\r\n        const variantInGamut = colorObject.inGamut('srgb');\r\n\r\n        resolve(variantInGamut);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  createVariants(color: string): Array<ColorCoordArray> | null {\r\n    let variantCollection: Array<ColorCoordArray> | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const lchCooords = oklchColor.coords;\r\n      const colorChroma = lchCooords[1];\r\n      const colorHue = lchCooords[2];\r\n\r\n      // 1) create enough steps of lightness\r\n      const lightnessSteps = 1000;\r\n      const lightMax = 1;\r\n      const lightMin = 0;\r\n      const lightInterval = (lightMax - lightMin) / lightnessSteps;\r\n\r\n      // 2) create all variants of color using constant chroma and hue.\r\n      variantCollection = [];\r\n\r\n      // 2a) this actually creates `lightnessSteps + 1` variants as initial variant has to start at zero.\r\n      for (let i = 0; i <= lightnessSteps; i++) {\r\n        const variantTargetLight = i * lightInterval;\r\n        const variant: ColorCoordArray = [\r\n          variantTargetLight,\r\n          colorChroma,\r\n          colorHue,\r\n        ];\r\n\r\n        variantCollection.push(variant);\r\n      }\r\n    } else {\r\n      console.error(`unable to parse color`);\r\n    }\r\n\r\n    return variantCollection;\r\n  }\r\n\r\n  filterOutOfGamutVariants(\r\n    variants: Array<ColorCoordArray> | null\r\n  ): Promise<Array<ColorCoordArray>> {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!variants) {\r\n        reject(`no variants`);\r\n      } else {\r\n        let filteringComplete: boolean = false;\r\n\r\n        const filtered = [];\r\n\r\n        for (let i = 0; i < variants.length; i++) {\r\n          const curVariant = variants[i];\r\n\r\n          if (await this.isInSrgbGamut(curVariant)) {\r\n            filtered.push(curVariant);\r\n          }\r\n\r\n          if (i === variants.length - 1) filteringComplete = true;\r\n        }\r\n\r\n        if (filteringComplete) {\r\n          resolve(filtered);\r\n        } else {\r\n          reject(`error`);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async getMinMaxLight(color: string): Promise<MinMaxLightObject | null> {\r\n    let returnedObject: MinMaxLightObject | null = null;\r\n\r\n    const initVariantCollection = this.createVariants(color);\r\n\r\n    const variantCollection = await this.filterOutOfGamutVariants(\r\n      initVariantCollection\r\n    );\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor && variantCollection.length) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      const lchCooords = oklchColor.coords;\r\n\r\n      const oklchLightCoordIndex = 0;\r\n      const firstArrayItemIndex = 0;\r\n      const lastArrayItemIndex = variantCollection.length - 1;\r\n\r\n      const minLight =\r\n        variantCollection[firstArrayItemIndex][oklchLightCoordIndex];\r\n      const maxLight =\r\n        variantCollection[lastArrayItemIndex][oklchLightCoordIndex];\r\n\r\n      returnedObject = {\r\n        originalCoords: lchCooords,\r\n        lightMin: minLight,\r\n        lightMax: maxLight,\r\n      };\r\n    } else {\r\n      if (!parsedColor) {\r\n        console.error(`unable to parse color`);\r\n      } else {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n        const lchCooords = oklchColor.coords;\r\n        returnedObject = {\r\n          originalCoords: lchCooords,\r\n          lightMin: lchCooords[0],\r\n          lightMax: lchCooords[0],\r\n        };\r\n      }\r\n    }\r\n\r\n    return returnedObject;\r\n  }\r\n\r\n  async getRandomColorPair(): Promise<ColorPair> {\r\n    let pair: ColorPair = ['black', 'white'];\r\n\r\n    // ref: oklch.com\r\n    // const targetChroma = 0.11;\r\n    const targetChroma = random(0.11, 0.34, true);\r\n\r\n    const colorOneLight = random(0.25, 0.26, true);\r\n    const colorOneHue = random(0, 360, true);\r\n    const colorTwoLight = random(0.94, 0.95, true);\r\n    const colorTwoHue = random(0, 360, true);\r\n\r\n    const colorOne = new Color('oklch', [\r\n      colorOneLight,\r\n      targetChroma,\r\n      colorOneHue,\r\n    ])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const colorTwo = new Color('oklch', [\r\n      colorTwoLight,\r\n      targetChroma,\r\n      colorTwoHue,\r\n    ])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const initPair: ColorPair = [colorOne, colorTwo];\r\n\r\n    const chromaMatchedPair = await this.matchChromas(initPair);\r\n\r\n    pair = chromaMatchedPair.colors ? chromaMatchedPair.colors : pair;\r\n\r\n    return pair;\r\n  }\r\n\r\n  // This function only adjust the first color of the pair.\r\n  async adjustColorPairForPresentation(pair: ColorPair): Promise<ColorPair> {\r\n    let returnedPair: ColorPair = ['black', 'white'];\r\n\r\n    const colorOne = pair[0];\r\n    const colortwo = pair[1];\r\n\r\n    const parsedColorOne = this.parseColor(colorOne);\r\n\r\n    const colorOneMinMaxLightObj = await this.getMinMaxLight(colorOne);\r\n\r\n    if (parsedColorOne && colorOneMinMaxLightObj) {\r\n      const colorOneTargetLightness =\r\n        colorOneMinMaxLightObj.lightMin +\r\n        (colorOneMinMaxLightObj.lightMax - colorOneMinMaxLightObj.lightMin) / 2;\r\n\r\n      const oklchColorOne = new Color('srgb', parsedColorOne.coords).to(\r\n        'oklch'\r\n      );\r\n\r\n      const adjColorOne = new Color('oklch', [\r\n        colorOneTargetLightness,\r\n        oklchColorOne.coords[1],\r\n        oklchColorOne.coords[2],\r\n      ])\r\n        .to('srgb')\r\n        .toString({ format: 'hex' });\r\n\r\n      returnedPair = [adjColorOne, colortwo];\r\n    } else {\r\n      console.warn('trouble adjusting colors');\r\n    }\r\n\r\n    return returnedPair;\r\n  }\r\n\r\n  async matchChromas(colorpair: ColorPair): Promise<ChromaMatchObject> {\r\n    let pair: ChromaMatchObject = {\r\n      success: false,\r\n      colors: null,\r\n      chroma: null,\r\n    };\r\n\r\n    const colorOneParsed = this.parseColor(colorpair[0]);\r\n    const colorTwoParsed = this.parseColor(colorpair[1]);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneOklch = new Color('srgb', colorOneParsed.coords).to(\r\n        'oklch'\r\n      );\r\n      const colorOneChroma = colorOneOklch.coords[1];\r\n\r\n      const colorTwoOklch = new Color('srgb', colorTwoParsed.coords).to(\r\n        'oklch'\r\n      );\r\n      const colorTwoChroma = colorTwoOklch.coords[1];\r\n\r\n      const colorOneCandCoords: ColorCoordArray = [\r\n        colorOneOklch.coords[0],\r\n        colorTwoChroma,\r\n        colorOneOklch.coords[2],\r\n      ];\r\n      const colorTwoCandCoords: ColorCoordArray = [\r\n        colorTwoOklch.coords[0],\r\n        colorOneChroma,\r\n        colorTwoOklch.coords[2],\r\n      ];\r\n\r\n      const colorOneCandInGamut = await this.isInSrgbGamut(colorOneCandCoords);\r\n      const colorTwoCandInGamut = await this.isInSrgbGamut(colorTwoCandCoords);\r\n\r\n      if (colorOneCandInGamut && !colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          new Color('oklch', colorOneCandCoords)\r\n            .to('srgb')\r\n            .toString({ format: 'hex' }),\r\n          colorpair[1],\r\n        ];\r\n\r\n        pair.chroma = colorOneCandCoords[1];\r\n      }\r\n\r\n      if (!colorOneCandInGamut && colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          colorpair[0],\r\n          new Color('oklch', colorTwoCandCoords)\r\n            .to('srgb')\r\n            .toString({ format: 'hex' }),\r\n        ];\r\n\r\n        pair.chroma = colorTwoCandCoords[1];\r\n      }\r\n\r\n      if (colorOneCandInGamut && colorTwoCandInGamut) {\r\n        if (colorOneCandCoords[1] > colorTwoCandCoords[1]) {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            new Color('oklch', colorOneCandCoords)\r\n              .to('srgb')\r\n              .toString({ format: 'hex' }),\r\n            colorpair[1],\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        } else {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            colorpair[0],\r\n            new Color('oklch', colorTwoCandCoords)\r\n              .to('srgb')\r\n              .toString({ format: 'hex' }),\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"color parsing didn't work out. \");\r\n    }\r\n\r\n    return pair;\r\n  }\r\n\r\n  calcDeltaE(colorOne: string, colorTwo: string): number | null {\r\n    let delta: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawDelta = colorOneObj.deltaE2000(colorTwoObj);\r\n\r\n      // const fixedDelta = rawDelta.toFixed(2);\r\n\r\n      // delta = parseFloat(fixedDelta);\r\n      delta = Math.round(rawDelta);\r\n    }\r\n\r\n    return delta;\r\n  }\r\n\r\n  calcWcag2(colorOne: string, colorTwo: string): number | null {\r\n    let wcag21: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawWcag21 = colorOneObj.contrast(colorTwoObj, 'WCAG21');\r\n\r\n      const fixedDelta = rawWcag21.toFixed(1);\r\n\r\n      wcag21 = parseFloat(fixedDelta);\r\n    }\r\n\r\n    return wcag21;\r\n  }\r\n\r\n  getColorMeta(color: string): ColorMetaObj | null {\r\n    let meta: ColorMetaObj | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const lchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      meta = {\r\n        lightness: lchColor.coords[0].toFixed(2),\r\n        chroma: lchColor.coords[1].toFixed(2),\r\n        hue: lchColor.coords[2].toFixed(2),\r\n        saturation: ((lchColor.coords[1] / lchColor.coords[0]) * 100).toFixed(\r\n          2\r\n        ),\r\n      };\r\n    }\r\n\r\n    return meta;\r\n  }\r\n\r\n  getMinObjectDimension(apca: number): number {\r\n    let dimension: number = NaN;\r\n\r\n    const absApca = Math.abs(apca);\r\n\r\n    const pixels = [1, 1.5, 2, 3, 4, 6, 8, 10, 15];\r\n    const apcaScores = [90, 75, 60, 50, 45, 30, 25, 20, 15];\r\n    const minLookup = scaleLinear(pixels).domain(apcaScores);\r\n\r\n    const initSize = minLookup(absApca).toFixed(2);\r\n\r\n    dimension = parseFloat(initSize);\r\n\r\n    if (dimension > 15) {\r\n      dimension = 15;\r\n    }\r\n\r\n    if (absApca >= 100) {\r\n      dimension = 0.25;\r\n    }\r\n\r\n    if (absApca < 15) {\r\n      dimension = NaN;\r\n    }\r\n\r\n    return dimension;\r\n  }\r\n\r\n  generateAllOklchVariants(\r\n    color: string,\r\n    lightSteps: number,\r\n    chromaSteps: number\r\n  ): Promise<TableData> {\r\n    return new Promise((resolve, reject) => {\r\n      const parsedColor = this.parseColor(color);\r\n\r\n      const variantsCollection = [];\r\n\r\n      let sortedVariantsCollection = [];\r\n\r\n      if (parsedColor) {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n        const lchCooords = oklchColor.coords;\r\n        const colorLight = lchCooords[0];\r\n        const colorChroma = lchCooords[1];\r\n        const colorHue = lchCooords[2];\r\n\r\n        const lightMax = 1;\r\n        const lightMin = 0;\r\n        const lightInterval = (lightMax - lightMin) / lightSteps;\r\n\r\n        // calculate light levels\r\n        const rawLightLevels = [];\r\n\r\n        let lLevel = colorLight;\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel + lightInterval;\r\n        } while (lLevel <= lightMax);\r\n\r\n        lLevel = colorLight;\r\n\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel - lightInterval;\r\n        } while (lLevel >= lightMin);\r\n\r\n        const sortedLightLevels = sort(uniq(rawLightLevels));\r\n\r\n        const chromaMax = 0.33;\r\n        const chromaMin = 0;\r\n        const chromaInterval = (chromaMax - chromaMin) / chromaSteps;\r\n\r\n        // calculate chroma levels\r\n        const rawChromaLevels = [];\r\n\r\n        let cLevel = colorChroma;\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel + chromaInterval;\r\n        } while (cLevel <= chromaMax);\r\n\r\n        cLevel = colorChroma;\r\n\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel - chromaInterval;\r\n        } while (cLevel >= chromaMin);\r\n\r\n        const sortedChromaLevels = sort(uniq(rawChromaLevels));\r\n\r\n        // generate all rows\r\n        for (let i = 0; i < sortedLightLevels.length; i++) {\r\n          const variantRow: Array<TableColorCell> = [];\r\n\r\n          for (let j = 0; j < sortedChromaLevels.length; j++) {\r\n            const targetLightness = sortedLightLevels[i];\r\n\r\n            const targetChroma = sortedChromaLevels[j];\r\n\r\n            const variantColor = new Color('oklch', [\r\n              targetLightness,\r\n              targetChroma,\r\n              colorHue,\r\n            ]);\r\n\r\n            const variantColorinGamut = variantColor.inGamut('srgb');\r\n\r\n            const colorVal = variantColorinGamut\r\n              ? variantColor.to('srgb').toString({ format: 'hex' })\r\n              : null;\r\n\r\n            const deltaE = colorVal ? this.calcDeltaE(colorVal, color) : null;\r\n\r\n            const dLight = colorVal\r\n              ? Math.round(((targetLightness - colorLight) / colorLight) * 100)\r\n              : null;\r\n\r\n            const dChroma = colorVal\r\n              ? Math.round(((targetChroma - colorChroma) / colorChroma) * 100)\r\n              : null;\r\n\r\n            const variantObj: TableColorCell = {\r\n              color: colorVal,\r\n              lightness: targetLightness,\r\n              chroma: targetChroma,\r\n              hue: colorHue,\r\n              deltaE: deltaE,\r\n              deltaChroma: dChroma,\r\n              deltaLightness: dLight,\r\n              // wacg2Comp: NaN,\r\n              // pContrast: NaN,\r\n            };\r\n\r\n            variantRow.push(variantObj);\r\n          }\r\n\r\n          variantsCollection.push(variantRow);\r\n        }\r\n      } else {\r\n        console.error(`could not parse color`);\r\n\r\n        reject(`could not parse color`);\r\n      }\r\n\r\n      // order color rows from light to dark\r\n      sortedVariantsCollection = reverse(variantsCollection);\r\n\r\n      resolve(sortedVariantsCollection);\r\n    });\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n",
            "properties": [
                {
                    "name": "chroma",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "hue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "lightness",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "saturation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MinMaxLightObject",
            "id": "interface-MinMaxLightObject-235b64646799eccbc94f9d47895fb9af079fe6a4edbf5b31862e0a5154ed1a57d97867c559875771d3e2113fd452091467feb06abbdc4f9bbdcece0f30d42fcf",
            "file": "src/app/services/color-util.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport Color from 'colorjs.io';\r\nimport { to } from 'colorjs.io/fn';\r\nimport { ColorConstructor } from 'colorjs.io/types/src/color';\r\nimport { scaleLinear, sort } from 'd3';\r\nimport { random, reverse, uniqBy, uniq } from 'lodash';\r\nimport {\r\n  TableColorCell,\r\n  TableData,\r\n} from '../palette-table/palette-table.component';\r\n\r\nexport type ColorPair = [string, string];\r\n\r\nexport type ColorCoordArray = [number, number, number];\r\n\r\nexport class ChromaMatchObject {\r\n  success: boolean = false;\r\n  colors: ColorPair | null = null;\r\n  chroma: number | null = null;\r\n}\r\n\r\nexport interface MinMaxLightObject {\r\n  originalCoords: ColorCoordArray;\r\n  lightMin: number;\r\n  lightMax: number;\r\n}\r\n\r\n// export type ColorVariant = [number, number, number];\r\n\r\nexport interface ColorMetaObj {\r\n  lightness: number | string;\r\n  chroma: number | string;\r\n  hue: number | string;\r\n  saturation: number | string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorUtilService {\r\n  parseColor(color: string): ColorConstructor | null {\r\n    let parsedColor: ColorConstructor | null = null;\r\n\r\n    try {\r\n      parsedColor = Color.parse(color);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return parsedColor;\r\n  }\r\n\r\n  getRgb255Array(color: string) {\r\n    const colorObj = this.parseColor(color);\r\n\r\n    let array255: [number, number, number] | null = null;\r\n\r\n    if (colorObj) {\r\n      const colorCoordsDecimal = colorObj.coords;\r\n\r\n      array255 = [\r\n        Math.round(colorCoordsDecimal[0] * 255),\r\n        Math.round(colorCoordsDecimal[1] * 255),\r\n        Math.round(colorCoordsDecimal[2] * 255),\r\n      ];\r\n    } else {\r\n      console.error(`unable to parse: ${color}`);\r\n    }\r\n\r\n    return array255;\r\n  }\r\n\r\n  createSrgbColor(color: string, lightness: number): string | null {\r\n    let srgbColor: string | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const originalChroma = oklchColor.coords[1];\r\n      const originalHue = oklchColor.coords[2];\r\n\r\n      const targetColor = new Color('oklch', [\r\n        lightness,\r\n        originalChroma,\r\n        originalHue,\r\n      ]);\r\n\r\n      // const inSrgbGamut = targetColor.inGamut('srgb');\r\n\r\n      // if (!inSrgbGamut) {\r\n      //   console.warn(\r\n      //     `OKLCH color in SRGB gamut: ${targetColor.inGamut('srgb')}`\r\n      //   );\r\n      // }\r\n\r\n      const tColorInSrgbGamut = targetColor.toGamut({\r\n        space: 'srgb',\r\n        method: 'oklch.c',\r\n      });\r\n\r\n      const targetColorAsRgbColor = tColorInSrgbGamut.to('srgb');\r\n\r\n      srgbColor = targetColorAsRgbColor.toString({ format: 'hex' });\r\n    }\r\n\r\n    return srgbColor;\r\n  }\r\n\r\n  isInSrgbGamut(oklchColorCoord: ColorCoordArray): Promise<boolean> {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      try {\r\n        const colorObject = new Color('oklch', oklchColorCoord);\r\n        const variantInGamut = colorObject.inGamut('srgb');\r\n\r\n        resolve(variantInGamut);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  createVariants(color: string): Array<ColorCoordArray> | null {\r\n    let variantCollection: Array<ColorCoordArray> | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const lchCooords = oklchColor.coords;\r\n      const colorChroma = lchCooords[1];\r\n      const colorHue = lchCooords[2];\r\n\r\n      // 1) create enough steps of lightness\r\n      const lightnessSteps = 1000;\r\n      const lightMax = 1;\r\n      const lightMin = 0;\r\n      const lightInterval = (lightMax - lightMin) / lightnessSteps;\r\n\r\n      // 2) create all variants of color using constant chroma and hue.\r\n      variantCollection = [];\r\n\r\n      // 2a) this actually creates `lightnessSteps + 1` variants as initial variant has to start at zero.\r\n      for (let i = 0; i <= lightnessSteps; i++) {\r\n        const variantTargetLight = i * lightInterval;\r\n        const variant: ColorCoordArray = [\r\n          variantTargetLight,\r\n          colorChroma,\r\n          colorHue,\r\n        ];\r\n\r\n        variantCollection.push(variant);\r\n      }\r\n    } else {\r\n      console.error(`unable to parse color`);\r\n    }\r\n\r\n    return variantCollection;\r\n  }\r\n\r\n  filterOutOfGamutVariants(\r\n    variants: Array<ColorCoordArray> | null\r\n  ): Promise<Array<ColorCoordArray>> {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!variants) {\r\n        reject(`no variants`);\r\n      } else {\r\n        let filteringComplete: boolean = false;\r\n\r\n        const filtered = [];\r\n\r\n        for (let i = 0; i < variants.length; i++) {\r\n          const curVariant = variants[i];\r\n\r\n          if (await this.isInSrgbGamut(curVariant)) {\r\n            filtered.push(curVariant);\r\n          }\r\n\r\n          if (i === variants.length - 1) filteringComplete = true;\r\n        }\r\n\r\n        if (filteringComplete) {\r\n          resolve(filtered);\r\n        } else {\r\n          reject(`error`);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async getMinMaxLight(color: string): Promise<MinMaxLightObject | null> {\r\n    let returnedObject: MinMaxLightObject | null = null;\r\n\r\n    const initVariantCollection = this.createVariants(color);\r\n\r\n    const variantCollection = await this.filterOutOfGamutVariants(\r\n      initVariantCollection\r\n    );\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor && variantCollection.length) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      const lchCooords = oklchColor.coords;\r\n\r\n      const oklchLightCoordIndex = 0;\r\n      const firstArrayItemIndex = 0;\r\n      const lastArrayItemIndex = variantCollection.length - 1;\r\n\r\n      const minLight =\r\n        variantCollection[firstArrayItemIndex][oklchLightCoordIndex];\r\n      const maxLight =\r\n        variantCollection[lastArrayItemIndex][oklchLightCoordIndex];\r\n\r\n      returnedObject = {\r\n        originalCoords: lchCooords,\r\n        lightMin: minLight,\r\n        lightMax: maxLight,\r\n      };\r\n    } else {\r\n      if (!parsedColor) {\r\n        console.error(`unable to parse color`);\r\n      } else {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n        const lchCooords = oklchColor.coords;\r\n        returnedObject = {\r\n          originalCoords: lchCooords,\r\n          lightMin: lchCooords[0],\r\n          lightMax: lchCooords[0],\r\n        };\r\n      }\r\n    }\r\n\r\n    return returnedObject;\r\n  }\r\n\r\n  async getRandomColorPair(): Promise<ColorPair> {\r\n    let pair: ColorPair = ['black', 'white'];\r\n\r\n    // ref: oklch.com\r\n    // const targetChroma = 0.11;\r\n    const targetChroma = random(0.11, 0.34, true);\r\n\r\n    const colorOneLight = random(0.25, 0.26, true);\r\n    const colorOneHue = random(0, 360, true);\r\n    const colorTwoLight = random(0.94, 0.95, true);\r\n    const colorTwoHue = random(0, 360, true);\r\n\r\n    const colorOne = new Color('oklch', [\r\n      colorOneLight,\r\n      targetChroma,\r\n      colorOneHue,\r\n    ])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const colorTwo = new Color('oklch', [\r\n      colorTwoLight,\r\n      targetChroma,\r\n      colorTwoHue,\r\n    ])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const initPair: ColorPair = [colorOne, colorTwo];\r\n\r\n    const chromaMatchedPair = await this.matchChromas(initPair);\r\n\r\n    pair = chromaMatchedPair.colors ? chromaMatchedPair.colors : pair;\r\n\r\n    return pair;\r\n  }\r\n\r\n  // This function only adjust the first color of the pair.\r\n  async adjustColorPairForPresentation(pair: ColorPair): Promise<ColorPair> {\r\n    let returnedPair: ColorPair = ['black', 'white'];\r\n\r\n    const colorOne = pair[0];\r\n    const colortwo = pair[1];\r\n\r\n    const parsedColorOne = this.parseColor(colorOne);\r\n\r\n    const colorOneMinMaxLightObj = await this.getMinMaxLight(colorOne);\r\n\r\n    if (parsedColorOne && colorOneMinMaxLightObj) {\r\n      const colorOneTargetLightness =\r\n        colorOneMinMaxLightObj.lightMin +\r\n        (colorOneMinMaxLightObj.lightMax - colorOneMinMaxLightObj.lightMin) / 2;\r\n\r\n      const oklchColorOne = new Color('srgb', parsedColorOne.coords).to(\r\n        'oklch'\r\n      );\r\n\r\n      const adjColorOne = new Color('oklch', [\r\n        colorOneTargetLightness,\r\n        oklchColorOne.coords[1],\r\n        oklchColorOne.coords[2],\r\n      ])\r\n        .to('srgb')\r\n        .toString({ format: 'hex' });\r\n\r\n      returnedPair = [adjColorOne, colortwo];\r\n    } else {\r\n      console.warn('trouble adjusting colors');\r\n    }\r\n\r\n    return returnedPair;\r\n  }\r\n\r\n  async matchChromas(colorpair: ColorPair): Promise<ChromaMatchObject> {\r\n    let pair: ChromaMatchObject = {\r\n      success: false,\r\n      colors: null,\r\n      chroma: null,\r\n    };\r\n\r\n    const colorOneParsed = this.parseColor(colorpair[0]);\r\n    const colorTwoParsed = this.parseColor(colorpair[1]);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneOklch = new Color('srgb', colorOneParsed.coords).to(\r\n        'oklch'\r\n      );\r\n      const colorOneChroma = colorOneOklch.coords[1];\r\n\r\n      const colorTwoOklch = new Color('srgb', colorTwoParsed.coords).to(\r\n        'oklch'\r\n      );\r\n      const colorTwoChroma = colorTwoOklch.coords[1];\r\n\r\n      const colorOneCandCoords: ColorCoordArray = [\r\n        colorOneOklch.coords[0],\r\n        colorTwoChroma,\r\n        colorOneOklch.coords[2],\r\n      ];\r\n      const colorTwoCandCoords: ColorCoordArray = [\r\n        colorTwoOklch.coords[0],\r\n        colorOneChroma,\r\n        colorTwoOklch.coords[2],\r\n      ];\r\n\r\n      const colorOneCandInGamut = await this.isInSrgbGamut(colorOneCandCoords);\r\n      const colorTwoCandInGamut = await this.isInSrgbGamut(colorTwoCandCoords);\r\n\r\n      if (colorOneCandInGamut && !colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          new Color('oklch', colorOneCandCoords)\r\n            .to('srgb')\r\n            .toString({ format: 'hex' }),\r\n          colorpair[1],\r\n        ];\r\n\r\n        pair.chroma = colorOneCandCoords[1];\r\n      }\r\n\r\n      if (!colorOneCandInGamut && colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          colorpair[0],\r\n          new Color('oklch', colorTwoCandCoords)\r\n            .to('srgb')\r\n            .toString({ format: 'hex' }),\r\n        ];\r\n\r\n        pair.chroma = colorTwoCandCoords[1];\r\n      }\r\n\r\n      if (colorOneCandInGamut && colorTwoCandInGamut) {\r\n        if (colorOneCandCoords[1] > colorTwoCandCoords[1]) {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            new Color('oklch', colorOneCandCoords)\r\n              .to('srgb')\r\n              .toString({ format: 'hex' }),\r\n            colorpair[1],\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        } else {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            colorpair[0],\r\n            new Color('oklch', colorTwoCandCoords)\r\n              .to('srgb')\r\n              .toString({ format: 'hex' }),\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"color parsing didn't work out. \");\r\n    }\r\n\r\n    return pair;\r\n  }\r\n\r\n  calcDeltaE(colorOne: string, colorTwo: string): number | null {\r\n    let delta: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawDelta = colorOneObj.deltaE2000(colorTwoObj);\r\n\r\n      // const fixedDelta = rawDelta.toFixed(2);\r\n\r\n      // delta = parseFloat(fixedDelta);\r\n      delta = Math.round(rawDelta);\r\n    }\r\n\r\n    return delta;\r\n  }\r\n\r\n  calcWcag2(colorOne: string, colorTwo: string): number | null {\r\n    let wcag21: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawWcag21 = colorOneObj.contrast(colorTwoObj, 'WCAG21');\r\n\r\n      const fixedDelta = rawWcag21.toFixed(1);\r\n\r\n      wcag21 = parseFloat(fixedDelta);\r\n    }\r\n\r\n    return wcag21;\r\n  }\r\n\r\n  getColorMeta(color: string): ColorMetaObj | null {\r\n    let meta: ColorMetaObj | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const lchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      meta = {\r\n        lightness: lchColor.coords[0].toFixed(2),\r\n        chroma: lchColor.coords[1].toFixed(2),\r\n        hue: lchColor.coords[2].toFixed(2),\r\n        saturation: ((lchColor.coords[1] / lchColor.coords[0]) * 100).toFixed(\r\n          2\r\n        ),\r\n      };\r\n    }\r\n\r\n    return meta;\r\n  }\r\n\r\n  getMinObjectDimension(apca: number): number {\r\n    let dimension: number = NaN;\r\n\r\n    const absApca = Math.abs(apca);\r\n\r\n    const pixels = [1, 1.5, 2, 3, 4, 6, 8, 10, 15];\r\n    const apcaScores = [90, 75, 60, 50, 45, 30, 25, 20, 15];\r\n    const minLookup = scaleLinear(pixels).domain(apcaScores);\r\n\r\n    const initSize = minLookup(absApca).toFixed(2);\r\n\r\n    dimension = parseFloat(initSize);\r\n\r\n    if (dimension > 15) {\r\n      dimension = 15;\r\n    }\r\n\r\n    if (absApca >= 100) {\r\n      dimension = 0.25;\r\n    }\r\n\r\n    if (absApca < 15) {\r\n      dimension = NaN;\r\n    }\r\n\r\n    return dimension;\r\n  }\r\n\r\n  generateAllOklchVariants(\r\n    color: string,\r\n    lightSteps: number,\r\n    chromaSteps: number\r\n  ): Promise<TableData> {\r\n    return new Promise((resolve, reject) => {\r\n      const parsedColor = this.parseColor(color);\r\n\r\n      const variantsCollection = [];\r\n\r\n      let sortedVariantsCollection = [];\r\n\r\n      if (parsedColor) {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n        const lchCooords = oklchColor.coords;\r\n        const colorLight = lchCooords[0];\r\n        const colorChroma = lchCooords[1];\r\n        const colorHue = lchCooords[2];\r\n\r\n        const lightMax = 1;\r\n        const lightMin = 0;\r\n        const lightInterval = (lightMax - lightMin) / lightSteps;\r\n\r\n        // calculate light levels\r\n        const rawLightLevels = [];\r\n\r\n        let lLevel = colorLight;\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel + lightInterval;\r\n        } while (lLevel <= lightMax);\r\n\r\n        lLevel = colorLight;\r\n\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel - lightInterval;\r\n        } while (lLevel >= lightMin);\r\n\r\n        const sortedLightLevels = sort(uniq(rawLightLevels));\r\n\r\n        const chromaMax = 0.33;\r\n        const chromaMin = 0;\r\n        const chromaInterval = (chromaMax - chromaMin) / chromaSteps;\r\n\r\n        // calculate chroma levels\r\n        const rawChromaLevels = [];\r\n\r\n        let cLevel = colorChroma;\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel + chromaInterval;\r\n        } while (cLevel <= chromaMax);\r\n\r\n        cLevel = colorChroma;\r\n\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel - chromaInterval;\r\n        } while (cLevel >= chromaMin);\r\n\r\n        const sortedChromaLevels = sort(uniq(rawChromaLevels));\r\n\r\n        // generate all rows\r\n        for (let i = 0; i < sortedLightLevels.length; i++) {\r\n          const variantRow: Array<TableColorCell> = [];\r\n\r\n          for (let j = 0; j < sortedChromaLevels.length; j++) {\r\n            const targetLightness = sortedLightLevels[i];\r\n\r\n            const targetChroma = sortedChromaLevels[j];\r\n\r\n            const variantColor = new Color('oklch', [\r\n              targetLightness,\r\n              targetChroma,\r\n              colorHue,\r\n            ]);\r\n\r\n            const variantColorinGamut = variantColor.inGamut('srgb');\r\n\r\n            const colorVal = variantColorinGamut\r\n              ? variantColor.to('srgb').toString({ format: 'hex' })\r\n              : null;\r\n\r\n            const deltaE = colorVal ? this.calcDeltaE(colorVal, color) : null;\r\n\r\n            const dLight = colorVal\r\n              ? Math.round(((targetLightness - colorLight) / colorLight) * 100)\r\n              : null;\r\n\r\n            const dChroma = colorVal\r\n              ? Math.round(((targetChroma - colorChroma) / colorChroma) * 100)\r\n              : null;\r\n\r\n            const variantObj: TableColorCell = {\r\n              color: colorVal,\r\n              lightness: targetLightness,\r\n              chroma: targetChroma,\r\n              hue: colorHue,\r\n              deltaE: deltaE,\r\n              deltaChroma: dChroma,\r\n              deltaLightness: dLight,\r\n              // wacg2Comp: NaN,\r\n              // pContrast: NaN,\r\n            };\r\n\r\n            variantRow.push(variantObj);\r\n          }\r\n\r\n          variantsCollection.push(variantRow);\r\n        }\r\n      } else {\r\n        console.error(`could not parse color`);\r\n\r\n        reject(`could not parse color`);\r\n      }\r\n\r\n      // order color rows from light to dark\r\n      sortedVariantsCollection = reverse(variantsCollection);\r\n\r\n      resolve(sortedVariantsCollection);\r\n    });\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n",
            "properties": [
                {
                    "name": "lightMax",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "lightMin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "originalCoords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorCoordArray",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NumberKeyLookup",
            "id": "interface-NumberKeyLookup-8766c9abd832330ff17221c3e43e4f777b3c55554086ce9bf7dc7f318c3d832d9fa3b6191da62fb9ccc37f8e2ab2c529eda6683f219957ef7597394d5cfe7a81",
            "file": "src/app/services/color-metrics.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\n\r\nimport { calcAPCA, sRGBtoY } from 'apca-w3';\r\n\r\nimport { scaleLinear } from 'd3';\r\n\r\nimport { ColorUtilService } from './color-util.service';\r\nimport { BpcaService } from './bpca.service';\r\n\r\nexport interface NumberKeyLookup {\r\n  [key: number]: number;\r\n}\r\n\r\nexport type ContrastType = 'apca' | 'bpca';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorMetricsService {\r\n  cus = inject(ColorUtilService);\r\n  bpca = inject(BpcaService);\r\n\r\n  dev: boolean = true;\r\n\r\n  apcaToWcagLookup: NumberKeyLookup = {};\r\n  apcaToWcagLookupAlt: NumberKeyLookup = {};\r\n\r\n  getContrast(\r\n    colorOne: string,\r\n    colorTwo: string,\r\n    contrastType: ContrastType\r\n  ): number | null {\r\n    let score: number | null = null;\r\n\r\n    const contrast = this.calcRawApcaContrast(colorOne, colorTwo);\r\n\r\n    if (contrast || contrast === 0) {\r\n      if (contrastType === 'apca') {\r\n        const roundedContrast = contrast.toFixed(0);\r\n\r\n        score = parseInt(roundedContrast);\r\n      }\r\n\r\n      if (contrastType === 'bpca') {\r\n        const bpcaScore = this.calcRawBpcaContrast(colorOne, colorTwo);\r\n\r\n        score = bpcaScore;\r\n      }\r\n    } else {\r\n      console.error(`Raw APCA contrast was not calculable`);\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  calcRawApcaContrast(colorOne: string, colorTwo: string): number | null {\r\n    let score: number | null = null;\r\n\r\n    score = calcAPCA(colorOne, colorTwo);\r\n\r\n    return score;\r\n  }\r\n\r\n  calcRawBpcaContrast(colorOne: string, colorTwo: string) {\r\n    let wcag: number = NaN;\r\n\r\n    const lc = this.bpca.calcBPCA(colorOne, colorTwo) as number;\r\n    const colorOneArray255 = this.cus.getRgb255Array(colorOne);\r\n    const colorTwoArray255 = this.cus.getRgb255Array(colorTwo);\r\n\r\n    if (colorOneArray255 && colorTwoArray255) {\r\n      const colorOneY = this.bpca.sRGBtoY(colorOneArray255);\r\n      const colorTwoY = this.bpca.sRGBtoY(colorTwoArray255);\r\n\r\n      wcag = parseFloat(this.bpca.bridgeRatio(lc, colorOneY, colorTwoY, ''));\r\n    } else {\r\n      console.warn(`trouble calculating raw BPCA`);\r\n    }\r\n\r\n    return wcag;\r\n  }\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-8766c9abd832330ff17221c3e43e4f777b3c55554086ce9bf7dc7f318c3d832d9fa3b6191da62fb9ccc37f8e2ab2c529eda6683f219957ef7597394d5cfe7a81",
                    "args": [
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 181,
            "methods": [],
            "extends": []
        },
        {
            "name": "ResetObject",
            "id": "interface-ResetObject-0e1daaba4d10af641c4b0c380c7edc80bc39f420f296f495351a49f65044d4956c8a9596afdc6f4d343e7eef26147c37b9464d2c27d9fa2ee1c21e899cfc59e3",
            "file": "src/app/color-slider/color-slider.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  inject,\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ColorUtilService } from '../services/color-util.service';\r\n\r\nexport interface ResetObject {\r\n  reset: true;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-color-slider',\r\n  templateUrl: './color-slider.component.html',\r\n  styleUrls: ['./color-slider.component.scss'],\r\n  imports: [CommonModule],\r\n  standalone: true,\r\n})\r\nexport class ColorSliderComponent implements OnInit, OnChanges {\r\n  @Input() id: string | 'slider-0' = 'slider-0';\r\n  @Input() name: string | 'color-slider' = 'color-slider';\r\n  @Input() color: string | null = null;\r\n  @Input() constantChroma: boolean = false;\r\n  @Input() showGradient: boolean = false;\r\n  @Input() resetSlider: ResetObject | null = null;\r\n  @Output() colorVariant = new EventEmitter<string | null>();\r\n\r\n  cus = inject(ColorUtilService);\r\n\r\n  debug: boolean = false;\r\n  devColorVariant: string | null = null;\r\n\r\n  slideInterval: number | null = null;\r\n  slideMin: number | null = null;\r\n  slideMax: number | null = null;\r\n  initValue: number | null = null;\r\n  value: number | null = null;\r\n\r\n  getInitValue() {\r\n    return this.initValue;\r\n  }\r\n\r\n  sendInitialLightVariant() {\r\n    // Good UX to just send the input color?\r\n    this.colorVariant.emit(this.color);\r\n\r\n    if (this.debug) {\r\n      this.devColorVariant = this.color;\r\n    }\r\n  }\r\n\r\n  async getAndSetLightnessRange(\r\n    color: string,\r\n    options?: { constantChroma: boolean }\r\n  ) {\r\n    const rangeObject = await this.cus.getMinMaxLight(color);\r\n\r\n    if (rangeObject) {\r\n      this.sendInitialLightVariant();\r\n\r\n      this.slideMin = 0;\r\n      this.slideMax = 1;\r\n\r\n      if (options?.constantChroma) {\r\n        this.slideMin = rangeObject.lightMin;\r\n\r\n        this.slideMax = rangeObject.lightMax;\r\n      }\r\n\r\n      this.slideInterval = (this.slideMax - this.slideMin) / 80;\r\n\r\n      const lightnessIndex = 0;\r\n      const initialSlideValue = rangeObject.originalCoords[lightnessIndex];\r\n\r\n      this.initValue = initialSlideValue;\r\n\r\n      this.value = initialSlideValue;\r\n\r\n      this.redefineGradientStops(this.slideMin, this.slideMax);\r\n    } else {\r\n      console.error(`no range object for slider`);\r\n    }\r\n  }\r\n\r\n  handleSliding(event: Event) {\r\n    const inputElem = event.target as HTMLInputElement;\r\n\r\n    if (inputElem) {\r\n      const lightValue = parseFloat(inputElem.value);\r\n\r\n      if (this.color) {\r\n        const lightnessVariant = this.cus.createSrgbColor(\r\n          this.color,\r\n          lightValue\r\n        );\r\n\r\n        if (this.debug) {\r\n          console.log(`slide modding ${this.color} to ${lightnessVariant}`);\r\n\r\n          this.devColorVariant = lightnessVariant;\r\n        }\r\n\r\n        this.colorVariant.emit(lightnessVariant);\r\n      } else {\r\n        console.error(`no color specified`);\r\n      }\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    // TODO: Isn't there an angular way to do this?\r\n    const element = document.getElementById(this.id) as HTMLInputElement;\r\n\r\n    if (this.initValue) {\r\n      element.value = this.initValue.toString();\r\n    } else {\r\n      console.error(`trouble resetting slider`);\r\n    }\r\n  }\r\n\r\n  gradient(val: 'on' | 'off') {\r\n    // TODO: Anguar way to do this?\r\n    const targetElem = document.getElementById(`cc-${this.id}`) as HTMLElement;\r\n\r\n    if (targetElem) {\r\n      if (val === 'on') {\r\n        targetElem.style.background = 'var(--gradient-background)';\r\n      }\r\n\r\n      if (val === 'off') {\r\n        targetElem.style.background = 'var(--default-background)';\r\n      }\r\n    } else {\r\n      console.warn(`no elem to assign gradient to.`);\r\n    }\r\n  }\r\n\r\n  redefineVariable(\r\n    element: HTMLElement,\r\n    variableName: string,\r\n    newValue: string\r\n  ) {\r\n    element.style.setProperty(variableName, newValue);\r\n  }\r\n\r\n  redefineGradientStops(lightMin: number, lightMax: number) {\r\n    if (this.color) {\r\n      const targetElement = document.getElementById(\r\n        `cc-${this.id}`\r\n      ) as HTMLElement;\r\n\r\n      const stops = [\r\n        '--grad-stop-0',\r\n        '--grad-stop-1',\r\n        '--grad-stop-2',\r\n        '--grad-stop-3',\r\n        '--grad-stop-4',\r\n        '--grad-stop-5',\r\n      ];\r\n\r\n      // get new stop values\r\n      const stopInterval = (lightMax - lightMin) / (stops.length - 1);\r\n      const stopVals = [];\r\n\r\n      for (let i = 0; i < stops.length; i++) {\r\n        const targetLight = stopInterval * i + lightMin;\r\n        targetLight;\r\n\r\n        const stopColor = this.cus.createSrgbColor(this.color, targetLight);\r\n\r\n        stopVals.push(stopColor);\r\n      }\r\n\r\n      // assign new stop values\r\n\r\n      for (let i = 0; i < stops.length; i++) {\r\n        const targetStop = stops[i];\r\n        const targetStopVal = stopVals[i];\r\n\r\n        if (targetStopVal) {\r\n          this.redefineVariable(targetElement, targetStop, targetStopVal);\r\n        } else {\r\n          console.log(`no new val to assign`);\r\n        }\r\n      }\r\n    } else {\r\n      console.log(`no color specified`);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.color) {\r\n      this.getAndSetLightnessRange(this.color, {\r\n        constantChroma: this.constantChroma,\r\n      });\r\n    } else {\r\n      console.warn(`no color specified to comp`);\r\n    }\r\n\r\n    if (this.showGradient) {\r\n      this.gradient('on');\r\n    }\r\n\r\n    if (!this.showGradient) {\r\n      this.gradient('off');\r\n    }\r\n\r\n    if (this.resetSlider) {\r\n      this.reset();\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "reset",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-23c11020a2831beb3fa02ee911a75b64009c31bb46f73a01145c2560cb13b7f7e641105b678bd8fb01a5a199117001f3da4a78351d29d85d213ed7b82982091f",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "BpcaService",
            "id": "injectable-BpcaService-8d1f7b2a3cf7b6a2c750f0d1119a7e34ac5ba51fe2e343b923b1b32cea17e789357d52ac17f31a181aafca890dd94493d674f3ba4818f7ce9b7d82e49a3f2d8a",
            "file": "src/app/services/bpca.service.ts",
            "properties": [
                {
                    "name": "cus",
                    "defaultValue": "inject(ColorUtilService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "alphaBlend",
                    "args": [
                        {
                            "name": "rgbaFG",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[0, 0, 0, 1.0]"
                        },
                        {
                            "name": "rgbBG",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[0, 0, 0]"
                        },
                        {
                            "name": "isInt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rgbaFG",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[0, 0, 0, 1.0]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rgbBG",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[0, 0, 0]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isInt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "BPCAcontrast",
                    "args": [
                        {
                            "name": "txtY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bgY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "places",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "txtY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bgY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "places",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "bridgeRatio",
                    "args": [
                        {
                            "name": "contrastLc",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "txtY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bgY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ratioStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "' to 1'"
                        },
                        {
                            "name": "places",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "contrastLc",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "txtY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bgY",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ratioStr",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "' to 1'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "places",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcBPCA",
                    "args": [
                        {
                            "name": "textColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bgColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "places",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1"
                        },
                        {
                            "name": "isInt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | number",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "textColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bgColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "places",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "-1",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isInt",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sRGBtoY",
                    "args": [
                        {
                            "name": "rgba",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[0, 0, 0]"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rgba",
                            "type": "[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "[0, 0, 0]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport { ColorUtilService } from './color-util.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BpcaService {\r\n  cus = inject(ColorUtilService);\r\n\r\n  // Following Code is copied with some modification from [Bridge-PCA algo](https://github.com/Myndex/bridge-pca/blob/master/src/bridge-pca.js)\r\n  // Attempts to use bpca module as-is has failed because of some issue with colorparsely dependency\r\n\r\n  bridgeRatio(\r\n    contrastLc = 0,\r\n    txtY: number,\r\n    bgY: number,\r\n    ratioStr = ' to 1',\r\n    places = 1\r\n  ) {\r\n    // Takes the output of APCA (either a string or number)\r\n    // and makes it a WCAG2 ratio, returning a string '4.5 to 1'\r\n    // Jan 16 2022 constants\r\n\r\n    let maxY = Math.max(txtY, bgY);\r\n\r\n    const offsetA = 0.2693;\r\n    const preScale = -0.0561;\r\n    const powerShift = 4.537;\r\n\r\n    const mainFactor = 1.113946;\r\n\r\n    const loThresh = 0.3;\r\n    const loExp = 0.48;\r\n    const preEmph = 0.42;\r\n    const postDe = 0.6594;\r\n\r\n    const hiTrim = 0.0785;\r\n    const loTrim = 0.0815;\r\n    const trimThresh = 0.506; // #c0c0c0\r\n\r\n    let addTrim = loTrim + hiTrim;\r\n\r\n    if (maxY > trimThresh) {\r\n      let adjFact = (1.0 - maxY) / (1.0 - trimThresh);\r\n      addTrim = loTrim * adjFact + hiTrim;\r\n    }\r\n\r\n    contrastLc = Math.max(0, Math.abs(contrastLc * 0.01));\r\n    // contrastLc = Math.max(0, Math.abs(parseFloat(contrastLc) * 0.01));\r\n\r\n    // convert Lc into a WCAG ratio\r\n    let wcagContrast =\r\n      (Math.pow(contrastLc + preScale, powerShift) + offsetA) *\r\n        mainFactor *\r\n        contrastLc +\r\n      addTrim;\r\n\r\n    // adjust WCAG ratios that are under  3 : 1, clean up near 0.\r\n    wcagContrast =\r\n      wcagContrast > loThresh\r\n        ? 10.0 * wcagContrast\r\n        : contrastLc < 0.06\r\n        ? 0\r\n        : 10.0 * wcagContrast -\r\n          (Math.pow(loThresh - wcagContrast + preEmph, loExp) - postDe);\r\n\r\n    return wcagContrast.toFixed(places) + ratioStr; // + '<br>trim:' + addTrim;\r\n  }\r\n\r\n  BPCAcontrast(txtY: number, bgY: number, places = -1) {\r\n    // send linear Y (luminance) for text and background.\r\n    // txtY and bgY must be between 0.0-1.0\r\n    // IMPORTANT: Do not swap, polarity is important.\r\n\r\n    const icp = [0.0, 1.1]; // input range clamp / input error check\r\n\r\n    if (\r\n      isNaN(txtY) ||\r\n      isNaN(bgY) ||\r\n      Math.min(txtY, bgY) < icp[0] ||\r\n      Math.max(txtY, bgY) > icp[1]\r\n    ) {\r\n      return 0; // return zero on error\r\n      // return 'error'; // optional string return for error\r\n    }\r\n\r\n    //////////   BPCA 0.1.6 G - 4g Constants   ///////////////////////\r\n\r\n    const normBG = 0.56,\r\n      normTXT = 0.57,\r\n      revTXT = 0.62,\r\n      revBG = 0.65; // G-4g constants for use with 2.4 exponent\r\n\r\n    const blkThrs = 0.022,\r\n      blkClmp = 1.414,\r\n      scaleBoW = 1.14,\r\n      scaleWoB = 1.14,\r\n      loBoWoffset = 0.027,\r\n      loWoBoffset = 0.027,\r\n      bridgeWoBfact = 0.1414,\r\n      bridgeWoBpivot = 0.84,\r\n      loClip = 0.1,\r\n      deltaYmin = 0.0005;\r\n\r\n    //////////   SAPC LOCAL VARS   /////////////////////////////////////////\r\n\r\n    let SAPC = 0.0; // For raw SAPC values\r\n    let outputContrast = 0.0; // For weighted final values\r\n    let polCat = 'BoW'; // Polarity Indicator. N normal R reverse\r\n\r\n    // TUTORIAL\r\n\r\n    // Use Y for text and BG, and soft clamp black,\r\n    // return 0 for very close luminances, determine\r\n    // polarity, and calculate SAPC raw contrast\r\n    // Then scale for easy to remember levels.\r\n\r\n    // Note that reverse contrast (white text on black)\r\n    // intentionally returns a negative number\r\n    // Proper polarity is important!\r\n\r\n    //////////   BLACK SOFT CLAMP   ////////////////////////////////////////\r\n\r\n    // Soft clamps Y for either color if it is near black.\r\n    txtY = txtY > blkThrs ? txtY : txtY + Math.pow(blkThrs - txtY, blkClmp);\r\n    bgY = bgY > blkThrs ? bgY : bgY + Math.pow(blkThrs - bgY, blkClmp);\r\n\r\n    ///// Return 0 Early for extremely low ∆Y\r\n    if (Math.abs(bgY - txtY) < deltaYmin) {\r\n      return 0.0;\r\n    }\r\n\r\n    //////////   Bridge-PCA/SAPC CONTRAST - LOW CLIP (W3 LICENSE)  ///////////////\r\n\r\n    if (bgY > txtY) {\r\n      // For normal polarity, black text on white (BoW)\r\n\r\n      // Calculate the SAPC contrast value and scale\r\n\r\n      SAPC = (Math.pow(bgY, normBG) - Math.pow(txtY, normTXT)) * scaleBoW;\r\n\r\n      // Low Clip to prevent polarity reversal\r\n      outputContrast = SAPC < loClip ? 0.0 : SAPC - loBoWoffset;\r\n    } else {\r\n      // For reverse polarity, light text on dark (WoB)\r\n      // WoB should always return either negative value.\r\n      // OR the output will have R appended as string '23R'\r\n      // OR WoB '23 BoW' toolmaker choice so long as explained\r\n      polCat = 'WoB';\r\n\r\n      SAPC = (Math.pow(bgY, revBG) - Math.pow(txtY, revTXT)) * scaleWoB;\r\n\r\n      // this is a special offset to align with incorrect WCAG_2 math.\r\n      let bridge = Math.max(0, txtY / bridgeWoBpivot - 1.0) * bridgeWoBfact;\r\n\r\n      // console.log(bridge + ' txtY ' + txtY + ' SAPC ' + SAPC);\r\n\r\n      outputContrast = SAPC > -loClip ? 0.0 : SAPC + loWoBoffset + bridge;\r\n    }\r\n\r\n    // return Lc (lightness contrast) as a signed numeric value\r\n    // Round to the nearest whole number is optional.\r\n    // Rounded can be a signed INT as output will be within ± 127\r\n    // places = -1 returns signed float, 0 returns rounded as string\r\n\r\n    if (places < 0) {\r\n      return outputContrast * 100.0;\r\n    } else if (places == 0) {\r\n      return (\r\n        Math.round(Math.abs(outputContrast) * 100.0) +\r\n        '<sub>' +\r\n        polCat +\r\n        '</sub>'\r\n      );\r\n    } else if (Number.isInteger(places)) {\r\n      return (outputContrast * 100.0).toFixed(places);\r\n    } else {\r\n      throw 'Err-3';\r\n    }\r\n  } // End BPCAcontrast()\r\n\r\n  sRGBtoY(rgba = [0, 0, 0]) {\r\n    // send sRGB 8bpc (0xFFFFFF) or string\r\n\r\n    /////   Bridge-PCA 0.1.6 G - 4g - W3 Constants   ////////////////////////\r\n\r\n    const mainTRC = 2.4; // 2.4 exponent emulates actual monitor perception\r\n\r\n    const sRco = 0.212647813391364,\r\n      sGco = 0.715179147533615,\r\n      sBco = 0.0721730390750208; // sRGB coefficients\r\n\r\n    // Derived from:\r\n    // xW\tyW\tK\txR\tyR\txG\tyG\txB\tyB\r\n    // 0.312720\t0.329030\t6504\t0.640\t0.330\t0.300\t0.600\t0.150\t0.060\r\n\r\n    // linearize r, g, or b then apply coefficients\r\n    // and sum then return the resulting luminance\r\n\r\n    function simpleExp(chan: number) {\r\n      return Math.pow(chan / 255.0, mainTRC);\r\n    }\r\n\r\n    return (\r\n      sRco * simpleExp(rgba[0]) +\r\n      sGco * simpleExp(rgba[1]) +\r\n      sBco * simpleExp(rgba[2])\r\n    );\r\n  } // End sRGBtoY()\r\n\r\n  alphaBlend(rgbaFG = [0, 0, 0, 1.0], rgbBG = [0, 0, 0], isInt = true) {\r\n    if (rgbaFG[3]) {\r\n      rgbaFG[3] = Math.max(Math.min(rgbaFG[3], 1.0), 0.0); // clamp alpha\r\n      let compBlend = 1.0 - rgbaFG[3];\r\n      let rgbOut = [0, 0, 0]; // or just use rgbBG to retain other elements?\r\n\r\n      for (let i = 0; i < 3; i++) {\r\n        rgbOut[i] = rgbBG[i] * compBlend + rgbaFG[i] * rgbaFG[3];\r\n        if (isInt) rgbOut[i] = Math.min(Math.round(rgbOut[i]), 255);\r\n      }\r\n\r\n      return rgbOut;\r\n    } else {\r\n      return rgbaFG;\r\n    }\r\n  } // End alphaBlend()\r\n\r\n  calcBPCA(textColor: string, bgColor: string, places = -1, isInt = true) {\r\n    // NOTE:  that this function required colorParsley !!\r\n    // let txClr = colorParsley(textColor);\r\n    // let bgClr = colorParsley(bgColor);\r\n    // let hasAlpha = txClr[3] != '' && txClr[3] < 1 ? true : false;\r\n    // if (hasAlpha) {\r\n    // txClr = this.alphaBlend(txClr, bgClr, isInt);\r\n    // }\r\n    // return this.BPCAcontrast(this.sRGBtoY(txClr), this.sRGBtoY(bgClr), places);\r\n\r\n    let bpca: string | number = NaN;\r\n\r\n    let txClr = this.cus.getRgb255Array(textColor);\r\n    let bgClr = this.cus.getRgb255Array(bgColor);\r\n\r\n    if (txClr && bgClr) {\r\n      bpca = this.BPCAcontrast(\r\n        this.sRGBtoY(txClr),\r\n        this.sRGBtoY(bgClr),\r\n        places\r\n      );\r\n    } else {\r\n      console.warn(`issue calculating BPCA`);\r\n    }\r\n\r\n    return bpca;\r\n  } // End calcBPCA()\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ColorMetricsService",
            "id": "injectable-ColorMetricsService-8766c9abd832330ff17221c3e43e4f777b3c55554086ce9bf7dc7f318c3d832d9fa3b6191da62fb9ccc37f8e2ab2c529eda6683f219957ef7597394d5cfe7a81",
            "file": "src/app/services/color-metrics.service.ts",
            "properties": [
                {
                    "name": "apcaToWcagLookup",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NumberKeyLookup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "apcaToWcagLookupAlt",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NumberKeyLookup",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "bpca",
                    "defaultValue": "inject(BpcaService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "cus",
                    "defaultValue": "inject(ColorUtilService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "dev",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [
                {
                    "name": "calcRawApcaContrast",
                    "args": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcRawBpcaContrast",
                    "args": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getContrast",
                    "args": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "contrastType",
                            "type": "ContrastType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "contrastType",
                            "type": "ContrastType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\n\r\nimport { calcAPCA, sRGBtoY } from 'apca-w3';\r\n\r\nimport { scaleLinear } from 'd3';\r\n\r\nimport { ColorUtilService } from './color-util.service';\r\nimport { BpcaService } from './bpca.service';\r\n\r\nexport interface NumberKeyLookup {\r\n  [key: number]: number;\r\n}\r\n\r\nexport type ContrastType = 'apca' | 'bpca';\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorMetricsService {\r\n  cus = inject(ColorUtilService);\r\n  bpca = inject(BpcaService);\r\n\r\n  dev: boolean = true;\r\n\r\n  apcaToWcagLookup: NumberKeyLookup = {};\r\n  apcaToWcagLookupAlt: NumberKeyLookup = {};\r\n\r\n  getContrast(\r\n    colorOne: string,\r\n    colorTwo: string,\r\n    contrastType: ContrastType\r\n  ): number | null {\r\n    let score: number | null = null;\r\n\r\n    const contrast = this.calcRawApcaContrast(colorOne, colorTwo);\r\n\r\n    if (contrast || contrast === 0) {\r\n      if (contrastType === 'apca') {\r\n        const roundedContrast = contrast.toFixed(0);\r\n\r\n        score = parseInt(roundedContrast);\r\n      }\r\n\r\n      if (contrastType === 'bpca') {\r\n        const bpcaScore = this.calcRawBpcaContrast(colorOne, colorTwo);\r\n\r\n        score = bpcaScore;\r\n      }\r\n    } else {\r\n      console.error(`Raw APCA contrast was not calculable`);\r\n    }\r\n\r\n    return score;\r\n  }\r\n\r\n  calcRawApcaContrast(colorOne: string, colorTwo: string): number | null {\r\n    let score: number | null = null;\r\n\r\n    score = calcAPCA(colorOne, colorTwo);\r\n\r\n    return score;\r\n  }\r\n\r\n  calcRawBpcaContrast(colorOne: string, colorTwo: string) {\r\n    let wcag: number = NaN;\r\n\r\n    const lc = this.bpca.calcBPCA(colorOne, colorTwo) as number;\r\n    const colorOneArray255 = this.cus.getRgb255Array(colorOne);\r\n    const colorTwoArray255 = this.cus.getRgb255Array(colorTwo);\r\n\r\n    if (colorOneArray255 && colorTwoArray255) {\r\n      const colorOneY = this.bpca.sRGBtoY(colorOneArray255);\r\n      const colorTwoY = this.bpca.sRGBtoY(colorTwoArray255);\r\n\r\n      wcag = parseFloat(this.bpca.bridgeRatio(lc, colorOneY, colorTwoY, ''));\r\n    } else {\r\n      console.warn(`trouble calculating raw BPCA`);\r\n    }\r\n\r\n    return wcag;\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ColorUtilService",
            "id": "injectable-ColorUtilService-235b64646799eccbc94f9d47895fb9af079fe6a4edbf5b31862e0a5154ed1a57d97867c559875771d3e2113fd452091467feb06abbdc4f9bbdcece0f30d42fcf",
            "file": "src/app/services/color-util.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "adjustColorPairForPresentation",
                    "args": [
                        {
                            "name": "pair",
                            "type": "ColorPair",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ColorPair>",
                    "typeParameters": [],
                    "line": 278,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "pair",
                            "type": "ColorPair",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcDeltaE",
                    "args": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 406,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcWcag2",
                    "args": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | null",
                    "typeParameters": [],
                    "line": 427,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorOne",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "colorTwo",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSrgbColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lightness",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lightness",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createVariants",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array | null",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterOutOfGamutVariants",
                    "args": [
                        {
                            "name": "variants",
                            "type": "Array<ColorCoordArray> | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Array<ColorCoordArray>>",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "variants",
                            "type": "Array<ColorCoordArray> | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateAllOklchVariants",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lightSteps",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "chromaSteps",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TableData>",
                    "typeParameters": [],
                    "line": 496,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lightSteps",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "chromaSteps",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColorMeta",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ColorMetaObj | null",
                    "typeParameters": [],
                    "line": 447,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMinMaxLight",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<MinMaxLightObject | null>",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMinObjectDimension",
                    "args": [
                        {
                            "name": "apca",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 468,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "apca",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRandomColorPair",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<ColorPair>",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getRgb255Array",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[number, number, number]",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isInSrgbGamut",
                    "args": [
                        {
                            "name": "oklchColorCoord",
                            "type": "ColorCoordArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "oklchColorCoord",
                            "type": "ColorCoordArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "matchChromas",
                    "args": [
                        {
                            "name": "colorpair",
                            "type": "ColorPair",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<ChromaMatchObject>",
                    "typeParameters": [],
                    "line": 313,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "colorpair",
                            "type": "ColorPair",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseColor",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ColorConstructor | null",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport Color from 'colorjs.io';\r\nimport { to } from 'colorjs.io/fn';\r\nimport { ColorConstructor } from 'colorjs.io/types/src/color';\r\nimport { scaleLinear, sort } from 'd3';\r\nimport { random, reverse, uniqBy, uniq } from 'lodash';\r\nimport {\r\n  TableColorCell,\r\n  TableData,\r\n} from '../palette-table/palette-table.component';\r\n\r\nexport type ColorPair = [string, string];\r\n\r\nexport type ColorCoordArray = [number, number, number];\r\n\r\nexport class ChromaMatchObject {\r\n  success: boolean = false;\r\n  colors: ColorPair | null = null;\r\n  chroma: number | null = null;\r\n}\r\n\r\nexport interface MinMaxLightObject {\r\n  originalCoords: ColorCoordArray;\r\n  lightMin: number;\r\n  lightMax: number;\r\n}\r\n\r\n// export type ColorVariant = [number, number, number];\r\n\r\nexport interface ColorMetaObj {\r\n  lightness: number | string;\r\n  chroma: number | string;\r\n  hue: number | string;\r\n  saturation: number | string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorUtilService {\r\n  parseColor(color: string): ColorConstructor | null {\r\n    let parsedColor: ColorConstructor | null = null;\r\n\r\n    try {\r\n      parsedColor = Color.parse(color);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return parsedColor;\r\n  }\r\n\r\n  getRgb255Array(color: string) {\r\n    const colorObj = this.parseColor(color);\r\n\r\n    let array255: [number, number, number] | null = null;\r\n\r\n    if (colorObj) {\r\n      const colorCoordsDecimal = colorObj.coords;\r\n\r\n      array255 = [\r\n        Math.round(colorCoordsDecimal[0] * 255),\r\n        Math.round(colorCoordsDecimal[1] * 255),\r\n        Math.round(colorCoordsDecimal[2] * 255),\r\n      ];\r\n    } else {\r\n      console.error(`unable to parse: ${color}`);\r\n    }\r\n\r\n    return array255;\r\n  }\r\n\r\n  createSrgbColor(color: string, lightness: number): string | null {\r\n    let srgbColor: string | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const originalChroma = oklchColor.coords[1];\r\n      const originalHue = oklchColor.coords[2];\r\n\r\n      const targetColor = new Color('oklch', [\r\n        lightness,\r\n        originalChroma,\r\n        originalHue,\r\n      ]);\r\n\r\n      // const inSrgbGamut = targetColor.inGamut('srgb');\r\n\r\n      // if (!inSrgbGamut) {\r\n      //   console.warn(\r\n      //     `OKLCH color in SRGB gamut: ${targetColor.inGamut('srgb')}`\r\n      //   );\r\n      // }\r\n\r\n      const tColorInSrgbGamut = targetColor.toGamut({\r\n        space: 'srgb',\r\n        method: 'oklch.c',\r\n      });\r\n\r\n      const targetColorAsRgbColor = tColorInSrgbGamut.to('srgb');\r\n\r\n      srgbColor = targetColorAsRgbColor.toString({ format: 'hex' });\r\n    }\r\n\r\n    return srgbColor;\r\n  }\r\n\r\n  isInSrgbGamut(oklchColorCoord: ColorCoordArray): Promise<boolean> {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      try {\r\n        const colorObject = new Color('oklch', oklchColorCoord);\r\n        const variantInGamut = colorObject.inGamut('srgb');\r\n\r\n        resolve(variantInGamut);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  createVariants(color: string): Array<ColorCoordArray> | null {\r\n    let variantCollection: Array<ColorCoordArray> | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const lchCooords = oklchColor.coords;\r\n      const colorChroma = lchCooords[1];\r\n      const colorHue = lchCooords[2];\r\n\r\n      // 1) create enough steps of lightness\r\n      const lightnessSteps = 1000;\r\n      const lightMax = 1;\r\n      const lightMin = 0;\r\n      const lightInterval = (lightMax - lightMin) / lightnessSteps;\r\n\r\n      // 2) create all variants of color using constant chroma and hue.\r\n      variantCollection = [];\r\n\r\n      // 2a) this actually creates `lightnessSteps + 1` variants as initial variant has to start at zero.\r\n      for (let i = 0; i <= lightnessSteps; i++) {\r\n        const variantTargetLight = i * lightInterval;\r\n        const variant: ColorCoordArray = [\r\n          variantTargetLight,\r\n          colorChroma,\r\n          colorHue,\r\n        ];\r\n\r\n        variantCollection.push(variant);\r\n      }\r\n    } else {\r\n      console.error(`unable to parse color`);\r\n    }\r\n\r\n    return variantCollection;\r\n  }\r\n\r\n  filterOutOfGamutVariants(\r\n    variants: Array<ColorCoordArray> | null\r\n  ): Promise<Array<ColorCoordArray>> {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!variants) {\r\n        reject(`no variants`);\r\n      } else {\r\n        let filteringComplete: boolean = false;\r\n\r\n        const filtered = [];\r\n\r\n        for (let i = 0; i < variants.length; i++) {\r\n          const curVariant = variants[i];\r\n\r\n          if (await this.isInSrgbGamut(curVariant)) {\r\n            filtered.push(curVariant);\r\n          }\r\n\r\n          if (i === variants.length - 1) filteringComplete = true;\r\n        }\r\n\r\n        if (filteringComplete) {\r\n          resolve(filtered);\r\n        } else {\r\n          reject(`error`);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async getMinMaxLight(color: string): Promise<MinMaxLightObject | null> {\r\n    let returnedObject: MinMaxLightObject | null = null;\r\n\r\n    const initVariantCollection = this.createVariants(color);\r\n\r\n    const variantCollection = await this.filterOutOfGamutVariants(\r\n      initVariantCollection\r\n    );\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor && variantCollection.length) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      const lchCooords = oklchColor.coords;\r\n\r\n      const oklchLightCoordIndex = 0;\r\n      const firstArrayItemIndex = 0;\r\n      const lastArrayItemIndex = variantCollection.length - 1;\r\n\r\n      const minLight =\r\n        variantCollection[firstArrayItemIndex][oklchLightCoordIndex];\r\n      const maxLight =\r\n        variantCollection[lastArrayItemIndex][oklchLightCoordIndex];\r\n\r\n      returnedObject = {\r\n        originalCoords: lchCooords,\r\n        lightMin: minLight,\r\n        lightMax: maxLight,\r\n      };\r\n    } else {\r\n      if (!parsedColor) {\r\n        console.error(`unable to parse color`);\r\n      } else {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n        const lchCooords = oklchColor.coords;\r\n        returnedObject = {\r\n          originalCoords: lchCooords,\r\n          lightMin: lchCooords[0],\r\n          lightMax: lchCooords[0],\r\n        };\r\n      }\r\n    }\r\n\r\n    return returnedObject;\r\n  }\r\n\r\n  async getRandomColorPair(): Promise<ColorPair> {\r\n    let pair: ColorPair = ['black', 'white'];\r\n\r\n    // ref: oklch.com\r\n    // const targetChroma = 0.11;\r\n    const targetChroma = random(0.11, 0.34, true);\r\n\r\n    const colorOneLight = random(0.25, 0.26, true);\r\n    const colorOneHue = random(0, 360, true);\r\n    const colorTwoLight = random(0.94, 0.95, true);\r\n    const colorTwoHue = random(0, 360, true);\r\n\r\n    const colorOne = new Color('oklch', [\r\n      colorOneLight,\r\n      targetChroma,\r\n      colorOneHue,\r\n    ])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const colorTwo = new Color('oklch', [\r\n      colorTwoLight,\r\n      targetChroma,\r\n      colorTwoHue,\r\n    ])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const initPair: ColorPair = [colorOne, colorTwo];\r\n\r\n    const chromaMatchedPair = await this.matchChromas(initPair);\r\n\r\n    pair = chromaMatchedPair.colors ? chromaMatchedPair.colors : pair;\r\n\r\n    return pair;\r\n  }\r\n\r\n  // This function only adjust the first color of the pair.\r\n  async adjustColorPairForPresentation(pair: ColorPair): Promise<ColorPair> {\r\n    let returnedPair: ColorPair = ['black', 'white'];\r\n\r\n    const colorOne = pair[0];\r\n    const colortwo = pair[1];\r\n\r\n    const parsedColorOne = this.parseColor(colorOne);\r\n\r\n    const colorOneMinMaxLightObj = await this.getMinMaxLight(colorOne);\r\n\r\n    if (parsedColorOne && colorOneMinMaxLightObj) {\r\n      const colorOneTargetLightness =\r\n        colorOneMinMaxLightObj.lightMin +\r\n        (colorOneMinMaxLightObj.lightMax - colorOneMinMaxLightObj.lightMin) / 2;\r\n\r\n      const oklchColorOne = new Color('srgb', parsedColorOne.coords).to(\r\n        'oklch'\r\n      );\r\n\r\n      const adjColorOne = new Color('oklch', [\r\n        colorOneTargetLightness,\r\n        oklchColorOne.coords[1],\r\n        oklchColorOne.coords[2],\r\n      ])\r\n        .to('srgb')\r\n        .toString({ format: 'hex' });\r\n\r\n      returnedPair = [adjColorOne, colortwo];\r\n    } else {\r\n      console.warn('trouble adjusting colors');\r\n    }\r\n\r\n    return returnedPair;\r\n  }\r\n\r\n  async matchChromas(colorpair: ColorPair): Promise<ChromaMatchObject> {\r\n    let pair: ChromaMatchObject = {\r\n      success: false,\r\n      colors: null,\r\n      chroma: null,\r\n    };\r\n\r\n    const colorOneParsed = this.parseColor(colorpair[0]);\r\n    const colorTwoParsed = this.parseColor(colorpair[1]);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneOklch = new Color('srgb', colorOneParsed.coords).to(\r\n        'oklch'\r\n      );\r\n      const colorOneChroma = colorOneOklch.coords[1];\r\n\r\n      const colorTwoOklch = new Color('srgb', colorTwoParsed.coords).to(\r\n        'oklch'\r\n      );\r\n      const colorTwoChroma = colorTwoOklch.coords[1];\r\n\r\n      const colorOneCandCoords: ColorCoordArray = [\r\n        colorOneOklch.coords[0],\r\n        colorTwoChroma,\r\n        colorOneOklch.coords[2],\r\n      ];\r\n      const colorTwoCandCoords: ColorCoordArray = [\r\n        colorTwoOklch.coords[0],\r\n        colorOneChroma,\r\n        colorTwoOklch.coords[2],\r\n      ];\r\n\r\n      const colorOneCandInGamut = await this.isInSrgbGamut(colorOneCandCoords);\r\n      const colorTwoCandInGamut = await this.isInSrgbGamut(colorTwoCandCoords);\r\n\r\n      if (colorOneCandInGamut && !colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          new Color('oklch', colorOneCandCoords)\r\n            .to('srgb')\r\n            .toString({ format: 'hex' }),\r\n          colorpair[1],\r\n        ];\r\n\r\n        pair.chroma = colorOneCandCoords[1];\r\n      }\r\n\r\n      if (!colorOneCandInGamut && colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          colorpair[0],\r\n          new Color('oklch', colorTwoCandCoords)\r\n            .to('srgb')\r\n            .toString({ format: 'hex' }),\r\n        ];\r\n\r\n        pair.chroma = colorTwoCandCoords[1];\r\n      }\r\n\r\n      if (colorOneCandInGamut && colorTwoCandInGamut) {\r\n        if (colorOneCandCoords[1] > colorTwoCandCoords[1]) {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            new Color('oklch', colorOneCandCoords)\r\n              .to('srgb')\r\n              .toString({ format: 'hex' }),\r\n            colorpair[1],\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        } else {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            colorpair[0],\r\n            new Color('oklch', colorTwoCandCoords)\r\n              .to('srgb')\r\n              .toString({ format: 'hex' }),\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"color parsing didn't work out. \");\r\n    }\r\n\r\n    return pair;\r\n  }\r\n\r\n  calcDeltaE(colorOne: string, colorTwo: string): number | null {\r\n    let delta: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawDelta = colorOneObj.deltaE2000(colorTwoObj);\r\n\r\n      // const fixedDelta = rawDelta.toFixed(2);\r\n\r\n      // delta = parseFloat(fixedDelta);\r\n      delta = Math.round(rawDelta);\r\n    }\r\n\r\n    return delta;\r\n  }\r\n\r\n  calcWcag2(colorOne: string, colorTwo: string): number | null {\r\n    let wcag21: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawWcag21 = colorOneObj.contrast(colorTwoObj, 'WCAG21');\r\n\r\n      const fixedDelta = rawWcag21.toFixed(1);\r\n\r\n      wcag21 = parseFloat(fixedDelta);\r\n    }\r\n\r\n    return wcag21;\r\n  }\r\n\r\n  getColorMeta(color: string): ColorMetaObj | null {\r\n    let meta: ColorMetaObj | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const lchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      meta = {\r\n        lightness: lchColor.coords[0].toFixed(2),\r\n        chroma: lchColor.coords[1].toFixed(2),\r\n        hue: lchColor.coords[2].toFixed(2),\r\n        saturation: ((lchColor.coords[1] / lchColor.coords[0]) * 100).toFixed(\r\n          2\r\n        ),\r\n      };\r\n    }\r\n\r\n    return meta;\r\n  }\r\n\r\n  getMinObjectDimension(apca: number): number {\r\n    let dimension: number = NaN;\r\n\r\n    const absApca = Math.abs(apca);\r\n\r\n    const pixels = [1, 1.5, 2, 3, 4, 6, 8, 10, 15];\r\n    const apcaScores = [90, 75, 60, 50, 45, 30, 25, 20, 15];\r\n    const minLookup = scaleLinear(pixels).domain(apcaScores);\r\n\r\n    const initSize = minLookup(absApca).toFixed(2);\r\n\r\n    dimension = parseFloat(initSize);\r\n\r\n    if (dimension > 15) {\r\n      dimension = 15;\r\n    }\r\n\r\n    if (absApca >= 100) {\r\n      dimension = 0.25;\r\n    }\r\n\r\n    if (absApca < 15) {\r\n      dimension = NaN;\r\n    }\r\n\r\n    return dimension;\r\n  }\r\n\r\n  generateAllOklchVariants(\r\n    color: string,\r\n    lightSteps: number,\r\n    chromaSteps: number\r\n  ): Promise<TableData> {\r\n    return new Promise((resolve, reject) => {\r\n      const parsedColor = this.parseColor(color);\r\n\r\n      const variantsCollection = [];\r\n\r\n      let sortedVariantsCollection = [];\r\n\r\n      if (parsedColor) {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n        const lchCooords = oklchColor.coords;\r\n        const colorLight = lchCooords[0];\r\n        const colorChroma = lchCooords[1];\r\n        const colorHue = lchCooords[2];\r\n\r\n        const lightMax = 1;\r\n        const lightMin = 0;\r\n        const lightInterval = (lightMax - lightMin) / lightSteps;\r\n\r\n        // calculate light levels\r\n        const rawLightLevels = [];\r\n\r\n        let lLevel = colorLight;\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel + lightInterval;\r\n        } while (lLevel <= lightMax);\r\n\r\n        lLevel = colorLight;\r\n\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel - lightInterval;\r\n        } while (lLevel >= lightMin);\r\n\r\n        const sortedLightLevels = sort(uniq(rawLightLevels));\r\n\r\n        const chromaMax = 0.33;\r\n        const chromaMin = 0;\r\n        const chromaInterval = (chromaMax - chromaMin) / chromaSteps;\r\n\r\n        // calculate chroma levels\r\n        const rawChromaLevels = [];\r\n\r\n        let cLevel = colorChroma;\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel + chromaInterval;\r\n        } while (cLevel <= chromaMax);\r\n\r\n        cLevel = colorChroma;\r\n\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel - chromaInterval;\r\n        } while (cLevel >= chromaMin);\r\n\r\n        const sortedChromaLevels = sort(uniq(rawChromaLevels));\r\n\r\n        // generate all rows\r\n        for (let i = 0; i < sortedLightLevels.length; i++) {\r\n          const variantRow: Array<TableColorCell> = [];\r\n\r\n          for (let j = 0; j < sortedChromaLevels.length; j++) {\r\n            const targetLightness = sortedLightLevels[i];\r\n\r\n            const targetChroma = sortedChromaLevels[j];\r\n\r\n            const variantColor = new Color('oklch', [\r\n              targetLightness,\r\n              targetChroma,\r\n              colorHue,\r\n            ]);\r\n\r\n            const variantColorinGamut = variantColor.inGamut('srgb');\r\n\r\n            const colorVal = variantColorinGamut\r\n              ? variantColor.to('srgb').toString({ format: 'hex' })\r\n              : null;\r\n\r\n            const deltaE = colorVal ? this.calcDeltaE(colorVal, color) : null;\r\n\r\n            const dLight = colorVal\r\n              ? Math.round(((targetLightness - colorLight) / colorLight) * 100)\r\n              : null;\r\n\r\n            const dChroma = colorVal\r\n              ? Math.round(((targetChroma - colorChroma) / colorChroma) * 100)\r\n              : null;\r\n\r\n            const variantObj: TableColorCell = {\r\n              color: colorVal,\r\n              lightness: targetLightness,\r\n              chroma: targetChroma,\r\n              hue: colorHue,\r\n              deltaE: deltaE,\r\n              deltaChroma: dChroma,\r\n              deltaLightness: dLight,\r\n              // wacg2Comp: NaN,\r\n              // pContrast: NaN,\r\n            };\r\n\r\n            variantRow.push(variantObj);\r\n          }\r\n\r\n          variantsCollection.push(variantRow);\r\n        }\r\n      } else {\r\n        console.error(`could not parse color`);\r\n\r\n        reject(`could not parse color`);\r\n      }\r\n\r\n      // order color rows from light to dark\r\n      sortedVariantsCollection = reverse(variantsCollection);\r\n\r\n      resolve(sortedVariantsCollection);\r\n    });\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 622
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ChromaMatchObject",
            "id": "class-ChromaMatchObject-235b64646799eccbc94f9d47895fb9af079fe6a4edbf5b31862e0a5154ed1a57d97867c559875771d3e2113fd452091467feb06abbdc4f9bbdcece0f30d42fcf",
            "file": "src/app/services/color-util.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport Color from 'colorjs.io';\r\nimport { to } from 'colorjs.io/fn';\r\nimport { ColorConstructor } from 'colorjs.io/types/src/color';\r\nimport { scaleLinear, sort } from 'd3';\r\nimport { random, reverse, uniqBy, uniq } from 'lodash';\r\nimport {\r\n  TableColorCell,\r\n  TableData,\r\n} from '../palette-table/palette-table.component';\r\n\r\nexport type ColorPair = [string, string];\r\n\r\nexport type ColorCoordArray = [number, number, number];\r\n\r\nexport class ChromaMatchObject {\r\n  success: boolean = false;\r\n  colors: ColorPair | null = null;\r\n  chroma: number | null = null;\r\n}\r\n\r\nexport interface MinMaxLightObject {\r\n  originalCoords: ColorCoordArray;\r\n  lightMin: number;\r\n  lightMax: number;\r\n}\r\n\r\n// export type ColorVariant = [number, number, number];\r\n\r\nexport interface ColorMetaObj {\r\n  lightness: number | string;\r\n  chroma: number | string;\r\n  hue: number | string;\r\n  saturation: number | string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorUtilService {\r\n  parseColor(color: string): ColorConstructor | null {\r\n    let parsedColor: ColorConstructor | null = null;\r\n\r\n    try {\r\n      parsedColor = Color.parse(color);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    return parsedColor;\r\n  }\r\n\r\n  getRgb255Array(color: string) {\r\n    const colorObj = this.parseColor(color);\r\n\r\n    let array255: [number, number, number] | null = null;\r\n\r\n    if (colorObj) {\r\n      const colorCoordsDecimal = colorObj.coords;\r\n\r\n      array255 = [\r\n        Math.round(colorCoordsDecimal[0] * 255),\r\n        Math.round(colorCoordsDecimal[1] * 255),\r\n        Math.round(colorCoordsDecimal[2] * 255),\r\n      ];\r\n    } else {\r\n      console.error(`unable to parse: ${color}`);\r\n    }\r\n\r\n    return array255;\r\n  }\r\n\r\n  createSrgbColor(color: string, lightness: number): string | null {\r\n    let srgbColor: string | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const originalChroma = oklchColor.coords[1];\r\n      const originalHue = oklchColor.coords[2];\r\n\r\n      const targetColor = new Color('oklch', [\r\n        lightness,\r\n        originalChroma,\r\n        originalHue,\r\n      ]);\r\n\r\n      // const inSrgbGamut = targetColor.inGamut('srgb');\r\n\r\n      // if (!inSrgbGamut) {\r\n      //   console.warn(\r\n      //     `OKLCH color in SRGB gamut: ${targetColor.inGamut('srgb')}`\r\n      //   );\r\n      // }\r\n\r\n      const tColorInSrgbGamut = targetColor.toGamut({\r\n        space: 'srgb',\r\n        method: 'oklch.c',\r\n      });\r\n\r\n      const targetColorAsRgbColor = tColorInSrgbGamut.to('srgb');\r\n\r\n      srgbColor = targetColorAsRgbColor.toString({ format: 'hex' });\r\n    }\r\n\r\n    return srgbColor;\r\n  }\r\n\r\n  isInSrgbGamut(oklchColorCoord: ColorCoordArray): Promise<boolean> {\r\n    return new Promise<boolean>((resolve, reject) => {\r\n      try {\r\n        const colorObject = new Color('oklch', oklchColorCoord);\r\n        const variantInGamut = colorObject.inGamut('srgb');\r\n\r\n        resolve(variantInGamut);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  createVariants(color: string): Array<ColorCoordArray> | null {\r\n    let variantCollection: Array<ColorCoordArray> | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n      const lchCooords = oklchColor.coords;\r\n      const colorChroma = lchCooords[1];\r\n      const colorHue = lchCooords[2];\r\n\r\n      // 1) create enough steps of lightness\r\n      const lightnessSteps = 1000;\r\n      const lightMax = 1;\r\n      const lightMin = 0;\r\n      const lightInterval = (lightMax - lightMin) / lightnessSteps;\r\n\r\n      // 2) create all variants of color using constant chroma and hue.\r\n      variantCollection = [];\r\n\r\n      // 2a) this actually creates `lightnessSteps + 1` variants as initial variant has to start at zero.\r\n      for (let i = 0; i <= lightnessSteps; i++) {\r\n        const variantTargetLight = i * lightInterval;\r\n        const variant: ColorCoordArray = [\r\n          variantTargetLight,\r\n          colorChroma,\r\n          colorHue,\r\n        ];\r\n\r\n        variantCollection.push(variant);\r\n      }\r\n    } else {\r\n      console.error(`unable to parse color`);\r\n    }\r\n\r\n    return variantCollection;\r\n  }\r\n\r\n  filterOutOfGamutVariants(\r\n    variants: Array<ColorCoordArray> | null\r\n  ): Promise<Array<ColorCoordArray>> {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (!variants) {\r\n        reject(`no variants`);\r\n      } else {\r\n        let filteringComplete: boolean = false;\r\n\r\n        const filtered = [];\r\n\r\n        for (let i = 0; i < variants.length; i++) {\r\n          const curVariant = variants[i];\r\n\r\n          if (await this.isInSrgbGamut(curVariant)) {\r\n            filtered.push(curVariant);\r\n          }\r\n\r\n          if (i === variants.length - 1) filteringComplete = true;\r\n        }\r\n\r\n        if (filteringComplete) {\r\n          resolve(filtered);\r\n        } else {\r\n          reject(`error`);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  async getMinMaxLight(color: string): Promise<MinMaxLightObject | null> {\r\n    let returnedObject: MinMaxLightObject | null = null;\r\n\r\n    const initVariantCollection = this.createVariants(color);\r\n\r\n    const variantCollection = await this.filterOutOfGamutVariants(\r\n      initVariantCollection\r\n    );\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor && variantCollection.length) {\r\n      const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      const lchCooords = oklchColor.coords;\r\n\r\n      const oklchLightCoordIndex = 0;\r\n      const firstArrayItemIndex = 0;\r\n      const lastArrayItemIndex = variantCollection.length - 1;\r\n\r\n      const minLight =\r\n        variantCollection[firstArrayItemIndex][oklchLightCoordIndex];\r\n      const maxLight =\r\n        variantCollection[lastArrayItemIndex][oklchLightCoordIndex];\r\n\r\n      returnedObject = {\r\n        originalCoords: lchCooords,\r\n        lightMin: minLight,\r\n        lightMax: maxLight,\r\n      };\r\n    } else {\r\n      if (!parsedColor) {\r\n        console.error(`unable to parse color`);\r\n      } else {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n\r\n        const lchCooords = oklchColor.coords;\r\n        returnedObject = {\r\n          originalCoords: lchCooords,\r\n          lightMin: lchCooords[0],\r\n          lightMax: lchCooords[0],\r\n        };\r\n      }\r\n    }\r\n\r\n    return returnedObject;\r\n  }\r\n\r\n  async getRandomColorPair(): Promise<ColorPair> {\r\n    let pair: ColorPair = ['black', 'white'];\r\n\r\n    // ref: oklch.com\r\n    // const targetChroma = 0.11;\r\n    const targetChroma = random(0.11, 0.34, true);\r\n\r\n    const colorOneLight = random(0.25, 0.26, true);\r\n    const colorOneHue = random(0, 360, true);\r\n    const colorTwoLight = random(0.94, 0.95, true);\r\n    const colorTwoHue = random(0, 360, true);\r\n\r\n    const colorOne = new Color('oklch', [\r\n      colorOneLight,\r\n      targetChroma,\r\n      colorOneHue,\r\n    ])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const colorTwo = new Color('oklch', [\r\n      colorTwoLight,\r\n      targetChroma,\r\n      colorTwoHue,\r\n    ])\r\n      .toGamut({ space: 'srgb', method: 'oklch.c' })\r\n      .to('srgb')\r\n      .toString({ format: 'hex' });\r\n\r\n    const initPair: ColorPair = [colorOne, colorTwo];\r\n\r\n    const chromaMatchedPair = await this.matchChromas(initPair);\r\n\r\n    pair = chromaMatchedPair.colors ? chromaMatchedPair.colors : pair;\r\n\r\n    return pair;\r\n  }\r\n\r\n  // This function only adjust the first color of the pair.\r\n  async adjustColorPairForPresentation(pair: ColorPair): Promise<ColorPair> {\r\n    let returnedPair: ColorPair = ['black', 'white'];\r\n\r\n    const colorOne = pair[0];\r\n    const colortwo = pair[1];\r\n\r\n    const parsedColorOne = this.parseColor(colorOne);\r\n\r\n    const colorOneMinMaxLightObj = await this.getMinMaxLight(colorOne);\r\n\r\n    if (parsedColorOne && colorOneMinMaxLightObj) {\r\n      const colorOneTargetLightness =\r\n        colorOneMinMaxLightObj.lightMin +\r\n        (colorOneMinMaxLightObj.lightMax - colorOneMinMaxLightObj.lightMin) / 2;\r\n\r\n      const oklchColorOne = new Color('srgb', parsedColorOne.coords).to(\r\n        'oklch'\r\n      );\r\n\r\n      const adjColorOne = new Color('oklch', [\r\n        colorOneTargetLightness,\r\n        oklchColorOne.coords[1],\r\n        oklchColorOne.coords[2],\r\n      ])\r\n        .to('srgb')\r\n        .toString({ format: 'hex' });\r\n\r\n      returnedPair = [adjColorOne, colortwo];\r\n    } else {\r\n      console.warn('trouble adjusting colors');\r\n    }\r\n\r\n    return returnedPair;\r\n  }\r\n\r\n  async matchChromas(colorpair: ColorPair): Promise<ChromaMatchObject> {\r\n    let pair: ChromaMatchObject = {\r\n      success: false,\r\n      colors: null,\r\n      chroma: null,\r\n    };\r\n\r\n    const colorOneParsed = this.parseColor(colorpair[0]);\r\n    const colorTwoParsed = this.parseColor(colorpair[1]);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneOklch = new Color('srgb', colorOneParsed.coords).to(\r\n        'oklch'\r\n      );\r\n      const colorOneChroma = colorOneOklch.coords[1];\r\n\r\n      const colorTwoOklch = new Color('srgb', colorTwoParsed.coords).to(\r\n        'oklch'\r\n      );\r\n      const colorTwoChroma = colorTwoOklch.coords[1];\r\n\r\n      const colorOneCandCoords: ColorCoordArray = [\r\n        colorOneOklch.coords[0],\r\n        colorTwoChroma,\r\n        colorOneOklch.coords[2],\r\n      ];\r\n      const colorTwoCandCoords: ColorCoordArray = [\r\n        colorTwoOklch.coords[0],\r\n        colorOneChroma,\r\n        colorTwoOklch.coords[2],\r\n      ];\r\n\r\n      const colorOneCandInGamut = await this.isInSrgbGamut(colorOneCandCoords);\r\n      const colorTwoCandInGamut = await this.isInSrgbGamut(colorTwoCandCoords);\r\n\r\n      if (colorOneCandInGamut && !colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          new Color('oklch', colorOneCandCoords)\r\n            .to('srgb')\r\n            .toString({ format: 'hex' }),\r\n          colorpair[1],\r\n        ];\r\n\r\n        pair.chroma = colorOneCandCoords[1];\r\n      }\r\n\r\n      if (!colorOneCandInGamut && colorTwoCandInGamut) {\r\n        pair.success = true;\r\n\r\n        pair.colors = [\r\n          colorpair[0],\r\n          new Color('oklch', colorTwoCandCoords)\r\n            .to('srgb')\r\n            .toString({ format: 'hex' }),\r\n        ];\r\n\r\n        pair.chroma = colorTwoCandCoords[1];\r\n      }\r\n\r\n      if (colorOneCandInGamut && colorTwoCandInGamut) {\r\n        if (colorOneCandCoords[1] > colorTwoCandCoords[1]) {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            new Color('oklch', colorOneCandCoords)\r\n              .to('srgb')\r\n              .toString({ format: 'hex' }),\r\n            colorpair[1],\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        } else {\r\n          pair.success = true;\r\n\r\n          pair.colors = [\r\n            colorpair[0],\r\n            new Color('oklch', colorTwoCandCoords)\r\n              .to('srgb')\r\n              .toString({ format: 'hex' }),\r\n          ];\r\n\r\n          pair.chroma = colorTwoCandCoords[1];\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\"color parsing didn't work out. \");\r\n    }\r\n\r\n    return pair;\r\n  }\r\n\r\n  calcDeltaE(colorOne: string, colorTwo: string): number | null {\r\n    let delta: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawDelta = colorOneObj.deltaE2000(colorTwoObj);\r\n\r\n      // const fixedDelta = rawDelta.toFixed(2);\r\n\r\n      // delta = parseFloat(fixedDelta);\r\n      delta = Math.round(rawDelta);\r\n    }\r\n\r\n    return delta;\r\n  }\r\n\r\n  calcWcag2(colorOne: string, colorTwo: string): number | null {\r\n    let wcag21: number | null = null;\r\n\r\n    const colorOneParsed = this.parseColor(colorOne);\r\n    const colorTwoParsed = this.parseColor(colorTwo);\r\n\r\n    if (colorOneParsed && colorTwoParsed) {\r\n      const colorOneObj = new Color('srgb', colorOneParsed.coords);\r\n      const colorTwoObj = new Color('srgb', colorTwoParsed.coords);\r\n\r\n      const rawWcag21 = colorOneObj.contrast(colorTwoObj, 'WCAG21');\r\n\r\n      const fixedDelta = rawWcag21.toFixed(1);\r\n\r\n      wcag21 = parseFloat(fixedDelta);\r\n    }\r\n\r\n    return wcag21;\r\n  }\r\n\r\n  getColorMeta(color: string): ColorMetaObj | null {\r\n    let meta: ColorMetaObj | null = null;\r\n\r\n    const parsedColor = this.parseColor(color);\r\n\r\n    if (parsedColor) {\r\n      const lchColor = Color.to(parsedColor, 'oklch');\r\n\r\n      meta = {\r\n        lightness: lchColor.coords[0].toFixed(2),\r\n        chroma: lchColor.coords[1].toFixed(2),\r\n        hue: lchColor.coords[2].toFixed(2),\r\n        saturation: ((lchColor.coords[1] / lchColor.coords[0]) * 100).toFixed(\r\n          2\r\n        ),\r\n      };\r\n    }\r\n\r\n    return meta;\r\n  }\r\n\r\n  getMinObjectDimension(apca: number): number {\r\n    let dimension: number = NaN;\r\n\r\n    const absApca = Math.abs(apca);\r\n\r\n    const pixels = [1, 1.5, 2, 3, 4, 6, 8, 10, 15];\r\n    const apcaScores = [90, 75, 60, 50, 45, 30, 25, 20, 15];\r\n    const minLookup = scaleLinear(pixels).domain(apcaScores);\r\n\r\n    const initSize = minLookup(absApca).toFixed(2);\r\n\r\n    dimension = parseFloat(initSize);\r\n\r\n    if (dimension > 15) {\r\n      dimension = 15;\r\n    }\r\n\r\n    if (absApca >= 100) {\r\n      dimension = 0.25;\r\n    }\r\n\r\n    if (absApca < 15) {\r\n      dimension = NaN;\r\n    }\r\n\r\n    return dimension;\r\n  }\r\n\r\n  generateAllOklchVariants(\r\n    color: string,\r\n    lightSteps: number,\r\n    chromaSteps: number\r\n  ): Promise<TableData> {\r\n    return new Promise((resolve, reject) => {\r\n      const parsedColor = this.parseColor(color);\r\n\r\n      const variantsCollection = [];\r\n\r\n      let sortedVariantsCollection = [];\r\n\r\n      if (parsedColor) {\r\n        const oklchColor = Color.to(parsedColor, 'oklch');\r\n        const lchCooords = oklchColor.coords;\r\n        const colorLight = lchCooords[0];\r\n        const colorChroma = lchCooords[1];\r\n        const colorHue = lchCooords[2];\r\n\r\n        const lightMax = 1;\r\n        const lightMin = 0;\r\n        const lightInterval = (lightMax - lightMin) / lightSteps;\r\n\r\n        // calculate light levels\r\n        const rawLightLevels = [];\r\n\r\n        let lLevel = colorLight;\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel + lightInterval;\r\n        } while (lLevel <= lightMax);\r\n\r\n        lLevel = colorLight;\r\n\r\n        do {\r\n          rawLightLevels.push(lLevel);\r\n\r\n          lLevel = lLevel - lightInterval;\r\n        } while (lLevel >= lightMin);\r\n\r\n        const sortedLightLevels = sort(uniq(rawLightLevels));\r\n\r\n        const chromaMax = 0.33;\r\n        const chromaMin = 0;\r\n        const chromaInterval = (chromaMax - chromaMin) / chromaSteps;\r\n\r\n        // calculate chroma levels\r\n        const rawChromaLevels = [];\r\n\r\n        let cLevel = colorChroma;\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel + chromaInterval;\r\n        } while (cLevel <= chromaMax);\r\n\r\n        cLevel = colorChroma;\r\n\r\n        do {\r\n          rawChromaLevels.push(cLevel);\r\n\r\n          cLevel = cLevel - chromaInterval;\r\n        } while (cLevel >= chromaMin);\r\n\r\n        const sortedChromaLevels = sort(uniq(rawChromaLevels));\r\n\r\n        // generate all rows\r\n        for (let i = 0; i < sortedLightLevels.length; i++) {\r\n          const variantRow: Array<TableColorCell> = [];\r\n\r\n          for (let j = 0; j < sortedChromaLevels.length; j++) {\r\n            const targetLightness = sortedLightLevels[i];\r\n\r\n            const targetChroma = sortedChromaLevels[j];\r\n\r\n            const variantColor = new Color('oklch', [\r\n              targetLightness,\r\n              targetChroma,\r\n              colorHue,\r\n            ]);\r\n\r\n            const variantColorinGamut = variantColor.inGamut('srgb');\r\n\r\n            const colorVal = variantColorinGamut\r\n              ? variantColor.to('srgb').toString({ format: 'hex' })\r\n              : null;\r\n\r\n            const deltaE = colorVal ? this.calcDeltaE(colorVal, color) : null;\r\n\r\n            const dLight = colorVal\r\n              ? Math.round(((targetLightness - colorLight) / colorLight) * 100)\r\n              : null;\r\n\r\n            const dChroma = colorVal\r\n              ? Math.round(((targetChroma - colorChroma) / colorChroma) * 100)\r\n              : null;\r\n\r\n            const variantObj: TableColorCell = {\r\n              color: colorVal,\r\n              lightness: targetLightness,\r\n              chroma: targetChroma,\r\n              hue: colorHue,\r\n              deltaE: deltaE,\r\n              deltaChroma: dChroma,\r\n              deltaLightness: dLight,\r\n              // wacg2Comp: NaN,\r\n              // pContrast: NaN,\r\n            };\r\n\r\n            variantRow.push(variantObj);\r\n          }\r\n\r\n          variantsCollection.push(variantRow);\r\n        }\r\n      } else {\r\n        console.error(`could not parse color`);\r\n\r\n        reject(`could not parse color`);\r\n      }\r\n\r\n      // order color rows from light to dark\r\n      sortedVariantsCollection = reverse(variantsCollection);\r\n\r\n      resolve(sortedVariantsCollection);\r\n    });\r\n  }\r\n\r\n  constructor() {}\r\n}\r\n",
            "properties": [
                {
                    "name": "chroma",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "colors",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorPair | null",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ContrastObject",
            "id": "class-ContrastObject-ea5fcea7de7b6c8b068c49b45059094df00af0f115eed7e440dca99bfbf8598c30c711f17cf68a38a13a83d09a34342cc1bb9720cd496fd75afe9cf96b20de75",
            "file": "src/app/color-contrast/color-contrast.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n  inject,\r\n} from '@angular/core';\r\nimport {\r\n  ColorMetricsService,\r\n  ContrastType,\r\n} from '../services/color-metrics.service';\r\nimport { ColorUtilService } from '../services/color-util.service';\r\n\r\nexport class ContrastObject {\r\n  score: number | null = null;\r\n  type: ContrastType | null = null;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-color-contrast',\r\n  templateUrl: './color-contrast.component.html',\r\n  styleUrls: ['./color-contrast.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class ColorContrastComponent implements OnChanges {\r\n  @Input() colorOne: string | null = null;\r\n  @Input() colorTwo: string | null = null;\r\n  @Input() contrastType: ContrastType | 'apca object' | null = null;\r\n\r\n  @Output() contrast = new EventEmitter<ContrastObject>();\r\n\r\n  cus = inject(ColorUtilService);\r\n  cms = inject(ColorMetricsService);\r\n\r\n  contrastScore: number | null = null;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // console.log(changes);\r\n\r\n    if (this.colorOne && this.colorTwo && this.contrastType) {\r\n      const score = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        this.contrastType === 'apca object' ? 'apca' : this.contrastType\r\n      );\r\n\r\n      this.contrastScore = score;\r\n\r\n      if (score) {\r\n        this.contrastScore =\r\n          this.contrastType === 'apca object'\r\n            ? this.cus.getMinObjectDimension(score)\r\n            : this.contrastScore;\r\n      }\r\n    } else {\r\n      console.warn('contrast comp has incomplete bindings');\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "score",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "type",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContrastType | null",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CopyToClipboardEvent",
            "id": "class-CopyToClipboardEvent-419056953d28dea5bfae8ad8c18913755927f22ca97662c0042dbb06193323f890b247be2d0c134f02cd468653c7325e124b216c46ea458f797973dd29bfc31d",
            "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nexport class CopyToClipboardEvent {\r\n  copied: boolean = false;\r\n  color: string | null = null;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-copy-to-clipboard-button',\r\n  templateUrl: './copy-to-clipboard-button.component.html',\r\n  styleUrls: ['./copy-to-clipboard-button.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class CopyToClipboardButtonComponent {\r\n  @Input() color: string | null = null;\r\n  @Output() copyEvent = new EventEmitter<CopyToClipboardEvent>();\r\n\r\n  async copyToClipboard(): Promise<void> {\r\n    if (this.color) {\r\n      const colorSansHex = this.color.replace('#', '');\r\n\r\n      try {\r\n        await navigator.clipboard.writeText(colorSansHex);\r\n\r\n        this.copyEvent.emit({\r\n          copied: true,\r\n          color: colorSansHex,\r\n        });\r\n\r\n        // console.log(this.color, 'copied to clipboard');\r\n      } catch (err) {\r\n        this.copyEvent.emit({\r\n          copied: false,\r\n          color: colorSansHex,\r\n        });\r\n\r\n        console.error('Failed to copy text: ', err);\r\n      }\r\n    } else {\r\n      console.error('nothing to copy');\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "color",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "copied",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DifferencesDataObj",
            "id": "class-DifferencesDataObj-e5ef3d4ca16359eb762da342e7ff9532d279385bbaa74bd516eccff0439fdc830eed2522c8c82f071620fa601268b7b90b2411e8fe5518f507eeca4328172653",
            "file": "src/app/metadata/metadata.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input, OnChanges, inject } from '@angular/core';\r\nimport { ColorUtilService, ColorMetaObj } from '../services/color-util.service';\r\nimport { ColorMetricsService } from '../services/color-metrics.service';\r\n\r\nexport class DifferencesDataObj {\r\n  deltaE: number | null = null;\r\n  wcag2Old: number | null = null;\r\n  wcag2New: number | null = null;\r\n  apca: number | null = null;\r\n}\r\nexport class SuccessesObj {\r\n  text: 'pass' | 'fail' | null = null;\r\n  largeText: 'pass' | 'fail' | null = null;\r\n  objectMinDimension: number | string = NaN;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-metadata',\r\n  templateUrl: './metadata.component.html',\r\n  styleUrls: ['./metadata.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class MetadataComponent implements OnChanges {\r\n  @Input() colorOne: string | null = null;\r\n  @Input() colorTwo: string | null = null;\r\n\r\n  cus = inject(ColorUtilService);\r\n  cms = inject(ColorMetricsService);\r\n\r\n  differences: DifferencesDataObj = {\r\n    deltaE: null,\r\n    wcag2Old: null,\r\n    wcag2New: null,\r\n    apca: NaN,\r\n  };\r\n\r\n  successes: SuccessesObj = {\r\n    text: null,\r\n    largeText: null,\r\n    objectMinDimension: NaN,\r\n  };\r\n\r\n  colorOneMeta: ColorMetaObj | null = null;\r\n\r\n  colorTwoMeta: ColorMetaObj | null = null;\r\n\r\n  getColorMeta() {\r\n    if (this.colorOne && this.colorTwo) {\r\n      if (this.cus.getColorMeta(this.colorOne)) {\r\n        this.colorOneMeta = this.cus.getColorMeta(this.colorOne);\r\n\r\n        this.colorTwoMeta = this.cus.getColorMeta(this.colorTwo);\r\n      }\r\n    } else {\r\n      console.warn(`failed to get color meta`);\r\n    }\r\n  }\r\n\r\n  getColorDifference() {\r\n    if (this.colorOne && this.colorTwo) {\r\n      this.differences.deltaE = this.cus.calcDeltaE(\r\n        this.colorOne,\r\n        this.colorTwo\r\n      );\r\n\r\n      this.differences.wcag2New = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        'bpca'\r\n      );\r\n\r\n      this.differences.wcag2Old = this.cus.calcWcag2(\r\n        this.colorOne,\r\n        this.colorTwo\r\n      );\r\n\r\n      this.differences.apca = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        'apca'\r\n      );\r\n    } else {\r\n      console.warn(`failed to get color differences`);\r\n    }\r\n  }\r\n\r\n  getSuccesses() {\r\n    if (this.colorOne && this.colorTwo) {\r\n      const wcagNew = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        'bpca'\r\n      );\r\n\r\n      const apcaScore = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        'apca'\r\n      );\r\n\r\n      if (wcagNew && apcaScore) {\r\n        if (wcagNew >= 0 && Math.abs(apcaScore) >= 0) {\r\n          this.successes.text = wcagNew >= 4.5 ? 'pass' : 'fail';\r\n\r\n          this.successes.largeText = wcagNew >= 3 ? 'pass' : 'fail';\r\n\r\n          const minDimension = this.cus.getMinObjectDimension(apcaScore);\r\n\r\n          this.successes.objectMinDimension = Number.isNaN(minDimension)\r\n            ? 'invisible'\r\n            : minDimension;\r\n        } else {\r\n          console.warn(`something wonky with calculating scores`);\r\n        }\r\n      } else {\r\n        console.warn(`trouble getting scores`);\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.getColorMeta();\r\n\r\n    this.getColorDifference();\r\n\r\n    this.getSuccesses();\r\n\r\n    // if (this.colorOne && this.colorTwo) {\r\n    //   if (this.differences.apca) {\r\n    //     console.log(this.cus.getMinObjectDimension(this.differences.apca));\r\n    //   }\r\n    // }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "apca",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "deltaE",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "wcag2New",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "wcag2Old",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SuccessesObj",
            "id": "class-SuccessesObj-e5ef3d4ca16359eb762da342e7ff9532d279385bbaa74bd516eccff0439fdc830eed2522c8c82f071620fa601268b7b90b2411e8fe5518f507eeca4328172653",
            "file": "src/app/metadata/metadata.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Input, OnChanges, inject } from '@angular/core';\r\nimport { ColorUtilService, ColorMetaObj } from '../services/color-util.service';\r\nimport { ColorMetricsService } from '../services/color-metrics.service';\r\n\r\nexport class DifferencesDataObj {\r\n  deltaE: number | null = null;\r\n  wcag2Old: number | null = null;\r\n  wcag2New: number | null = null;\r\n  apca: number | null = null;\r\n}\r\nexport class SuccessesObj {\r\n  text: 'pass' | 'fail' | null = null;\r\n  largeText: 'pass' | 'fail' | null = null;\r\n  objectMinDimension: number | string = NaN;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-metadata',\r\n  templateUrl: './metadata.component.html',\r\n  styleUrls: ['./metadata.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class MetadataComponent implements OnChanges {\r\n  @Input() colorOne: string | null = null;\r\n  @Input() colorTwo: string | null = null;\r\n\r\n  cus = inject(ColorUtilService);\r\n  cms = inject(ColorMetricsService);\r\n\r\n  differences: DifferencesDataObj = {\r\n    deltaE: null,\r\n    wcag2Old: null,\r\n    wcag2New: null,\r\n    apca: NaN,\r\n  };\r\n\r\n  successes: SuccessesObj = {\r\n    text: null,\r\n    largeText: null,\r\n    objectMinDimension: NaN,\r\n  };\r\n\r\n  colorOneMeta: ColorMetaObj | null = null;\r\n\r\n  colorTwoMeta: ColorMetaObj | null = null;\r\n\r\n  getColorMeta() {\r\n    if (this.colorOne && this.colorTwo) {\r\n      if (this.cus.getColorMeta(this.colorOne)) {\r\n        this.colorOneMeta = this.cus.getColorMeta(this.colorOne);\r\n\r\n        this.colorTwoMeta = this.cus.getColorMeta(this.colorTwo);\r\n      }\r\n    } else {\r\n      console.warn(`failed to get color meta`);\r\n    }\r\n  }\r\n\r\n  getColorDifference() {\r\n    if (this.colorOne && this.colorTwo) {\r\n      this.differences.deltaE = this.cus.calcDeltaE(\r\n        this.colorOne,\r\n        this.colorTwo\r\n      );\r\n\r\n      this.differences.wcag2New = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        'bpca'\r\n      );\r\n\r\n      this.differences.wcag2Old = this.cus.calcWcag2(\r\n        this.colorOne,\r\n        this.colorTwo\r\n      );\r\n\r\n      this.differences.apca = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        'apca'\r\n      );\r\n    } else {\r\n      console.warn(`failed to get color differences`);\r\n    }\r\n  }\r\n\r\n  getSuccesses() {\r\n    if (this.colorOne && this.colorTwo) {\r\n      const wcagNew = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        'bpca'\r\n      );\r\n\r\n      const apcaScore = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        'apca'\r\n      );\r\n\r\n      if (wcagNew && apcaScore) {\r\n        if (wcagNew >= 0 && Math.abs(apcaScore) >= 0) {\r\n          this.successes.text = wcagNew >= 4.5 ? 'pass' : 'fail';\r\n\r\n          this.successes.largeText = wcagNew >= 3 ? 'pass' : 'fail';\r\n\r\n          const minDimension = this.cus.getMinObjectDimension(apcaScore);\r\n\r\n          this.successes.objectMinDimension = Number.isNaN(minDimension)\r\n            ? 'invisible'\r\n            : minDimension;\r\n        } else {\r\n          console.warn(`something wonky with calculating scores`);\r\n        }\r\n      } else {\r\n        console.warn(`trouble getting scores`);\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.getColorMeta();\r\n\r\n    this.getColorDifference();\r\n\r\n    this.getSuccesses();\r\n\r\n    // if (this.colorOne && this.colorTwo) {\r\n    //   if (this.differences.apca) {\r\n    //     console.log(this.cus.getMinObjectDimension(this.differences.apca));\r\n    //   }\r\n    // }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "largeText",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"pass\" | \"fail\" | null",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "objectMinDimension",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "text",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"pass\" | \"fail\" | null",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "TableColorCell",
            "id": "class-TableColorCell-30c9ccde20d791ae5d800c21dd5719c14f9d84147637a9213c9d619ea3dc7d39f35fb25baf94be1f669434629bb2ae936e94c8e932b77840a6d63a24e13207bc",
            "file": "src/app/palette-table/palette-table.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  AfterViewInit,\r\n  Input,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter,\r\n  inject,\r\n} from '@angular/core';\r\nimport { ColorUtilService } from '../services/color-util.service';\r\n\r\nexport class TableColorCell {\r\n  color: string | null = null;\r\n  lightness: number = NaN;\r\n  chroma: number = NaN;\r\n  hue: number = NaN;\r\n  deltaE: number | null = null;\r\n  deltaLightness: number | null = null;\r\n  deltaChroma: number | null = null;\r\n\r\n  // pContrast: number = NaN;\r\n  // wacg2Comp: number = NaN;\r\n}\r\n\r\nexport type TableRow = Array<TableColorCell>;\r\n\r\nexport type TableData = Array<TableRow>;\r\n\r\n@Component({\r\n  selector: 'app-palette-table',\r\n  templateUrl: './palette-table.component.html',\r\n  styleUrls: ['./palette-table.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class PaletteTableComponent implements OnInit, OnChanges {\r\n  @Input() color: string | null = null;\r\n\r\n  @Output() selectedColor = new EventEmitter<TableColorCell>();\r\n\r\n  cus = inject(ColorUtilService);\r\n\r\n  lightSteps = 5;\r\n  chromaSteps = 14;\r\n\r\n  tableHeaders: Array<number> = [];\r\n\r\n  // An array of arrays where each array is a 'row' of data, and objects are cells of data.\r\n  dataStruct: TableData = [];\r\n\r\n  getTableColumnHeaders() {\r\n    const headers = [];\r\n\r\n    const sampleRow = this.dataStruct[0];\r\n\r\n    for (let i = 0; i < sampleRow.length; i++) {\r\n      const curCell = sampleRow[i];\r\n\r\n      headers.push(curCell.chroma);\r\n    }\r\n\r\n    this.tableHeaders = headers;\r\n  }\r\n\r\n  selectColor(rowNum: number, columnNum: number) {\r\n    const targetColor = this.dataStruct[rowNum][columnNum];\r\n\r\n    // console.log(rowNum, columnNum);\r\n    // console.log(targetColor.color);\r\n\r\n    this.selectedColor.emit(targetColor);\r\n  }\r\n\r\n  getTextColor(bkgdColor: string) {\r\n    return (this.cus.calcWcag2('white', bkgdColor) as number) >= 7\r\n      ? 'white'\r\n      : 'black';\r\n  }\r\n\r\n  async getTableData() {\r\n    if (this.color) {\r\n      this.dataStruct = await this.cus.generateAllOklchVariants(\r\n        this.color,\r\n        this.lightSteps,\r\n        this.chromaSteps\r\n      );\r\n\r\n      this.getTableColumnHeaders();\r\n    } else {\r\n      console.warn(`no color for palette table`);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // console.log(`-----OnChanges`);\r\n\r\n    this.getTableData();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // console.log(`-----OnInit`);\r\n    // this.getTableData();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "chroma",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "color",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "deltaChroma",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "deltaE",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "deltaLightness",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "hue",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "lightness",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AlertComponent",
            "id": "component-AlertComponent-cdb329222a8080adf986a50be0647ac772ed7ef12c7f269903868495190f685d352c2aa4a8ae07fc959fbbe714fda10d15184140203fc0b9bf6f101b9b7fb31c",
            "file": "src/app/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert",
            "styleUrls": [
                "./alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alertMessage",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "AlertMessagObj | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "alertClosed",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "showAlert",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "timeout",
                    "defaultValue": "NaN",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "uniqId",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "generateRandomString",
                    "args": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideAlert",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { random, sample, times } from 'lodash';\r\n\r\nexport interface AlertMessagObj {\r\n  message: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-alert',\r\n  templateUrl: './alert.component.html',\r\n  styleUrls: ['./alert.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class AlertComponent implements OnInit, OnChanges {\r\n  @Input() alertMessage: AlertMessagObj | null = null;\r\n  @Output() alertClosed = new EventEmitter<boolean>();\r\n\r\n  showAlert: boolean = false;\r\n\r\n  uniqId: string = '';\r\n\r\n  timeout: number = NaN;\r\n\r\n  generateRandomString(length: number) {\r\n    return times(length, () => random(35).toString(36)).join('');\r\n  }\r\n\r\n  hideAlert() {\r\n    this.showAlert = false;\r\n\r\n    this.uniqId = '';\r\n\r\n    this.alertClosed.emit(true);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.uniqId = this.generateRandomString(12);\r\n\r\n    this.showAlert = true;\r\n\r\n    if (this.timeout) {\r\n      clearTimeout(this.timeout);\r\n    }\r\n\r\n    this.timeout = setTimeout(() => {\r\n      this.showAlert = false;\r\n    }, 5000) as unknown as number;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.showAlert = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  .alert-content {\r\n    box-shadow: 0 0 4px 0 black;\r\n    border-bottom: transparent;\r\n    border-radius: 5px 5px 0 0;\r\n    background-color: white;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 0.3rem;\r\n    gap: 0.3rem;\r\n    opacity: 1;\r\n    transform: scale(1);\r\n    animation-name: show-alert;\r\n    animation-duration: 200ms;\r\n\r\n    p {\r\n      margin: 0;\r\n      text-align: center;\r\n    }\r\n\r\n    button {\r\n      font-family: var(--body-font);\r\n      min-height: var(--min-hit-dimension-aaa);\r\n      min-width: var(--min-hit-dimension-aaa);\r\n      border: transparent 2px solid;\r\n      border-radius: 5px;\r\n      background-color: white;\r\n\r\n      &:hover {\r\n        background-color: #dfdfdf;\r\n      }\r\n    }\r\n\r\n    .msg-id {\r\n      color: #717171;\r\n      font-size: var(--min-text-size);\r\n    }\r\n\r\n    &:empty {\r\n      display: none;\r\n      opacity: 0;\r\n      transform: translateY(100%);\r\n    }\r\n  }\r\n\r\n  @keyframes show-alert {\r\n    from {\r\n      display: none;\r\n      opacity: 0;\r\n      transform: translateY(100%);\r\n    }\r\n\r\n    to {\r\n      display: flex;\r\n      opacity: 1;\r\n      transform: translateY(0);\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./alert.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"comp-container\" role=\"alert\">\r\n  <div class=\"alert-content\">\r\n    @if (showAlert){\r\n    <p [innerText]=\"alertMessage?.message\"></p>\r\n    <p class=\"msg-id\">Message ID: {{ uniqId }}</p>\r\n    <!-- <button (click)=\"hideAlert()\"><span>Dismiss</span></button> -->\r\n\r\n    }\r\n    <!-- <ng-container\r\n    >\r\n    </ng-container> -->\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-3ce07a85dce9e6d3d247a167353fa96f8ff981f39258a464f34716fc8cb7ffbd3e0d1c8245572129986d695d3a585f51aa82eef46694ffbaac63658c2d1418d7",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colorPickerOneComparedColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "colorPickerOneSelectedColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "colorPickerTwoComparedColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "colorPickerTwoSelectedColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "constantChroma",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "contrastType",
                    "defaultValue": "'apca'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContrastType | \"apca object\"",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "currentAlertMessage",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AlertMessagObj | null",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "cus",
                    "defaultValue": "inject(ColorUtilService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "resetSlider",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ResetObject | null",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "showGradient",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "alertUser",
                    "args": [
                        {
                            "name": "message",
                            "type": "AlertMessagObj",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "AlertMessagObj",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleColorInputInput",
                    "args": [
                        {
                            "name": "inputNumber",
                            "type": "\"One\" | \"Two\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputNumber",
                            "type": "\"One\" | \"Two\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleColorPaletteButtonEvent",
                    "args": [
                        {
                            "name": "paletteChartNum",
                            "type": "\"One\" | \"Two\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "TableColorCell",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "paletteChartNum",
                            "type": "\"One\" | \"Two\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "TableColorCell",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleCopyEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "CopyToClipboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CopyToClipboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSliderInputInput",
                    "args": [
                        {
                            "name": "inputNumber",
                            "type": "\"One\" | \"Two\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputNumber",
                            "type": "\"One\" | \"Two\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "matchChromas",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "radioChange",
                    "args": [
                        {
                            "name": "changeTo",
                            "type": "ContrastType | \"apca object\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changeTo",
                            "type": "ContrastType | \"apca object\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetSliders",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setRandomColorPair",
                    "args": [
                        {
                            "name": "initialAppColors",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "initialAppColors",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "swapColors",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleConstantChroma",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleShowGradient",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "AlertComponent",
                    "type": "component"
                },
                {
                    "name": "ColorContrastComponent",
                    "type": "component"
                },
                {
                    "name": "ColorPickerComponent",
                    "type": "component"
                },
                {
                    "name": "ColorSliderComponent",
                    "type": "component"
                },
                {
                    "name": "CopyToClipboardButtonComponent",
                    "type": "component"
                },
                {
                    "name": "MetadataComponent",
                    "type": "component"
                },
                {
                    "name": "PaletteTableComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\n\r\nimport { ContrastType } from './services/color-metrics.service';\r\nimport { ColorUtilService } from './services/color-util.service';\r\nimport { CopyToClipboardEvent } from './copy-to-clipboard-button/copy-to-clipboard-button.component';\r\nimport { ResetObject } from './color-slider/color-slider.component';\r\nimport { AlertMessagObj } from './alert/alert.component';\r\nimport { TableColorCell } from './palette-table/palette-table.component';\r\n\r\nimport { AlertComponent } from './alert/alert.component';\r\nimport { ColorContrastComponent } from './color-contrast/color-contrast.component';\r\nimport { ColorPickerComponent } from './color-picker/color-picker.component';\r\nimport { ColorSliderComponent } from './color-slider/color-slider.component';\r\nimport { CopyToClipboardButtonComponent } from './copy-to-clipboard-button/copy-to-clipboard-button.component';\r\nimport { MetadataComponent } from './metadata/metadata.component';\r\nimport { PaletteTableComponent } from './palette-table/palette-table.component';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [\r\n    RouterOutlet,\r\n    AlertComponent,\r\n    ColorContrastComponent,\r\n    ColorPickerComponent,\r\n    ColorSliderComponent,\r\n    CopyToClipboardButtonComponent,\r\n    MetadataComponent,\r\n    PaletteTableComponent,\r\n  ],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss',\r\n})\r\nexport class AppComponent {\r\n  cus = inject(ColorUtilService);\r\n\r\n  colorPickerOneSelectedColor: string | null = null;\r\n  colorPickerOneComparedColor: string | null = null;\r\n\r\n  colorPickerTwoSelectedColor: string | null = null;\r\n  colorPickerTwoComparedColor: string | null = null;\r\n\r\n  contrastType: ContrastType | 'apca object' = 'apca';\r\n\r\n  resetSlider: ResetObject | null = null;\r\n\r\n  constantChroma: boolean = true;\r\n  showGradient: boolean = true;\r\n\r\n  currentAlertMessage: AlertMessagObj | null = null;\r\n\r\n  handleColorInputInput(inputNumber: 'One' | 'Two', event: string) {\r\n    if (inputNumber === 'One') {\r\n      this.colorPickerOneSelectedColor = event;\r\n    }\r\n\r\n    if (inputNumber === 'Two') {\r\n      this.colorPickerTwoSelectedColor = event;\r\n    }\r\n  }\r\n\r\n  handleSliderInputInput(inputNumber: 'One' | 'Two', event: string | null) {\r\n    if (inputNumber === 'One') {\r\n      this.colorPickerOneComparedColor = event;\r\n    }\r\n\r\n    if (inputNumber === 'Two') {\r\n      this.colorPickerTwoComparedColor = event;\r\n    }\r\n  }\r\n\r\n  handleCopyEvent(event: CopyToClipboardEvent) {\r\n    if (event.copied) {\r\n      this.alertUser({ message: `${event.color} copied to clipboard.` });\r\n    } else {\r\n      console.error(`color copy error.`);\r\n    }\r\n  }\r\n\r\n  handleColorPaletteButtonEvent(\r\n    paletteChartNum: 'One' | 'Two',\r\n    event: TableColorCell\r\n  ) {\r\n    if (paletteChartNum === 'One') {\r\n      this.colorPickerOneSelectedColor = event.color;\r\n    }\r\n\r\n    if (paletteChartNum === 'Two') {\r\n      this.colorPickerTwoSelectedColor = event.color;\r\n    }\r\n\r\n    this.alertUser({\r\n      message: `Color picker ${paletteChartNum} changed to ${event.color}`,\r\n    });\r\n  }\r\n\r\n  radioChange(changeTo: ContrastType | 'apca object') {\r\n    console.log(changeTo);\r\n    this.contrastType = changeTo;\r\n  }\r\n\r\n  toggleConstantChroma(event: Event) {\r\n    const inputElement = event.target as HTMLInputElement;\r\n    const checked = inputElement.checked;\r\n\r\n    this.constantChroma = checked ? true : false;\r\n\r\n    this.resetSliders();\r\n  }\r\n\r\n  toggleShowGradient(event: Event) {\r\n    const inputElement = event.target as HTMLInputElement;\r\n    const checked = inputElement.checked;\r\n\r\n    this.showGradient = checked ? true : false;\r\n  }\r\n\r\n  swapColors() {\r\n    const getColor = (type: 'fg' | 'bg'): string | null => {\r\n      let color: string | null = null;\r\n\r\n      switch (type) {\r\n        case 'fg':\r\n          color = this.colorPickerOneSelectedColor;\r\n\r\n          break;\r\n        case 'bg':\r\n          color = this.colorPickerTwoSelectedColor;\r\n\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      return color;\r\n    };\r\n\r\n    const oldPairing = {\r\n      foreground: getColor('fg'),\r\n      background: getColor('bg'),\r\n    };\r\n\r\n    const newPairing = {\r\n      foreground: oldPairing.background,\r\n      background: oldPairing.foreground,\r\n    };\r\n\r\n    if (newPairing.foreground && newPairing.background) {\r\n      this.colorPickerOneSelectedColor = newPairing.foreground;\r\n\r\n      this.colorPickerTwoSelectedColor = newPairing.background;\r\n\r\n      this.alertUser({ message: 'Swapped foreground and background colors.' });\r\n    } else {\r\n      console.error('swapping colors went badly. . .');\r\n    }\r\n  }\r\n\r\n  async setRandomColorPair(initialAppColors?: boolean) {\r\n    const initColorPair = await this.cus.getRandomColorPair();\r\n\r\n    const randomColorPair = await this.cus.adjustColorPairForPresentation(\r\n      initColorPair\r\n    );\r\n\r\n    setTimeout(() => {\r\n      this.colorPickerOneSelectedColor = randomColorPair[0];\r\n      this.colorPickerTwoSelectedColor = randomColorPair[1];\r\n\r\n      if (!initialAppColors) {\r\n        this.alertUser({\r\n          message: `Random color pair generated: ${randomColorPair[0]}, and ${randomColorPair[1]}`,\r\n        });\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  resetSliders() {\r\n    this.resetSlider = { reset: true };\r\n\r\n    this.alertUser({ message: 'Resetted color sliders to initial states.' });\r\n  }\r\n\r\n  async matchChromas() {\r\n    if (this.colorPickerOneSelectedColor && this.colorPickerTwoSelectedColor) {\r\n      const matchedColors = await this.cus.matchChromas([\r\n        this.colorPickerOneSelectedColor,\r\n        this.colorPickerTwoSelectedColor,\r\n      ]);\r\n\r\n      if (\r\n        matchedColors.success &&\r\n        matchedColors.colors &&\r\n        matchedColors.chroma\r\n      ) {\r\n        this.colorPickerOneSelectedColor = matchedColors.colors[0];\r\n        this.colorPickerTwoSelectedColor = matchedColors.colors[1];\r\n\r\n        this.alertUser({\r\n          message: `Chroma matched foreground and background colors.`,\r\n        });\r\n      } else {\r\n        this.alertUser({ message: 'Unable to match  chroma across colors.' });\r\n      }\r\n    }\r\n  }\r\n\r\n  alertUser(message: AlertMessagObj) {\r\n    this.currentAlertMessage = message;\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngAfterViewInit(): void {\r\n    this.setRandomColorPair(true);\r\n  }\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"app-container\">\r\n  <section class=\"title-and-sliders\">\r\n    <div class=\"title-and-score\">\r\n      <h1>Colors Contrast</h1>\r\n      <app-color-contrast\r\n        [colorOne]=\"colorPickerOneComparedColor\"\r\n        [colorTwo]=\"colorPickerTwoComparedColor\"\r\n        [contrastType]=\"contrastType\"\r\n      ></app-color-contrast>\r\n    </div>\r\n\r\n    <details class=\"app-instruction-start\">\r\n      <summary>How to use this app.</summary>\r\n\r\n      <p>\r\n        <span class=\"visual-header\">Quick Start:</span>\r\n        Input a Foreground and Background Color using the color inputs in the\r\n        next section. You can then us the slider inputs, and Copy to Clipboard\r\n        buttons to:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Change the tone of your colors to achieve your desired combination of\r\n          contrast and tone.\r\n        </li>\r\n\r\n        <li>Copy each color to the clipboard for use in other applications.</li>\r\n      </ul>\r\n\r\n      <p>\r\n        <a href=\"#additional-instructions\"\r\n          >Screen reader–specific workflows, low vision user notes, and more\r\n          in-depth instructions.</a\r\n        >\r\n      </p>\r\n    </details>\r\n\r\n    <hr class=\"instructions-hr\" />\r\n\r\n    <h2 class=\"sr-only\">Main Color Controls</h2>\r\n\r\n    <h3>Foreground Color</h3>\r\n\r\n    <div class=\"slide-group\">\r\n      <app-color-picker\r\n        [inputId]=\"'cp-0'\"\r\n        [inputName]=\"'Foreground Color'\"\r\n        [comparedColor]=\"colorPickerOneComparedColor\"\r\n        (selectedColor)=\"handleColorInputInput('One', $event)\"\r\n        [deltaColor]=\"colorPickerOneSelectedColor\"\r\n      ></app-color-picker>\r\n      <app-color-slider\r\n        [id]=\"'slider-0'\"\r\n        [name]=\"'Foreground Slider'\"\r\n        [color]=\"colorPickerOneSelectedColor\"\r\n        [constantChroma]=\"constantChroma\"\r\n        (colorVariant)=\"handleSliderInputInput('One', $event)\"\r\n        [resetSlider]=\"resetSlider\"\r\n        [showGradient]=\"showGradient\"\r\n      ></app-color-slider>\r\n      <app-copy-to-clipboard-button\r\n        [color]=\"colorPickerOneComparedColor\"\r\n        (copyEvent)=\"handleCopyEvent($event)\"\r\n      ></app-copy-to-clipboard-button>\r\n    </div>\r\n\r\n    <details class=\"pallette-viz-container\">\r\n      <summary>Foreground LCH Limits</summary>\r\n\r\n      <div class=\"content\">\r\n        <app-palette-table\r\n          [color]=\"colorPickerOneSelectedColor\"\r\n          (selectedColor)=\"handleColorPaletteButtonEvent('One', $event)\"\r\n        ></app-palette-table>\r\n      </div>\r\n    </details>\r\n\r\n    <h3>Background Color</h3>\r\n\r\n    <div class=\"slide-group\">\r\n      <app-color-picker\r\n        [inputId]=\"'cp-1'\"\r\n        [inputName]=\"'Background Color'\"\r\n        [comparedColor]=\"colorPickerTwoComparedColor\"\r\n        [deltaColor]=\"colorPickerTwoSelectedColor\"\r\n        (selectedColor)=\"handleColorInputInput('Two', $event)\"\r\n      ></app-color-picker>\r\n      <app-color-slider\r\n        [id]=\"'slider-1'\"\r\n        [name]=\"'Backgroundground Slider'\"\r\n        [color]=\"colorPickerTwoSelectedColor\"\r\n        [constantChroma]=\"constantChroma\"\r\n        (colorVariant)=\"handleSliderInputInput('Two', $event)\"\r\n        [resetSlider]=\"resetSlider\"\r\n        [showGradient]=\"showGradient\"\r\n      ></app-color-slider>\r\n      <app-copy-to-clipboard-button\r\n        [color]=\"colorPickerTwoComparedColor\"\r\n        (copyEvent)=\"handleCopyEvent($event)\"\r\n      ></app-copy-to-clipboard-button>\r\n    </div>\r\n\r\n    <details class=\"pallette-viz-container\">\r\n      <summary>Background LCH Limits</summary>\r\n\r\n      <div class=\"content\">\r\n        <app-palette-table\r\n          [color]=\"colorPickerTwoSelectedColor\"\r\n          (selectedColor)=\"handleColorPaletteButtonEvent('Two', $event)\"\r\n        ></app-palette-table>\r\n      </div>\r\n    </details>\r\n  </section>\r\n\r\n  <section class=\"quick-actions\">\r\n    <button\r\n      (click)=\"swapColors()\"\r\n      [disabled]=\"!colorPickerOneSelectedColor || !colorPickerTwoSelectedColor\"\r\n    >\r\n      <span class=\"sr-only\">Swap Selected Colors</span>\r\n      <svg\r\n        class=\"swap-colors\"\r\n        aria-hidden=\"true\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 32 32\"\r\n        x=\"0px\"\r\n        y=\"0px\"\r\n      >\r\n        <defs>\r\n          <style>\r\n            .cls-1 {\r\n              fill: none;\r\n            }\r\n          </style>\r\n        </defs>\r\n        <g>\r\n          <path\r\n            d=\"M6.29,8.71a1,1,0,0,1,0-1.42l4-4a1,1,0,1,1,1.42,1.42L9.41,7H19a7,7,0,0,1,7,7,1,1,0,0,1-2,0,5,5,0,0,0-5-5H9.41l2.3,2.29a1,1,0,0,1,0,1.42,1,1,0,0,1-1.42,0ZM21.71,19.29a1,1,0,0,0-1.42,1.42L22.59,23H13a5,5,0,0,1-5-5,1,1,0,0,0-2,0,7,7,0,0,0,7,7h9.59l-2.3,2.29a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l4-4a1,1,0,0,0,0-1.42Z\"\r\n          />\r\n          <rect class=\"cls-1\" width=\"32\" height=\"32\" />\r\n        </g>\r\n      </svg>\r\n    </button>\r\n\r\n    <button (click)=\"matchChromas()\">\r\n      <span class=\"sr-only\">Harmonize Color Pair To Same Chroma</span>\r\n      <svg\r\n        aria-hidden=\"true\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n        version=\"1.1\"\r\n        x=\"0px\"\r\n        y=\"0px\"\r\n        viewBox=\"0 0 64 64\"\r\n        enable-background=\"new 0 0 64 64\"\r\n        xml:space=\"preserve\"\r\n      >\r\n        <path\r\n          d=\"M43,39c1.66,0,3,1.34,3,3s-1.34,3-3,3H33c-1.66,0-3-1.34-3-3s1.34-3,3-3H43z\"\r\n        />\r\n        <path\r\n          d=\"M20,17v3h-3c-1.66,0-3,1.34-3,3s1.34,3,3,3h3v3c0,1.66,1.34,3,3,3s3-1.34,3-3v-3h3c1.66,0,3-1.34,3-3s-1.34-3-3-3h-3v-3  c0-1.66-1.34-3-3-3S20,15.34,20,17z M56,12v40c0,2.21-1.79,4-4,4H12c-2.21,0-4-1.79-4-4V12c0-2.21,1.79-4,4-4h40  C54.21,8,56,9.79,56,12z M50,50V14L14,50H50z\"\r\n        />\r\n      </svg>\r\n    </button>\r\n\r\n    <button (click)=\"resetSliders()\">\r\n      <span class=\"sr-only\">Reset Color Sliders</span>\r\n      <svg\r\n        class=\"reset-sliders\"\r\n        aria-hidden=\"true\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 24 24\"\r\n        x=\"0px\"\r\n        y=\"0px\"\r\n      >\r\n        <path\r\n          d=\"M12,3A8.92277,8.92277,0,0,0,4.5,7.05823V5H3v5H8V8.5H5.38165A7.4775,7.4775,0,1,1,4.5,12H3a9,9,0,1,0,9-9Z\"\r\n        />\r\n      </svg>\r\n    </button>\r\n\r\n    <button (click)=\"setRandomColorPair()\">\r\n      <span class=\"sr-only\">Create Random Color Pair</span>\r\n      <svg\r\n        aria-hidden=\"true\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n        xml:space=\"preserve\"\r\n        version=\"1.1\"\r\n        style=\"\r\n          shape-rendering: geometricPrecision;\r\n          text-rendering: geometricPrecision;\r\n          image-rendering: optimizeQuality;\r\n        \"\r\n        viewBox=\"0 0 333 333\"\r\n        x=\"0px\"\r\n        y=\"0px\"\r\n        fill-rule=\"evenodd\"\r\n        clip-rule=\"evenodd\"\r\n      >\r\n        <defs>\r\n          <style type=\"text/css\">\r\n            .str0 {\r\n              stroke: var(--min-body-text-black);\r\n              stroke-width: 14;\r\n            }\r\n            .fil0 {\r\n              fill: none;\r\n            }\r\n            .fil1 {\r\n              fill: var(--min-body-text-black);\r\n            }\r\n          </style>\r\n        </defs>\r\n        <g>\r\n          <rect\r\n            class=\"fil0 str0\"\r\n            x=\"24\"\r\n            y=\"167\"\r\n            width=\"138\"\r\n            height=\"138\"\r\n            rx=\"26\"\r\n            ry=\"26\"\r\n          />\r\n          <g>\r\n            <g>\r\n              <circle class=\"fil1\" cx=\"118\" cy=\"199\" r=\"12\" />\r\n              <circle class=\"fil1\" cx=\"118\" cy=\"236\" r=\"12\" />\r\n              <circle class=\"fil1\" cx=\"118\" cy=\"272\" r=\"12\" />\r\n            </g>\r\n            <g>\r\n              <circle class=\"fil1\" cx=\"67\" cy=\"199\" r=\"12\" />\r\n              <circle class=\"fil1\" cx=\"67\" cy=\"236\" r=\"12\" />\r\n              <circle class=\"fil1\" cx=\"67\" cy=\"272\" r=\"12\" />\r\n            </g>\r\n          </g>\r\n          <rect\r\n            class=\"fil0 str0\"\r\n            transform=\"matrix(0.707107 -0.707107 0.707107 0.707107 125.466 115.35)\"\r\n            width=\"138\"\r\n            height=\"138\"\r\n            rx=\"26\"\r\n            ry=\"26\"\r\n          />\r\n          <circle\r\n            class=\"fil1\"\r\n            transform=\"matrix(0.876112 -0.876112 0.876112 0.876112 222.904 115.349)\"\r\n            r=\"10\"\r\n          />\r\n        </g>\r\n      </svg>\r\n    </button>\r\n  </section>\r\n\r\n  <hr />\r\n\r\n  <section class=\"options\">\r\n    <h2>Options</h2>\r\n\r\n    <div class=\"options\">\r\n      <details>\r\n        <summary>Change how Colors Contrast works.</summary>\r\n        <div>\r\n          <h3>Colors Contrast Value</h3>\r\n\r\n          <div class=\"radio-section\">\r\n            <div class=\"radio-group\">\r\n              <label for=\"ct-apca\"\r\n                >Perceptual<span class=\"sr-only\"\r\n                  >; this affects a visual element not percievable to\r\n                  screenreaders for good UX—same value is obtainable on Color\r\n                  Metadata section under Differences.</span\r\n                >\r\n              </label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"contrastType\"\r\n                id=\"ct-apca\"\r\n                (change)=\"radioChange('apca')\"\r\n                checked\r\n              />\r\n            </div>\r\n            <div class=\"radio-group\">\r\n              <label for=\"ct-bpca\"\r\n                >WCAG 2 compatible<span class=\"sr-only\"\r\n                  >; this affects a visual element not percievable to\r\n                  screenreaders for good UX—same value is obtainable on Color\r\n                  Metadata section under Differences.</span\r\n                >\r\n              </label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"contrastType\"\r\n                id=\"ct-bpca\"\r\n                (change)=\"radioChange('bpca')\"\r\n              />\r\n            </div>\r\n            <div class=\"radio-group\">\r\n              <label for=\"ct-apca-object\"\r\n                >Object\r\n                <span class=\"sr-only\"\r\n                  >; this affects a visual element not percievable to\r\n                  screenreaders for good UX—same value is obtainable on Color\r\n                  Metadata section under Differences.</span\r\n                >\r\n              </label>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"contrastType\"\r\n                id=\"ct-apca-object\"\r\n                (change)=\"radioChange('apca object')\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          <h3>Color Sliders</h3>\r\n\r\n          <div class=\"checkbox-section\">\r\n            <div class=\"checkbox-group\">\r\n              <label for=\"option-const-chroma\">Constant chroma</label>\r\n              <input\r\n                checked\r\n                type=\"checkbox\"\r\n                name=\"Constant Chroma Toggle\"\r\n                id=\"option-const-chroma\"\r\n                (change)=\"toggleConstantChroma($event)\"\r\n              />\r\n            </div>\r\n            <div class=\"checkbox-group\">\r\n              <label for=\"option-show-grad\">Show Gradient</label>\r\n              <input\r\n                checked\r\n                type=\"checkbox\"\r\n                name=\"Show Gradient Toggle\"\r\n                id=\"option-show-grad\"\r\n                (change)=\"toggleShowGradient($event)\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </details>\r\n    </div>\r\n  </section>\r\n\r\n  <hr />\r\n\r\n  <section class=\"metadata\">\r\n    <h2 id=\"color-metadata\">Color Metadata</h2>\r\n\r\n    <details>\r\n      <summary>Descriptive data about your inputted colors.</summary>\r\n\r\n      <app-metadata\r\n        [colorOne]=\"colorPickerOneComparedColor\"\r\n        [colorTwo]=\"colorPickerTwoComparedColor\"\r\n      ></app-metadata>\r\n    </details>\r\n  </section>\r\n\r\n  <hr />\r\n\r\n  <section class=\"instructions\">\r\n    <h2 id=\"additional-instructions\">Additional Instructions</h2>\r\n\r\n    <details>\r\n      <summary>Detailed instructions and workflows.</summary>\r\n\r\n      <div class=\"content\">\r\n        <p>\r\n          <span class=\"visual-header\">Screen Reader Users:</span> Input a\r\n          Foreground Color and a Background Color in the Main Color Controls\r\n          section. You can then:\r\n        </p>\r\n        <ol>\r\n          <li>\r\n            Adjust your inputted colors lighter and darker using the slider\r\n            inputs. . .\r\n          </li>\r\n          <li>\r\n            . . .while checking contrast and color descriptions in the\r\n            <a href=\"#color-metatdata\">Color Metadata</a> section.\r\n          </li>\r\n        </ol>\r\n\r\n        <p>\r\n          <span class=\"visual-header\">Low Vision Users:</span> We designed\r\n          Colors Contrast from the ground up with you in mind. You will notice\r\n          that zooming your browser still allows you to see the most important\r\n          parts of the UI:\r\n        </p>\r\n        <ul>\r\n          <li>The contrast value</li>\r\n          <li>The color inputs</li>\r\n          <li>The slider inputs</li>\r\n          <li>The Copy to Clipboard buttons</li>\r\n        </ul>\r\n\r\n        <p>\r\n          <span class=\"visual-header\"> Random Color Pairs:</span> Colors\r\n          Contrast starts you off with a random pair of colors that passes most\r\n          if not all levels of Accessible Contrast.\r\n        </p>\r\n        <ul>\r\n          <li>\r\n            Use the slider inputs to create tones of those colors for each\r\n            contrast level you need.\r\n          </li>\r\n          <li>\r\n            Try swapping Foreground, and Background colors for a dark mode pair.\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </details>\r\n  </section>\r\n\r\n  <hr />\r\n\r\n  <section class=\"notes\">\r\n    <h2>Notes</h2>\r\n\r\n    <details>\r\n      <summary>Details about app features.</summary>\r\n\r\n      <div class=\"content\">\r\n        <p id=\"notes-lch-limits\">\r\n          <span class=\"visual-header\">LCH Limits:</span>\r\n          This feature displays variants of your selected color. Unlike most\r\n          color pickers, this feature only shows you what is in the sRGB color\r\n          gamut. This allows you to know:\r\n        </p>\r\n        <ul>\r\n          <li>\r\n            How your choice of hue affects your options for lightness and color\r\n            strength. For example, strong yellows are only possible at high\r\n            lightness levels.\r\n          </li>\r\n          <li>\r\n            How lightness and color strength relate to each other for your\r\n            selected hue.\r\n          </li>\r\n        </ul>\r\n        <p>\r\n          This feature uses an HTML table element that should allow screen\r\n          reader users to:\r\n        </p>\r\n        <ul>\r\n          <li>\r\n            Use column and row headers to examine and choose specific variants.\r\n          </li>\r\n          <li>Read various color metadata.</li>\r\n        </ul>\r\n\r\n        <p id=\"notes-object\">\r\n          <span class=\"visual-header\">Object:</span> This readout shows two\r\n          different values:\r\n        </p>\r\n        <ul>\r\n          <li>\r\n            The first value is a number in pixels that the current contrast\r\n            level supports.\r\n          </li>\r\n          <li>\r\n            The second value is an exclamation point. This occurs when the\r\n            current contrast level is too low to support\r\n            <strong>ANY</strong> object.\r\n          </li>\r\n        </ul>\r\n\r\n        <p id=\"notes-perceptual-contrast\">\r\n          <span class=\"visual-header\"> Perceptual contrast:</span> This score\r\n          gauges inclusive contrast better than WCAG 2. For more information on\r\n          why, refer to Myndex article,\r\n          <a href=\"https://git.apcacontrast.com/documentation/WhyAPCA.html\"\r\n            >Why APCA?</a\r\n          >\r\n        </p>\r\n        <p id=\"notes-wcag2-compat\">\r\n          <span class=\"visual-header\">WCAG 2 compatible:</span> A score\r\n          compatible with use for WCAG 2.x success criteria. This score meets or\r\n          exceeds WCAG 2 scores to better include those with atypical vision.\r\n        </p>\r\n        <p id=\"notes-wcag2\">\r\n          <span class=\"visual-header\">WCAG 2:</span> This score is for reference\r\n          only—do not use this score for judging inclusive contrast.\r\n        </p>\r\n\r\n        <p id=\"notes-display-wcag2\">\r\n          <span class=\"visual-header\">Colors Contrast Value: Perceptual:</span>\r\n          The default score displayed by Colors Contrast. It ranges from -108 to\r\n          106. Use this value in conjunction with\r\n          <a href=\"http://https://www.myndex.com/APCA/\">Myndex guides</a> to\r\n          create inclusive designs.\r\n        </p>\r\n        <p id=\"notes-display-wcag2\">\r\n          <span class=\"visual-header\"\r\n            >Colors Contrast Value: WCAG 2 compatible:</span\r\n          >\r\n          This option swaps in a score for a value usable with WCAG 2.x success\r\n          criteria.\r\n        </p>\r\n        <p id=\"notes-display-wcag2\">\r\n          <span class=\"visual-header\">Colors Contrast Value: Object:</span>\r\n          This option swaps in a score that either displays a number in pixels\r\n          or an exclamation point (!). The number is the smallest object\r\n          dimension you can use the current color variant pair for.\r\n        </p>\r\n        <ul>\r\n          <li>\r\n            Smallest object dimension is the smallest dimension of an object you\r\n            are designing.\r\n          </li>\r\n          <li>\r\n            For example, if an object is 15 pixels by 20 pixels, the smallest\r\n            dimension is 15 pixels.\r\n          </li>\r\n        </ul>\r\n\r\n        <p id=\"notes-constant-chroma\">\r\n          <span class=\"visual-header\">Constant chroma:</span>\r\n          This option forces input sliders to limit tones with the same chroma\r\n          and hue of your inputted color.\r\n        </p>\r\n        <ul>\r\n          <li>\r\n            Keeping the same chroma and hue preserves the identity of your input\r\n            color.\r\n          </li>\r\n          <li>\r\n            Deselecting this option allows you to generate more tones. Be aware\r\n            that a lot of tones generated will now clash with your inputted\r\n            color.\r\n          </li>\r\n        </ul>\r\n        <p id=\"notes-show-grad\">\r\n          <span class=\"visual-header\">Show Gradient:</span>\r\n          This option renders a tone gradient behind the slider inputs. The\r\n          gradient shows the tonal possibilities of your inputted color. If\r\n          Constant Chroma is not active, the gradient ranges from black to\r\n          white.\r\n        </p>\r\n      </div>\r\n    </details>\r\n  </section>\r\n\r\n  <hr />\r\n\r\n  <section class=\"contact\">\r\n    <h2>Contact Information and Feedback</h2>\r\n\r\n    <p>\r\n      Made by <a href=\"https://github.com/pawn002\">pawn002</a>, who would\r\n      appreciate\r\n      <a href=\"https://github.com/pawn002/color-pair-quick-iterator/issues\">\r\n        bug reports and feature requests for this app</a\r\n      >\r\n      to help improve its Accessibility.\r\n    </p>\r\n  </section>\r\n\r\n  <div class=\"alert\">\r\n    <app-alert [alertMessage]=\"currentAlertMessage\"></app-alert>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-c3bd323da00016e22e16a3a7d43440094eeceddea5e6076a399bcaba62f8e742efe65e543735e36f9ea1bed026ab8e3c8fb60482667ae55ec324f8adfe79b9f7",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 837,
                            "end": 851,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 334,
                            "tagName": {
                                "pos": 838,
                                "end": 846,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 35,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 49,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 51
                    }
                }
            }
        },
        {
            "name": "ColorContrastComponent",
            "id": "component-ColorContrastComponent-ea5fcea7de7b6c8b068c49b45059094df00af0f115eed7e440dca99bfbf8598c30c711f17cf68a38a13a83d09a34342cc1bb9720cd496fd75afe9cf96b20de75",
            "file": "src/app/color-contrast/color-contrast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-contrast",
            "styleUrls": [
                "./color-contrast.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-contrast.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "colorOne",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "colorTwo",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "contrastType",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "ContrastType | \"apca object\" | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "contrast",
                    "defaultValue": "new EventEmitter<ContrastObject>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "cms",
                    "defaultValue": "inject(ColorMetricsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "contrastScore",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "cus",
                    "defaultValue": "inject(ColorUtilService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n  inject,\r\n} from '@angular/core';\r\nimport {\r\n  ColorMetricsService,\r\n  ContrastType,\r\n} from '../services/color-metrics.service';\r\nimport { ColorUtilService } from '../services/color-util.service';\r\n\r\nexport class ContrastObject {\r\n  score: number | null = null;\r\n  type: ContrastType | null = null;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-color-contrast',\r\n  templateUrl: './color-contrast.component.html',\r\n  styleUrls: ['./color-contrast.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class ColorContrastComponent implements OnChanges {\r\n  @Input() colorOne: string | null = null;\r\n  @Input() colorTwo: string | null = null;\r\n  @Input() contrastType: ContrastType | 'apca object' | null = null;\r\n\r\n  @Output() contrast = new EventEmitter<ContrastObject>();\r\n\r\n  cus = inject(ColorUtilService);\r\n  cms = inject(ColorMetricsService);\r\n\r\n  contrastScore: number | null = null;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // console.log(changes);\r\n\r\n    if (this.colorOne && this.colorTwo && this.contrastType) {\r\n      const score = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        this.contrastType === 'apca object' ? 'apca' : this.contrastType\r\n      );\r\n\r\n      this.contrastScore = score;\r\n\r\n      if (score) {\r\n        this.contrastScore =\r\n          this.contrastType === 'apca object'\r\n            ? this.cus.getMinObjectDimension(score)\r\n            : this.contrastScore;\r\n      }\r\n    } else {\r\n      console.warn('contrast comp has incomplete bindings');\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  padding: 0.5em 0.25ch;\r\n  border: var(--min-body-text-black) solid 3px;\r\n\r\n  .score-container {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    .score {\r\n      color: var(--ideal-body-text-black);\r\n      font-weight: 600;\r\n      font-family: var(--mono-font);\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-contrast.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<!-- This comp is for users with typical vision. The same information is delivered with better UX for a user who is blind in the Color Metadata section. -->\r\n<div class=\"comp-container\" aria-hidden=\"true\">\r\n  <div class=\"score-container\">\r\n    <label class=\"sr-only\" for=\"contrast-score\"\r\n      >Contrast Score for Selected Colors</label\r\n    >\r\n\r\n    <div id=\"contrast-score\" class=\"score\">\r\n      {{ contrastScore ? contrastScore : \"!\" }}\r\n      <!-- {{ contrastScore }} -->\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ColorPickerComponent",
            "id": "component-ColorPickerComponent-168a8139d69aa3bc257b447cc220b33124c1005ac579b0e365a1a057306f995a9b10ca77bd501afb0d41e900d98236ded570bb3ac72fca72d0b0c6f5ed33e3bb",
            "file": "src/app/color-picker/color-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-picker",
            "styleUrls": [
                "./color-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-picker.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "comparedColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "deltaColor",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "defaultValue": "'fg-color'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputName",
                    "defaultValue": "'foreground color'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedColor",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "color",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "handleColorChange",
                    "args": [
                        {
                            "name": "inputColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "inputColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleInputEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateInputValue",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-color-picker',\r\n  templateUrl: './color-picker.component.html',\r\n  styleUrls: ['./color-picker.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class ColorPickerComponent implements OnChanges {\r\n  @Input() inputId: string = 'fg-color';\r\n  @Input() inputName: string = 'foreground color';\r\n  @Input() comparedColor: string | null = null;\r\n  @Input() deltaColor?: string | null = null;\r\n\r\n  @Output() selectedColor = new EventEmitter<string>();\r\n\r\n  color: string | null = null;\r\n\r\n  handleColorChange(inputColor: string) {\r\n    // update color\r\n    this.color = inputColor;\r\n\r\n    // send out color for use in other comps\r\n    this.selectedColor.emit(inputColor);\r\n  }\r\n\r\n  handleInputEvent(event: Event) {\r\n    const inputElement = event.target as HTMLInputElement;\r\n\r\n    const selectedColor = inputElement.value;\r\n\r\n    // reset compared color\r\n    this.comparedColor = 'transparent';\r\n\r\n    this.handleColorChange(selectedColor);\r\n  }\r\n\r\n  updateInputValue(color: string) {\r\n    const targetInput = document.getElementById(\r\n      this.inputId\r\n    ) as HTMLInputElement;\r\n\r\n    if (targetInput) {\r\n      targetInput.value = color;\r\n    } else {\r\n      console.error(`something went wrong in color picker comp.`);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.deltaColor) {\r\n      this.handleColorChange(this.deltaColor);\r\n\r\n      this.updateInputValue(this.deltaColor);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  display: inline-block;\r\n  position: relative;\r\n  border-radius: 5px 0 0 5px;\r\n\r\n  &:hover {\r\n    box-shadow: 0 4px 0 0 var(--ui-shadow-color);\r\n  }\r\n\r\n  input {\r\n    width: 50px;\r\n    height: 50px;\r\n    box-sizing: border-box;\r\n    border: var(--app-white) 2px solid;\r\n    border-radius: 5px 0 0 5px;\r\n  }\r\n\r\n  .color-preview {\r\n    border-radius: 5px 0 0 5px;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n\r\n    /* NOTE: 2(15px) + 15px = 45px */\r\n    width: 45px;\r\n    height: 45px;\r\n    border: transparent 15px solid;\r\n    transform: translate(-50%, -50%);\r\n    background-color: transparent;\r\n    pointer-events: none;\r\n    box-sizing: border-box;\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-picker.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"comp-container\">\r\n  <label class=\"sr-only\" [for]=\"inputId\">Color Picker One</label>\r\n  <input\r\n    type=\"color\"\r\n    [id]=\"inputId\"\r\n    [name]=\"inputName\"\r\n    (input)=\"handleInputEvent($event)\"\r\n  />\r\n\r\n  <div\r\n    class=\"color-preview\"\r\n    [style.borderColor]=\"comparedColor\"\r\n    [style.backgroundColor]=\"color\"\r\n  ></div>\r\n</div>\r\n"
        },
        {
            "name": "ColorSliderComponent",
            "id": "component-ColorSliderComponent-0e1daaba4d10af641c4b0c380c7edc80bc39f420f296f495351a49f65044d4956c8a9596afdc6f4d343e7eef26147c37b9464d2c27d9fa2ee1c21e899cfc59e3",
            "file": "src/app/color-slider/color-slider.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-color-slider",
            "styleUrls": [
                "./color-slider.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./color-slider.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "constantChroma",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "'slider-0'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string | \"slider-0\"",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'color-slider'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string | \"color-slider\"",
                    "decorators": []
                },
                {
                    "name": "resetSlider",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "ResetObject | null",
                    "decorators": []
                },
                {
                    "name": "showGradient",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "colorVariant",
                    "defaultValue": "new EventEmitter<string | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "cus",
                    "defaultValue": "inject(ColorUtilService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "debug",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "devColorVariant",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "initValue",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "slideInterval",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "slideMax",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "slideMin",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "getAndSetLightnessRange",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInitValue",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "gradient",
                    "args": [
                        {
                            "name": "val",
                            "type": "\"on\" | \"off\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "\"on\" | \"off\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSliding",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "redefineGradientStops",
                    "args": [
                        {
                            "name": "lightMin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lightMax",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lightMin",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lightMax",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "redefineVariable",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "variableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "variableName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendInitialLightVariant",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  EventEmitter,\r\n  SimpleChanges,\r\n  inject,\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ColorUtilService } from '../services/color-util.service';\r\n\r\nexport interface ResetObject {\r\n  reset: true;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-color-slider',\r\n  templateUrl: './color-slider.component.html',\r\n  styleUrls: ['./color-slider.component.scss'],\r\n  imports: [CommonModule],\r\n  standalone: true,\r\n})\r\nexport class ColorSliderComponent implements OnInit, OnChanges {\r\n  @Input() id: string | 'slider-0' = 'slider-0';\r\n  @Input() name: string | 'color-slider' = 'color-slider';\r\n  @Input() color: string | null = null;\r\n  @Input() constantChroma: boolean = false;\r\n  @Input() showGradient: boolean = false;\r\n  @Input() resetSlider: ResetObject | null = null;\r\n  @Output() colorVariant = new EventEmitter<string | null>();\r\n\r\n  cus = inject(ColorUtilService);\r\n\r\n  debug: boolean = false;\r\n  devColorVariant: string | null = null;\r\n\r\n  slideInterval: number | null = null;\r\n  slideMin: number | null = null;\r\n  slideMax: number | null = null;\r\n  initValue: number | null = null;\r\n  value: number | null = null;\r\n\r\n  getInitValue() {\r\n    return this.initValue;\r\n  }\r\n\r\n  sendInitialLightVariant() {\r\n    // Good UX to just send the input color?\r\n    this.colorVariant.emit(this.color);\r\n\r\n    if (this.debug) {\r\n      this.devColorVariant = this.color;\r\n    }\r\n  }\r\n\r\n  async getAndSetLightnessRange(\r\n    color: string,\r\n    options?: { constantChroma: boolean }\r\n  ) {\r\n    const rangeObject = await this.cus.getMinMaxLight(color);\r\n\r\n    if (rangeObject) {\r\n      this.sendInitialLightVariant();\r\n\r\n      this.slideMin = 0;\r\n      this.slideMax = 1;\r\n\r\n      if (options?.constantChroma) {\r\n        this.slideMin = rangeObject.lightMin;\r\n\r\n        this.slideMax = rangeObject.lightMax;\r\n      }\r\n\r\n      this.slideInterval = (this.slideMax - this.slideMin) / 80;\r\n\r\n      const lightnessIndex = 0;\r\n      const initialSlideValue = rangeObject.originalCoords[lightnessIndex];\r\n\r\n      this.initValue = initialSlideValue;\r\n\r\n      this.value = initialSlideValue;\r\n\r\n      this.redefineGradientStops(this.slideMin, this.slideMax);\r\n    } else {\r\n      console.error(`no range object for slider`);\r\n    }\r\n  }\r\n\r\n  handleSliding(event: Event) {\r\n    const inputElem = event.target as HTMLInputElement;\r\n\r\n    if (inputElem) {\r\n      const lightValue = parseFloat(inputElem.value);\r\n\r\n      if (this.color) {\r\n        const lightnessVariant = this.cus.createSrgbColor(\r\n          this.color,\r\n          lightValue\r\n        );\r\n\r\n        if (this.debug) {\r\n          console.log(`slide modding ${this.color} to ${lightnessVariant}`);\r\n\r\n          this.devColorVariant = lightnessVariant;\r\n        }\r\n\r\n        this.colorVariant.emit(lightnessVariant);\r\n      } else {\r\n        console.error(`no color specified`);\r\n      }\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    // TODO: Isn't there an angular way to do this?\r\n    const element = document.getElementById(this.id) as HTMLInputElement;\r\n\r\n    if (this.initValue) {\r\n      element.value = this.initValue.toString();\r\n    } else {\r\n      console.error(`trouble resetting slider`);\r\n    }\r\n  }\r\n\r\n  gradient(val: 'on' | 'off') {\r\n    // TODO: Anguar way to do this?\r\n    const targetElem = document.getElementById(`cc-${this.id}`) as HTMLElement;\r\n\r\n    if (targetElem) {\r\n      if (val === 'on') {\r\n        targetElem.style.background = 'var(--gradient-background)';\r\n      }\r\n\r\n      if (val === 'off') {\r\n        targetElem.style.background = 'var(--default-background)';\r\n      }\r\n    } else {\r\n      console.warn(`no elem to assign gradient to.`);\r\n    }\r\n  }\r\n\r\n  redefineVariable(\r\n    element: HTMLElement,\r\n    variableName: string,\r\n    newValue: string\r\n  ) {\r\n    element.style.setProperty(variableName, newValue);\r\n  }\r\n\r\n  redefineGradientStops(lightMin: number, lightMax: number) {\r\n    if (this.color) {\r\n      const targetElement = document.getElementById(\r\n        `cc-${this.id}`\r\n      ) as HTMLElement;\r\n\r\n      const stops = [\r\n        '--grad-stop-0',\r\n        '--grad-stop-1',\r\n        '--grad-stop-2',\r\n        '--grad-stop-3',\r\n        '--grad-stop-4',\r\n        '--grad-stop-5',\r\n      ];\r\n\r\n      // get new stop values\r\n      const stopInterval = (lightMax - lightMin) / (stops.length - 1);\r\n      const stopVals = [];\r\n\r\n      for (let i = 0; i < stops.length; i++) {\r\n        const targetLight = stopInterval * i + lightMin;\r\n        targetLight;\r\n\r\n        const stopColor = this.cus.createSrgbColor(this.color, targetLight);\r\n\r\n        stopVals.push(stopColor);\r\n      }\r\n\r\n      // assign new stop values\r\n\r\n      for (let i = 0; i < stops.length; i++) {\r\n        const targetStop = stops[i];\r\n        const targetStopVal = stopVals[i];\r\n\r\n        if (targetStopVal) {\r\n          this.redefineVariable(targetElement, targetStop, targetStopVal);\r\n        } else {\r\n          console.log(`no new val to assign`);\r\n        }\r\n      }\r\n    } else {\r\n      console.log(`no color specified`);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.color) {\r\n      this.getAndSetLightnessRange(this.color, {\r\n        constantChroma: this.constantChroma,\r\n      });\r\n    } else {\r\n      console.warn(`no color specified to comp`);\r\n    }\r\n\r\n    if (this.showGradient) {\r\n      this.gradient('on');\r\n    }\r\n\r\n    if (!this.showGradient) {\r\n      this.gradient('off');\r\n    }\r\n\r\n    if (this.resetSlider) {\r\n      this.reset();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  --default-background: var(--app-white);\r\n  --grad-stop-0: black;\r\n  --grad-stop-1: rgb(8.6104% 8.6104% 8.6104%);\r\n  --grad-stop-2: rgb(28.06% 28.06% 28.06%);\r\n  --grad-stop-3: rgb(50.211% 50.211% 50.211%);\r\n  --grad-stop-4: rgb(74.321% 74.321% 74.321%);\r\n  --grad-stop-5: white;\r\n  --gradient-background: linear-gradient(\r\n    to right,\r\n    black,\r\n    var(--grad-stop-0) calc((var(--min-hit-dimension-aaa) / 2) + 8px),\r\n    var(--grad-stop-1),\r\n    var(--grad-stop-2),\r\n    var(--grad-stop-3),\r\n    var(--grad-stop-4),\r\n    var(--grad-stop-5) calc(100% - (var(--min-hit-dimension-aaa) / 2) - 8px),\r\n    white\r\n  );\r\n\r\n  box-sizing: border-box;\r\n  display: flex;\r\n\r\n  /* gives input more room on left and right ends to be hit more successfully */\r\n  padding: 0 calc(var(--min-hit-dimension-aaa) / 2);\r\n  border: 2px solid var(--app-white);\r\n  border-left: none;\r\n  border-right: none;\r\n  align-items: center;\r\n  background: var(--default-background);\r\n\r\n  &:hover {\r\n    box-shadow: 0 4px 0 0 var(--ui-shadow-color);\r\n  }\r\n\r\n  input {\r\n    flex-grow: 1;\r\n    width: 100%;\r\n    height: 46px;\r\n    min-height: var(--min-hit-dimension-aaa);\r\n    margin: 0;\r\n    background: var(--default-background);\r\n    background-color: red;\r\n  }\r\n\r\n  .special-case {\r\n    display: flex;\r\n    flex-grow: 1;\r\n    height: 46px;\r\n    min-height: var(--min-hit-dimension-aaa);\r\n    align-items: center;\r\n\r\n    /* TODO: what do custom input text need to be? <p>? */\r\n    div {\r\n      font-family: var(--mono-font);\r\n      font-size: var(--min-body-text-size);\r\n      font-weight: 400;\r\n    }\r\n  }\r\n}\r\n\r\n.dev-overlay {\r\n  display: none;\r\n  position: absolute;\r\n  gap: 1rem;\r\n  right: 0;\r\n  bottom: 0;\r\n\r\n  &.active {\r\n    display: flex;\r\n  }\r\n\r\n  .light-variant-chip {\r\n    border-radius: 100%;\r\n    width: 15px;\r\n    height: 15px;\r\n    border: 15px solid var(--app-black);\r\n  }\r\n}\r\n",
                    "styleUrl": "./color-slider.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div [id]=\"'cc-' + id\" class=\"comp-container\">\r\n  <label [for]=\"id\" class=\"sr-only\">Chroma and hue bound Lightness</label>\r\n\r\n  @if(slideMin != slideMax){\r\n  <input\r\n    type=\"range\"\r\n    [name]=\"name\"\r\n    [id]=\"id\"\r\n    [min]=\"slideMin\"\r\n    [max]=\"slideMax\"\r\n    [step]=\"slideInterval\"\r\n    [value]=\"value\"\r\n    (input)=\"handleSliding($event)\"\r\n  />\r\n  } @else if (slideMin === slideMax) {\r\n  <div class=\"special-case\">\r\n    <div>!</div>\r\n  </div>\r\n\r\n  }\r\n</div>\r\n\r\n<div class=\"dev-overlay\" [ngClass]=\"{ active: debug }\">\r\n  <h2>dev overlay</h2>\r\n\r\n  <div\r\n    class=\"light-variant-chip\"\r\n    [style.borderColor]=\"devColorVariant\"\r\n    [style.backgroundColor]=\"color\"\r\n  ></div>\r\n</div>\r\n"
        },
        {
            "name": "CopyToClipboardButtonComponent",
            "id": "component-CopyToClipboardButtonComponent-419056953d28dea5bfae8ad8c18913755927f22ca97662c0042dbb06193323f890b247be2d0c134f02cd468653c7325e124b216c46ea458f797973dd29bfc31d",
            "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-copy-to-clipboard-button",
            "styleUrls": [
                "./copy-to-clipboard-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./copy-to-clipboard-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "copyEvent",
                    "defaultValue": "new EventEmitter<CopyToClipboardEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "copyToClipboard",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\nexport class CopyToClipboardEvent {\r\n  copied: boolean = false;\r\n  color: string | null = null;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-copy-to-clipboard-button',\r\n  templateUrl: './copy-to-clipboard-button.component.html',\r\n  styleUrls: ['./copy-to-clipboard-button.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class CopyToClipboardButtonComponent {\r\n  @Input() color: string | null = null;\r\n  @Output() copyEvent = new EventEmitter<CopyToClipboardEvent>();\r\n\r\n  async copyToClipboard(): Promise<void> {\r\n    if (this.color) {\r\n      const colorSansHex = this.color.replace('#', '');\r\n\r\n      try {\r\n        await navigator.clipboard.writeText(colorSansHex);\r\n\r\n        this.copyEvent.emit({\r\n          copied: true,\r\n          color: colorSansHex,\r\n        });\r\n\r\n        // console.log(this.color, 'copied to clipboard');\r\n      } catch (err) {\r\n        this.copyEvent.emit({\r\n          copied: false,\r\n          color: colorSansHex,\r\n        });\r\n\r\n        console.error('Failed to copy text: ', err);\r\n      }\r\n    } else {\r\n      console.error('nothing to copy');\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  display: inline-block;\r\n  position: relative;\r\n\r\n  button {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border-radius: 0 5px 5px 0;\r\n    width: 50px;\r\n    height: 50px;\r\n    padding: 0.25rem;\r\n    border: transparent 2px solid;\r\n    background-color: var(--app-white);\r\n    min-width: var(--min-hit-dimension-aaa);\r\n    min-height: var(--min-hit-dimension-aaa);\r\n\r\n    &:hover {\r\n      box-shadow: 0 4px 0 0 var(--ui-shadow-color);\r\n    }\r\n\r\n    .svg-container {\r\n      width: 22px;\r\n      height: auto;\r\n\r\n      svg {\r\n        fill: var(--app-black);\r\n        display: block;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./copy-to-clipboard-button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"comp-container\">\r\n  <button [disabled]=\"!color\" [id]=\"'ctc-0'\" (click)=\"copyToClipboard()\">\r\n    <span class=\"sr-only\"> Copy current variant to Clipboard </span>\r\n    <div class=\"svg-container\">\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        viewBox=\"0 0 24 24\"\r\n        x=\"0px\"\r\n        y=\"0px\"\r\n      >\r\n        <path\r\n          fill-rule=\"evenodd\"\r\n          d=\"M384,608 L384,624 L368,624 L368,608 L384,608 Z M370,622 L382,622 L382,610 L370,610 L370,622 Z M362,602 L362,614 L366,614 L366,616 L360,616 L360,600 L376,600 L376,606 L374,606 L374,602 L362,602 Z\"\r\n          transform=\"translate(-360 -600)\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-822518339fec3260e65815ff4a654150f6fbda9ef7d1f341c337f201a07b661184cda0d257a34d21f6f155e59dce64fae6213975899548462ffa5ceb8f58e980",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg\n          width=\"32\"\n          height=\"32\"\n          viewBox=\"0 0 32 32\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ButtonComponent } from './button.component';\r\n// import type { User } from './user';\r\nimport type { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  standalone: true,\r\n  imports: [CommonModule, ButtonComponent],\r\n  template: `<header>\r\n    <div class=\"storybook-header\">\r\n      <div>\r\n        <svg\r\n          width=\"32\"\r\n          height=\"32\"\r\n          viewBox=\"0 0 32 32\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <div *ngIf=\"user\">\r\n          <span class=\"welcome\">\r\n            Welcome, <b>{{ user.name }}</b\r\n            >!\r\n          </span>\r\n          <storybook-button\r\n            *ngIf=\"user\"\r\n            size=\"small\"\r\n            (onClick)=\"onLogout.emit($event)\"\r\n            label=\"Log out\"\r\n          ></storybook-button>\r\n        </div>\r\n        <div *ngIf=\"!user\">\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onLogin.emit($event)\"\r\n            label=\"Log in\"\r\n          ></storybook-button>\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            [primary]=\"true\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onCreateAccount.emit($event)\"\r\n            label=\"Sign up\"\r\n          ></storybook-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.storybook-header svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header h1 {\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header button + button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.storybook-header .welcome {\r\n  color: #333;\r\n  font-size: 14px;\r\n  margin-right: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "MetadataComponent",
            "id": "component-MetadataComponent-e5ef3d4ca16359eb762da342e7ff9532d279385bbaa74bd516eccff0439fdc830eed2522c8c82f071620fa601268b7b90b2411e8fe5518f507eeca4328172653",
            "file": "src/app/metadata/metadata.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-metadata",
            "styleUrls": [
                "./metadata.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./metadata.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "colorOne",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string | null",
                    "decorators": []
                },
                {
                    "name": "colorTwo",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cms",
                    "defaultValue": "inject(ColorMetricsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "colorOneMeta",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorMetaObj | null",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "colorTwoMeta",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ColorMetaObj | null",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "cus",
                    "defaultValue": "inject(ColorUtilService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "differences",
                    "defaultValue": "{\r\n    deltaE: null,\r\n    wcag2Old: null,\r\n    wcag2New: null,\r\n    apca: NaN,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DifferencesDataObj",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "successes",
                    "defaultValue": "{\r\n    text: null,\r\n    largeText: null,\r\n    objectMinDimension: NaN,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SuccessesObj",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "getColorDifference",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getColorMeta",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSuccesses",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, inject } from '@angular/core';\r\nimport { ColorUtilService, ColorMetaObj } from '../services/color-util.service';\r\nimport { ColorMetricsService } from '../services/color-metrics.service';\r\n\r\nexport class DifferencesDataObj {\r\n  deltaE: number | null = null;\r\n  wcag2Old: number | null = null;\r\n  wcag2New: number | null = null;\r\n  apca: number | null = null;\r\n}\r\nexport class SuccessesObj {\r\n  text: 'pass' | 'fail' | null = null;\r\n  largeText: 'pass' | 'fail' | null = null;\r\n  objectMinDimension: number | string = NaN;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-metadata',\r\n  templateUrl: './metadata.component.html',\r\n  styleUrls: ['./metadata.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class MetadataComponent implements OnChanges {\r\n  @Input() colorOne: string | null = null;\r\n  @Input() colorTwo: string | null = null;\r\n\r\n  cus = inject(ColorUtilService);\r\n  cms = inject(ColorMetricsService);\r\n\r\n  differences: DifferencesDataObj = {\r\n    deltaE: null,\r\n    wcag2Old: null,\r\n    wcag2New: null,\r\n    apca: NaN,\r\n  };\r\n\r\n  successes: SuccessesObj = {\r\n    text: null,\r\n    largeText: null,\r\n    objectMinDimension: NaN,\r\n  };\r\n\r\n  colorOneMeta: ColorMetaObj | null = null;\r\n\r\n  colorTwoMeta: ColorMetaObj | null = null;\r\n\r\n  getColorMeta() {\r\n    if (this.colorOne && this.colorTwo) {\r\n      if (this.cus.getColorMeta(this.colorOne)) {\r\n        this.colorOneMeta = this.cus.getColorMeta(this.colorOne);\r\n\r\n        this.colorTwoMeta = this.cus.getColorMeta(this.colorTwo);\r\n      }\r\n    } else {\r\n      console.warn(`failed to get color meta`);\r\n    }\r\n  }\r\n\r\n  getColorDifference() {\r\n    if (this.colorOne && this.colorTwo) {\r\n      this.differences.deltaE = this.cus.calcDeltaE(\r\n        this.colorOne,\r\n        this.colorTwo\r\n      );\r\n\r\n      this.differences.wcag2New = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        'bpca'\r\n      );\r\n\r\n      this.differences.wcag2Old = this.cus.calcWcag2(\r\n        this.colorOne,\r\n        this.colorTwo\r\n      );\r\n\r\n      this.differences.apca = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        'apca'\r\n      );\r\n    } else {\r\n      console.warn(`failed to get color differences`);\r\n    }\r\n  }\r\n\r\n  getSuccesses() {\r\n    if (this.colorOne && this.colorTwo) {\r\n      const wcagNew = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        'bpca'\r\n      );\r\n\r\n      const apcaScore = this.cms.getContrast(\r\n        this.colorOne,\r\n        this.colorTwo,\r\n        'apca'\r\n      );\r\n\r\n      if (wcagNew && apcaScore) {\r\n        if (wcagNew >= 0 && Math.abs(apcaScore) >= 0) {\r\n          this.successes.text = wcagNew >= 4.5 ? 'pass' : 'fail';\r\n\r\n          this.successes.largeText = wcagNew >= 3 ? 'pass' : 'fail';\r\n\r\n          const minDimension = this.cus.getMinObjectDimension(apcaScore);\r\n\r\n          this.successes.objectMinDimension = Number.isNaN(minDimension)\r\n            ? 'invisible'\r\n            : minDimension;\r\n        } else {\r\n          console.warn(`something wonky with calculating scores`);\r\n        }\r\n      } else {\r\n        console.warn(`trouble getting scores`);\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.getColorMeta();\r\n\r\n    this.getColorDifference();\r\n\r\n    this.getSuccesses();\r\n\r\n    // if (this.colorOne && this.colorTwo) {\r\n    //   if (this.differences.apca) {\r\n    //     console.log(this.cus.getMinObjectDimension(this.differences.apca));\r\n    //   }\r\n    // }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  display: flex;\r\n  position: relative;\r\n  flex-wrap: wrap;\r\n  align-items: flex-start;\r\n  gap: 0.5rem 4rem;\r\n  justify-content: center;\r\n\r\n  div {\r\n    flex-grow: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    max-width: 30ch;\r\n  }\r\n\r\n  h3 {\r\n    text-align: center;\r\n  }\r\n\r\n  table {\r\n    margin-bottom: 1rem;\r\n  }\r\n\r\n  tr {\r\n    :nth-child(2) {\r\n      font-family: var(--mono-font);\r\n      text-align: right;\r\n      font-style: normal;\r\n      padding-left: 1ch;\r\n      min-width: 9ch;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./metadata.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"comp-container\">\r\n  <div>\r\n    <h3>Successes and Minimums</h3>\r\n    <table>\r\n      <caption class=\"sr-only\">\r\n        Various pass, fails or minimum dimensions related to visual elements.\r\n      </caption>\r\n      <thead class=\"sr-only\">\r\n        <tr>\r\n          <th>Criteria</th>\r\n          <th>Value</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Text</td>\r\n          <td>{{ successes.text }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Large Text</td>\r\n          <td>{{ successes.largeText }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>\r\n            <cite><a href=\"#notes-object\">Object</a></cite>\r\n          </td>\r\n          <td>{{ successes.objectMinDimension }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <div>\r\n    <h3>Differences</h3>\r\n    <table>\r\n      <caption class=\"sr-only\">\r\n        Differences between Foreground Color and Background Color.\r\n      </caption>\r\n      <thead class=\"sr-only\">\r\n        <tr>\r\n          <th>Measurement</th>\r\n          <th>Value</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Delta E</td>\r\n          <td>{{ differences.deltaE }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>\r\n            <cite\r\n              ><a href=\"#notes-perceptual-contrast\">\r\n                Perceptual contrast</a\r\n              ></cite\r\n            >\r\n          </td>\r\n          <td>{{ differences.apca }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>\r\n            <cite><a href=\"#notes-wcag2-compat\"> WCAG 2 compatible</a></cite>\r\n          </td>\r\n          <td>{{ differences.wcag2New }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>\r\n            <cite><a href=\"#notes-wcag2\">WCAG 2</a></cite>\r\n          </td>\r\n          <td>{{ differences.wcag2Old }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <div>\r\n    <h3>Foreground Color</h3>\r\n    <table>\r\n      <caption class=\"sr-only\">\r\n        Foreground Color Metadata\r\n      </caption>\r\n      <thead class=\"sr-only\">\r\n        <tr>\r\n          <th>Measurement</th>\r\n          <th>Value</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Saturation</td>\r\n          <td>{{ colorOneMeta?.saturation }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Lightness</td>\r\n          <td>{{ colorOneMeta?.lightness }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Chroma</td>\r\n          <td>{{ colorOneMeta?.chroma }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Hue</td>\r\n          <td>{{ colorOneMeta?.hue }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <div>\r\n    <h3>Background Color</h3>\r\n    <table>\r\n      <caption class=\"sr-only\">\r\n        Background Color Metadata\r\n      </caption>\r\n      <thead class=\"sr-only\">\r\n        <tr>\r\n          <th>Measurement</th>\r\n          <th>Value</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>Saturation</td>\r\n          <td>{{ colorTwoMeta?.saturation }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Lightness</td>\r\n          <td>{{ colorTwoMeta?.lightness }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Chroma</td>\r\n          <td>{{ colorTwoMeta?.chroma }}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Hue</td>\r\n          <td>{{ colorTwoMeta?.hue }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-67c314f360c89a1d3f12883f95a305586e6f54f060cd58fb65ce28d54477dcdc2128d971e11c7a20ebe801ca9f643330b37ddcf0228ce59b70eef8b7213e3f3d",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a\n          href=\"https://componentdriven.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page\n        states without needing to navigate to them in your app. Here are some\n        handy patterns for managing page data in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose\n          such data from the \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock\n          these services out using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a\n          href=\"https://storybook.js.org/tutorials/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a\n          href=\"https://storybook.js.org/docs\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg\n          width=\"10\"\n          height=\"10\"\n          viewBox=\"0 0 12 12\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 88
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { HeaderComponent } from './header.component';\r\nimport type { User } from './User';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  standalone: true,\r\n  imports: [CommonModule, HeaderComponent],\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"doLogout()\"\r\n      (onLogin)=\"doLogin()\"\r\n      (onCreateAccount)=\"doCreateAccount()\"\r\n    ></storybook-header>\r\n    <section class=\"storybook-page\">\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a\r\n          href=\"https://componentdriven.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page\r\n        states without needing to navigate to them in your app. Here are some\r\n        handy patterns for managing page data in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose\r\n          such data from the \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock\r\n          these services out using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a\r\n          href=\"https://storybook.js.org/tutorials/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a\r\n          href=\"https://storybook.js.org/docs\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          docs\r\n        </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg\r\n          width=\"10\"\r\n          height=\"10\"\r\n          viewBox=\"0 0 12 12\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport class PageComponent {\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\n.storybook-page h2 {\r\n  font-weight: 700;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-page p {\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page a {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\n.storybook-page ul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.storybook-page .tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-page .tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PaletteTableComponent",
            "id": "component-PaletteTableComponent-30c9ccde20d791ae5d800c21dd5719c14f9d84147637a9213c9d619ea3dc7d39f35fb25baf94be1f669434629bb2ae936e94c8e932b77840a6d63a24e13207bc",
            "file": "src/app/palette-table/palette-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-palette-table",
            "styleUrls": [
                "./palette-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./palette-table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedColor",
                    "defaultValue": "new EventEmitter<TableColorCell>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "chromaSteps",
                    "defaultValue": "14",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "cus",
                    "defaultValue": "inject(ColorUtilService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "dataStruct",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableData",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "lightSteps",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "tableHeaders",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "methodsClass": [
                {
                    "name": "getTableColumnHeaders",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTableData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getTextColor",
                    "args": [
                        {
                            "name": "bkgdColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"white\" | \"black\"",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bkgdColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectColor",
                    "args": [
                        {
                            "name": "rowNum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "columnNum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rowNum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "columnNum",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  AfterViewInit,\r\n  Input,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter,\r\n  inject,\r\n} from '@angular/core';\r\nimport { ColorUtilService } from '../services/color-util.service';\r\n\r\nexport class TableColorCell {\r\n  color: string | null = null;\r\n  lightness: number = NaN;\r\n  chroma: number = NaN;\r\n  hue: number = NaN;\r\n  deltaE: number | null = null;\r\n  deltaLightness: number | null = null;\r\n  deltaChroma: number | null = null;\r\n\r\n  // pContrast: number = NaN;\r\n  // wacg2Comp: number = NaN;\r\n}\r\n\r\nexport type TableRow = Array<TableColorCell>;\r\n\r\nexport type TableData = Array<TableRow>;\r\n\r\n@Component({\r\n  selector: 'app-palette-table',\r\n  templateUrl: './palette-table.component.html',\r\n  styleUrls: ['./palette-table.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class PaletteTableComponent implements OnInit, OnChanges {\r\n  @Input() color: string | null = null;\r\n\r\n  @Output() selectedColor = new EventEmitter<TableColorCell>();\r\n\r\n  cus = inject(ColorUtilService);\r\n\r\n  lightSteps = 5;\r\n  chromaSteps = 14;\r\n\r\n  tableHeaders: Array<number> = [];\r\n\r\n  // An array of arrays where each array is a 'row' of data, and objects are cells of data.\r\n  dataStruct: TableData = [];\r\n\r\n  getTableColumnHeaders() {\r\n    const headers = [];\r\n\r\n    const sampleRow = this.dataStruct[0];\r\n\r\n    for (let i = 0; i < sampleRow.length; i++) {\r\n      const curCell = sampleRow[i];\r\n\r\n      headers.push(curCell.chroma);\r\n    }\r\n\r\n    this.tableHeaders = headers;\r\n  }\r\n\r\n  selectColor(rowNum: number, columnNum: number) {\r\n    const targetColor = this.dataStruct[rowNum][columnNum];\r\n\r\n    // console.log(rowNum, columnNum);\r\n    // console.log(targetColor.color);\r\n\r\n    this.selectedColor.emit(targetColor);\r\n  }\r\n\r\n  getTextColor(bkgdColor: string) {\r\n    return (this.cus.calcWcag2('white', bkgdColor) as number) >= 7\r\n      ? 'white'\r\n      : 'black';\r\n  }\r\n\r\n  async getTableData() {\r\n    if (this.color) {\r\n      this.dataStruct = await this.cus.generateAllOklchVariants(\r\n        this.color,\r\n        this.lightSteps,\r\n        this.chromaSteps\r\n      );\r\n\r\n      this.getTableColumnHeaders();\r\n    } else {\r\n      console.warn(`no color for palette table`);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    // console.log(`-----OnChanges`);\r\n\r\n    this.getTableData();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // console.log(`-----OnInit`);\r\n    // this.getTableData();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".comp-container {\r\n  border-radius: 2px;\r\n\r\n  table {\r\n    border-collapse: collapse;\r\n\r\n    th {\r\n      font-family: var(--mono-font);\r\n    }\r\n\r\n    td {\r\n      margin: 0;\r\n      padding: 7.5px;\r\n      line-height: 0;\r\n    }\r\n\r\n    tbody {\r\n      th {\r\n        text-align: right;\r\n      }\r\n    }\r\n\r\n    button {\r\n      margin: 0;\r\n      padding: 0;\r\n      border: transparent 2px solid;\r\n      box-sizing: border-box;\r\n      border-radius: 5px;\r\n      min-width: 22px;\r\n      min-height: 22px;\r\n      line-height: 0;\r\n      font-size: 0;\r\n\r\n      span {\r\n        line-height: 0;\r\n      }\r\n\r\n      &:hover:not([disabled]) {\r\n        background-color: white !important;\r\n        border-color: #8f8f8f !important;\r\n      }\r\n    }\r\n\r\n    .no-color {\r\n      margin: 0;\r\n      padding: 0;\r\n      border: transparent 2px solid;\r\n      box-sizing: border-box;\r\n      border-radius: 5px;\r\n      min-width: 22px;\r\n      min-height: 22px;\r\n      line-height: 0;\r\n      font-size: 0;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./palette-table.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"comp-container\">\r\n  @if (dataStruct) {\r\n  <table [style.backgroundColor]=\"color\">\r\n    <caption class=\"sr-only\">\r\n      Collection of colors sharing the same hue organized by chroma as columns,\r\n      and lightness as rows. Selecting a button in the table will copy the its\r\n      color to the clipboard.\r\n    </caption>\r\n    <thead>\r\n      <tr class=\"sr-only\">\r\n        <!-- <tr> -->\r\n        <td>&nbsp;</td>\r\n\r\n        @for (header of tableHeaders; track $index) {\r\n        <th>{{ header.toFixed(5) }}</th>\r\n        }\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      @for (row of dataStruct; track i; let i = $index) {\r\n      <tr>\r\n        <th class=\"sr-only\">{{ row[0][\"lightness\"].toFixed(5) }}</th>\r\n\r\n        @for (cell of row; track j; let j = $index) {\r\n        <td>\r\n          <div>\r\n            @if (cell.color) {\r\n            <button\r\n              [style.backgroundColor]=\"cell.color ? cell.color : 'transparent'\"\r\n              [style.color]=\"getTextColor(cell.color)\"\r\n              [style.borderColor]=\"cell.deltaE === 0 ? 'white' : cell.color\"\r\n              [style.backgroundColor]=\"cell.deltaE === 0 ? 'black' : cell.color\"\r\n              (click)=\"selectColor(i, j)\"\r\n            >\r\n              <span class=\"sr-only\">{{ cell.color }}, </span>\r\n              <span class=\"sr-only\">{{ cell.deltaLightness }}%, </span>\r\n              <span class=\"sr-only\">{{ cell.deltaChroma }}%, </span>\r\n              <span class=\"sr-only\">{{ cell.deltaE }}</span>\r\n            </button>\r\n\r\n            } @else {\r\n            <div class=\"no-color\">\r\n              <p class=\"sr-only\">color out of sRGB gamut</p>\r\n            </div>\r\n            }\r\n          </div>\r\n        </td>\r\n        }\r\n      </tr>\r\n      }\r\n    </tbody>\r\n  </table>\r\n  }\r\n</div>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "APCA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-contrast/color-contrast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    colorOne: 'white',\r\n    colorTwo: 'black',\r\n    contrastType: 'apca',\r\n  },\r\n}"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [provideRouter(routes)]\r\n}"
            },
            {
                "name": "ColorCopied",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    alertMessage: {\r\n      message: 'Color One Variant, #ffe1df, copied to clipboard.',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    user: {\r\n      name: 'Jane Doe',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\r\n    await expect(loginButton).toBeInTheDocument();\r\n    await userEvent.click(loginButton);\r\n    await expect(loginButton).not.toBeInTheDocument();\r\n\r\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\r\n    await expect(logoutButton).toBeInTheDocument();\r\n  },\r\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: ButtonComponent,\r\n  tags: ['autodocs'],\r\n  // render: (args: ButtonComponent) => ({\r\n  //   props: {\r\n  //     backgroundColor: null,\r\n  //     ...args,\r\n  //   },\r\n  // }),\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HeaderComponent>",
                "defaultValue": "{\r\n  title: 'Example/Header',\r\n  component: HeaderComponent,\r\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PageComponent>",
                "defaultValue": "{\r\n  title: 'Example/Page',\r\n  component: PageComponent,\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AlertComponent>",
                "defaultValue": "{\r\n  title: 'App/Alert',\r\n  component: AlertComponent,\r\n  tags: ['autodocs'],\r\n  // render: (args: AlertComponent) => ({\r\n  //   props: {\r\n  //     ...args,\r\n  //   },\r\n  // }),\r\n  argTypes: {},\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-contrast/color-contrast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ColorContrastComponent>",
                "defaultValue": "{\r\n  title: 'App/Color Contrast',\r\n  component: ColorContrastComponent,\r\n  tags: ['autodocs'],\r\n  // render: (args: ColorContrastComponent) => ({\r\n  //   props: {\r\n  //     ...args,\r\n  //   },\r\n  // }),\r\n  argTypes: {\r\n    colorOne: {\r\n      control: 'color',\r\n    },\r\n    colorTwo: {\r\n      control: 'color',\r\n    },\r\n    contrastType: {\r\n      options: ['apca', 'bpca', 'apca object'],\r\n      control: { type: 'radio' },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-picker/color-picker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ColorPickerComponent>",
                "defaultValue": "{\r\n  title: 'App/Color Picker',\r\n  component: ColorPickerComponent,\r\n  tags: ['autodocs'],\r\n  // render: (args: ColorPickerComponent) => ({\r\n  //   props: {\r\n  //     ...args,\r\n  //   },\r\n  // }),\r\n  argTypes: {\r\n    comparedColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-slider/color-slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ColorSliderComponent>",
                "defaultValue": "{\r\n  title: 'App/Color Slider',\r\n  component: ColorSliderComponent,\r\n  tags: ['autodocs'],\r\n  // render: (args: ColorSliderComponent) => ({\r\n  //   props: {\r\n  //     ...args,\r\n  //   },\r\n  // }),\r\n  argTypes: {\r\n    color: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<CopyToClipboardButtonComponent>",
                "defaultValue": "{\r\n  title: 'App/Copy to Clipboard Button',\r\n  component: CopyToClipboardButtonComponent,\r\n  tags: ['autodocs'],\r\n  // render: (args: CopyToClipboardButtonComponent) => ({\r\n  //   props: {\r\n  //     ...args,\r\n  //   },\r\n  // }),\r\n  argTypes: {\r\n    color: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/metadata/metadata.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<MetadataComponent>",
                "defaultValue": "{\r\n  title: 'App/Metadata Readout',\r\n  component: MetadataComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: MetadataComponent) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    colorOne: {\r\n      control: 'color',\r\n    },\r\n    colorTwo: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/palette-table/palette-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PaletteTableComponent>",
                "defaultValue": "{\r\n  title: 'App/Palette Table',\r\n  component: PaletteTableComponent,\r\n  tags: ['autodocs'],\r\n  // render: (args: PaletteTableComponent) => ({\r\n  //   props: {\r\n  //     ...args,\r\n  //   },\r\n  // }),\r\n  argTypes: {\r\n    color: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "NoHueColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-slider/color-slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    color: 'gray',\r\n    // showGradient: true,\r\n  },\r\n}"
            },
            {
                "name": "ObjectContrast",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-contrast/color-contrast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    colorOne: '#928f8f',\r\n    colorTwo: 'white',\r\n    contrastType: 'apca object',\r\n  },\r\n}"
            },
            {
                "name": "Populated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/palette-table/palette-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    color: '#ff00ff',\r\n  },\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "RgbBlue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-slider/color-slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    color: 'blue',\r\n    constantChroma: true,\r\n  },\r\n}"
            },
            {
                "name": "RgbGreen",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-slider/color-slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    color: 'green',\r\n    constantChroma: true,\r\n  },\r\n}"
            },
            {
                "name": "RgbRed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-slider/color-slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    color: 'red',\r\n    constantChroma: true,\r\n  },\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "SomethingToCopy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    color: 'red',\r\n  },\r\n}"
            },
            {
                "name": "SomethingToCopy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/metadata/metadata.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    colorOne: 'red',\r\n    colorTwo: 'white',\r\n  },\r\n}"
            },
            {
                "name": "Typical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {},\r\n}"
            },
            {
                "name": "Typical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-contrast/color-contrast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    colorOne: null,\r\n    colorTwo: null,\r\n    contrastType: null,\r\n  },\r\n}"
            },
            {
                "name": "Typical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-picker/color-picker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    comparedColor: '',\r\n  },\r\n}"
            },
            {
                "name": "Typical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-slider/color-slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    color: 'coral',\r\n  },\r\n}"
            },
            {
                "name": "Typical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    color: null,\r\n  },\r\n}"
            },
            {
                "name": "Typical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/metadata/metadata.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {},\r\n}"
            },
            {
                "name": "Typical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/palette-table/palette-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {},\r\n}"
            },
            {
                "name": "WCAGEnhanced",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-contrast/color-contrast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    colorOne: 'white',\r\n    colorTwo: 'black',\r\n    contrastType: 'bpca',\r\n  },\r\n}"
            },
            {
                "name": "WCAGEnhancedEdgeCase",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/color-contrast/color-contrast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    colorOne: '#928f8f',\r\n    colorTwo: 'white',\r\n    contrastType: 'bpca',\r\n  },\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ColorCoordArray",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "[number, number, number]",
                "file": "src/app/services/color-util.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "ColorPair",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "[string, string]",
                "file": "src/app/services/color-util.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "ContrastType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"apca\" | \"bpca\"",
                "file": "src/app/services/color-metrics.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderComponent>",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PageComponent>",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AlertComponent>",
                "file": "src/app/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ColorContrastComponent>",
                "file": "src/app/color-contrast/color-contrast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ColorPickerComponent>",
                "file": "src/app/color-picker/color-picker.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ColorSliderComponent>",
                "file": "src/app/color-slider/color-slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CopyToClipboardButtonComponent>",
                "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<MetadataComponent>",
                "file": "src/app/metadata/metadata.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PaletteTableComponent>",
                "file": "src/app/palette-table/palette-table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TableData",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Array<TableRow>",
                "file": "src/app/palette-table/palette-table.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "TableRow",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Array<TableColorCell>",
                "file": "src/app/palette-table/palette-table.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/color-contrast/color-contrast.stories.ts": [
                {
                    "name": "APCA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-contrast/color-contrast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    colorOne: 'white',\r\n    colorTwo: 'black',\r\n    contrastType: 'apca',\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-contrast/color-contrast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ColorContrastComponent>",
                    "defaultValue": "{\r\n  title: 'App/Color Contrast',\r\n  component: ColorContrastComponent,\r\n  tags: ['autodocs'],\r\n  // render: (args: ColorContrastComponent) => ({\r\n  //   props: {\r\n  //     ...args,\r\n  //   },\r\n  // }),\r\n  argTypes: {\r\n    colorOne: {\r\n      control: 'color',\r\n    },\r\n    colorTwo: {\r\n      control: 'color',\r\n    },\r\n    contrastType: {\r\n      options: ['apca', 'bpca', 'apca object'],\r\n      control: { type: 'radio' },\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "ObjectContrast",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-contrast/color-contrast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    colorOne: '#928f8f',\r\n    colorTwo: 'white',\r\n    contrastType: 'apca object',\r\n  },\r\n}"
                },
                {
                    "name": "Typical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-contrast/color-contrast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    colorOne: null,\r\n    colorTwo: null,\r\n    contrastType: null,\r\n  },\r\n}"
                },
                {
                    "name": "WCAGEnhanced",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-contrast/color-contrast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    colorOne: 'white',\r\n    colorTwo: 'black',\r\n    contrastType: 'bpca',\r\n  },\r\n}"
                },
                {
                    "name": "WCAGEnhancedEdgeCase",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-contrast/color-contrast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    colorOne: '#928f8f',\r\n    colorTwo: 'white',\r\n    contrastType: 'bpca',\r\n  },\r\n}"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [provideRouter(routes)]\r\n}"
                }
            ],
            "src/app/alert/alert.stories.ts": [
                {
                    "name": "ColorCopied",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    alertMessage: {\r\n      message: 'Color One Variant, #ffe1df, copied to clipboard.',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AlertComponent>",
                    "defaultValue": "{\r\n  title: 'App/Alert',\r\n  component: AlertComponent,\r\n  tags: ['autodocs'],\r\n  // render: (args: AlertComponent) => ({\r\n  //   props: {\r\n  //     ...args,\r\n  //   },\r\n  // }),\r\n  argTypes: {},\r\n}"
                },
                {
                    "name": "Typical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {},\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: ButtonComponent,\r\n  tags: ['autodocs'],\r\n  // render: (args: ButtonComponent) => ({\r\n  //   props: {\r\n  //     backgroundColor: null,\r\n  //     ...args,\r\n  //   },\r\n  // }),\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    user: {\r\n      name: 'Jane Doe',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HeaderComponent>",
                    "defaultValue": "{\r\n  title: 'Example/Header',\r\n  component: HeaderComponent,\r\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\r\n  tags: ['autodocs'],\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  play: async ({ canvasElement }) => {\r\n    const canvas = within(canvasElement);\r\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\r\n    await expect(loginButton).toBeInTheDocument();\r\n    await userEvent.click(loginButton);\r\n    await expect(loginButton).not.toBeInTheDocument();\r\n\r\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\r\n    await expect(logoutButton).toBeInTheDocument();\r\n  },\r\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PageComponent>",
                    "defaultValue": "{\r\n  title: 'Example/Page',\r\n  component: PageComponent,\r\n  parameters: {\r\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\r\n    layout: 'fullscreen',\r\n  },\r\n}"
                }
            ],
            "src/app/color-picker/color-picker.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-picker/color-picker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ColorPickerComponent>",
                    "defaultValue": "{\r\n  title: 'App/Color Picker',\r\n  component: ColorPickerComponent,\r\n  tags: ['autodocs'],\r\n  // render: (args: ColorPickerComponent) => ({\r\n  //   props: {\r\n  //     ...args,\r\n  //   },\r\n  // }),\r\n  argTypes: {\r\n    comparedColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Typical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-picker/color-picker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    comparedColor: '',\r\n  },\r\n}"
                }
            ],
            "src/app/color-slider/color-slider.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-slider/color-slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ColorSliderComponent>",
                    "defaultValue": "{\r\n  title: 'App/Color Slider',\r\n  component: ColorSliderComponent,\r\n  tags: ['autodocs'],\r\n  // render: (args: ColorSliderComponent) => ({\r\n  //   props: {\r\n  //     ...args,\r\n  //   },\r\n  // }),\r\n  argTypes: {\r\n    color: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "NoHueColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-slider/color-slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    color: 'gray',\r\n    // showGradient: true,\r\n  },\r\n}"
                },
                {
                    "name": "RgbBlue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-slider/color-slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    color: 'blue',\r\n    constantChroma: true,\r\n  },\r\n}"
                },
                {
                    "name": "RgbGreen",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-slider/color-slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    color: 'green',\r\n    constantChroma: true,\r\n  },\r\n}"
                },
                {
                    "name": "RgbRed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-slider/color-slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    color: 'red',\r\n    constantChroma: true,\r\n  },\r\n}"
                },
                {
                    "name": "Typical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/color-slider/color-slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    color: 'coral',\r\n  },\r\n}"
                }
            ],
            "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<CopyToClipboardButtonComponent>",
                    "defaultValue": "{\r\n  title: 'App/Copy to Clipboard Button',\r\n  component: CopyToClipboardButtonComponent,\r\n  tags: ['autodocs'],\r\n  // render: (args: CopyToClipboardButtonComponent) => ({\r\n  //   props: {\r\n  //     ...args,\r\n  //   },\r\n  // }),\r\n  argTypes: {\r\n    color: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "SomethingToCopy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    color: 'red',\r\n  },\r\n}"
                },
                {
                    "name": "Typical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    color: null,\r\n  },\r\n}"
                }
            ],
            "src/app/metadata/metadata.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/metadata/metadata.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<MetadataComponent>",
                    "defaultValue": "{\r\n  title: 'App/Metadata Readout',\r\n  component: MetadataComponent,\r\n  tags: ['autodocs'],\r\n  render: (args: MetadataComponent) => ({\r\n    props: {\r\n      ...args,\r\n    },\r\n  }),\r\n  argTypes: {\r\n    colorOne: {\r\n      control: 'color',\r\n    },\r\n    colorTwo: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "SomethingToCopy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/metadata/metadata.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    colorOne: 'red',\r\n    colorTwo: 'white',\r\n  },\r\n}"
                },
                {
                    "name": "Typical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/metadata/metadata.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {},\r\n}"
                }
            ],
            "src/app/palette-table/palette-table.stories.ts": [
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/palette-table/palette-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PaletteTableComponent>",
                    "defaultValue": "{\r\n  title: 'App/Palette Table',\r\n  component: PaletteTableComponent,\r\n  tags: ['autodocs'],\r\n  // render: (args: PaletteTableComponent) => ({\r\n  //   props: {\r\n  //     ...args,\r\n  //   },\r\n  // }),\r\n  argTypes: {\r\n    color: {\r\n      control: 'color',\r\n    },\r\n  },\r\n}"
                },
                {
                    "name": "Populated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/palette-table/palette-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    color: '#ff00ff',\r\n  },\r\n}"
                },
                {
                    "name": "Typical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/palette-table/palette-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {},\r\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\r\n  parameters: {\r\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/services/color-util.service.ts": [
                {
                    "name": "ColorCoordArray",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "[number, number, number]",
                    "file": "src/app/services/color-util.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                },
                {
                    "name": "ColorPair",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "[string, string]",
                    "file": "src/app/services/color-util.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "src/app/services/color-metrics.service.ts": [
                {
                    "name": "ContrastType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"apca\" | \"bpca\"",
                    "file": "src/app/services/color-metrics.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderComponent>",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PageComponent>",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/alert/alert.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AlertComponent>",
                    "file": "src/app/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/color-contrast/color-contrast.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ColorContrastComponent>",
                    "file": "src/app/color-contrast/color-contrast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/color-picker/color-picker.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ColorPickerComponent>",
                    "file": "src/app/color-picker/color-picker.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/color-slider/color-slider.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ColorSliderComponent>",
                    "file": "src/app/color-slider/color-slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CopyToClipboardButtonComponent>",
                    "file": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/metadata/metadata.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<MetadataComponent>",
                    "file": "src/app/metadata/metadata.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/palette-table/palette-table.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PaletteTableComponent>",
                    "file": "src/app/palette-table/palette-table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "src/app/palette-table/palette-table.component.ts": [
                {
                    "name": "TableData",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Array<TableRow>",
                    "file": "src/app/palette-table/palette-table.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                },
                {
                    "name": "TableRow",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Array<TableColorCell>",
                    "file": "src/app/palette-table/palette-table.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/alert/alert.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AlertMessagObj",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ColorCopied",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Typical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-contrast/color-contrast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorContrastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/color-contrast/color-contrast.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ContrastObject",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/color-contrast/color-contrast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "APCA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-contrast/color-contrast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-contrast/color-contrast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ObjectContrast",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-contrast/color-contrast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Typical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-contrast/color-contrast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WCAGEnhanced",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-contrast/color-contrast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WCAGEnhancedEdgeCase",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-picker/color-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/color-picker/color-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-picker/color-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Typical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-slider/color-slider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorSliderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/color-slider/color-slider.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ResetObject",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/color-slider/color-slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-slider/color-slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoHueColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-slider/color-slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RgbBlue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-slider/color-slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RgbGreen",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-slider/color-slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RgbRed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/color-slider/color-slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Typical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CopyToClipboardButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CopyToClipboardEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SomethingToCopy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/copy-to-clipboard-button/copy-to-clipboard-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Typical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/metadata/metadata.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetadataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/metadata/metadata.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DifferencesDataObj",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/metadata/metadata.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SuccessesObj",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/metadata/metadata.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/metadata/metadata.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SomethingToCopy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/metadata/metadata.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Typical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/palette-table/palette-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaletteTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/palette-table/palette-table.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableColorCell",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/palette-table/palette-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/palette-table/palette-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Populated",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/palette-table/palette-table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Typical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/bpca.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BpcaService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-metrics.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorMetricsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-metrics.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NumberKeyLookup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-util.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChromaMatchObject",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-util.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorUtilService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-util.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ColorMetaObj",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-util.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MinMaxLightObject",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}